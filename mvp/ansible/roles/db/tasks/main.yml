---

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql
    - postgresql-contrib
    - python-psycopg2
  tags: packages

- name: Configure PostgreSQL client authentication
  become_user: postgres
  lineinfile:
    dest: /etc/postgresql/9.3/main/pg_hba.conf
    line: "{{ item }}"
    backup: yes
  with_items:
    - "host juloserver juloserver {{ postgresql_appserver_host }}/32 md5"
    - "host analytic analytic 0.0.0.0/0 md5"
  notify: Restart PostgreSQL

- name: Configure PostgreSQL
  become_user: postgres
  template:
    src: postgresql.conf.j2
    dest: /etc/postgresql/9.3/main/postgresql.conf
    backup: yes
    mode: 0640
  notify: Restart PostgreSQL

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Ensure database is created
  become_user: postgres
  postgresql_db: name={{ postgresql_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present

- name: Ensure analytic database is created
  become_user: postgres
  postgresql_db: name={{ analytic_name }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user: db={{ postgresql_name }}
                   name={{ postgresql_user }}
                   password={{ postgresql_password }}
                   priv=ALL
                   state=present

- name: Ensure user has access to the analytic database
  become_user: postgres
  postgresql_user: db={{ analytic_name }}
                   name={{ analytic_user }}
                   password={{ analytic_password }}
                   priv=ALL
                   state=present

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user: name={{ postgresql_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present

- name: Create database extensions
  become_user: postgres
  shell: "psql -d {{ postgresql_name }} -c 'create extension if not exists dblink;'"

- name: Create SQL scripts
  become_user: postgres
  template:
    src: "{{ item }}.sql.j2"
    dest: "{{ postgresql_home_dir }}/{{ item }}.sql"
  with_items:
    - create_views

- name: Run SQL scripts
  become_user: postgres
  shell: "psql -d {{ postgresql_name }} -f {{ postgresql_home_dir }}/{{ item }}.sql"
  register: return_values
  failed_when: return_values.stderr != ""
  with_items:
    - create_views
