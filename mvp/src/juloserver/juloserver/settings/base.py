"""
Django settings for juloserver project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/

For deployment checklist, see
https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/
"""

import datetime
import os
from os.path import abspath, dirname, join

import raven
from corsheaders.defaults import default_headers
from django_replicated.settings import *  # noqa
from logging.handlers import WatchedFileHandler

from .base_julocore import *  # noqa
from .base_requests import *  # noqa
from .routing import *  # noqa
from juloserver.payment_point.settings import PAYMENT_POINT_CACHEOPS  # noqa
from juloserver.julo_financing.settings import JFINANCING_CACHEOPS  # noqa

def gettext(s):
    return s


# Where manage.py is located
BASE_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir, os.pardir)

NEW_MIGRATION_DIR_NAME = 'new_migrations'

NEW_MIGRATION_MODULE = 'juloserver.%s' % NEW_MIGRATION_DIR_NAME
NEW_MIGRATIONS_PATH = os.path.join(
    os.path.abspath(os.path.dirname(__file__)), os.pardir, NEW_MIGRATION_DIR_NAME
)

RETROJOB_DIR_NAME = 'retroloads'

RETROJOB_MODULE = 'juloserver.%s' % RETROJOB_DIR_NAME
RETROJOB_PATH = os.path.join(
    os.path.abspath(os.path.dirname(__file__)), os.pardir, RETROJOB_DIR_NAME
)

BASE_URL = os.getenv('BASE_URL')

LOGS_PATH = os.getenv('LOGS_PATH') or BASE_DIR

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_URL = '/logout'

SESSION_COOKIE_AGE = 60 * 60 * 24  # 1 days
SESSION_COOKIE_SAMESITE = 'Lax'

###############################################################################
# Security
###############################################################################

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
ALLOWED_HOSTS = []
allowed_hosts = os.getenv('ALLOWED_HOSTS')
if allowed_hosts:
    hosts = allowed_hosts.split(',')
    for host in hosts:
        ALLOWED_HOSTS.append(host.strip())
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_SSL_REDIRECT = True

CELERY_IMPORTS = (
    'juloserver.loan_refinancing.tasks.schedule_tasks',
    'juloserver.minisquad.tasks2',
    'juloserver.collection_vendor.tasks',
)

CELERY_DOGSLOW_TASK_THRESHOLD_DEFAULT = 300
CELERY_DOGSLOW_TASK_THRESHOLDS = {
    # define your task slow threshold in here
    # 'juloserver.loyalty.tasks.test_timer_task': 10,
}

###############################################################################
# Application definition
###############################################################################
SERVICE_DOMAIN = os.getenv("SERVICE_DOMAIN", 'juloserver')

# Application definition
DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.gis',
    'django.contrib.humanize',
    'django_extensions',
    'multiupload',
    'storages',
    'tinymce',
    'cacheops',
)

CORE_APPS = (
    # portal core
    'authentication',
    'core',
    # 3rd party apps
    'corsheaders',
    'cuser',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_docs',
    'phonenumber_field',
    'ddtrace.contrib.django',
    'ckeditor',
    'celerybeat_status',
    'admin_honeypot',
)

JULO_APPS = (
    # Our apps
    'juloserver.apiv1',
    'juloserver.apiv2',
    'juloserver.partnerapiv1',
    'juloserver.qaapiv1',
    'juloserver.ana_api',
    'juloserver.integapiv1',
    'juloserver.julo',
    'juloserver.line_of_credit',
    'juloserver.monitors',
    'juloserver.crm',
    'collectioncrm',
    'juloserver.sdk',
    'juloserver.disbursement',
    'juloserver.webapp',
    'juloserver.utilities',
    'juloserver.urlshortener',
    'juloserver.paylater',
    'juloserver.apiv3',
    'juloserver.followthemoney',
    'juloserver.collectionbucket',
    'juloserver.minisquad',
    'juloserver.payback',
    'juloserver.androidcard',
    'juloserver.streamlined_communication',
    'juloserver.loan_refinancing',
    'juloserver.lenderinvestment',
    'juloserver.loan_selloff',
    'juloserver.reminder',
    'juloserver.cootek',
    'juloserver.bpjs',
    'juloserver.boost',
    'juloserver.nexmo',
    'juloserver.promo_campaign',
    'juloserver.julo_privyid',
    'juloserver.centralized_migration',
    'juloserver.email_delivery',
    'juloserver.moengage',
    'juloserver.ocr',
    'juloserver.customer_module',
    'juloserver.account',
    'juloserver.account_payment',
    'juloserver.application_flow',
    'juloserver.application_form',
    'juloserver.pin',
    'juloserver.fdc',
    'juloserver.collection_vendor',
    'juloserver.loan',
    'juloserver.warning_letter',
    'juloserver.pn_delivery',
    'juloserver.waiver',
    'juloserver.payment_point',
    'juloserver.referral',
    'juloserver.merchant_financing',
    'juloserver.cashback',
    'juloserver.whatsapp',
    'juloserver.refinancing',
    'juloserver.entry_limit',
    'juloserver.pusdafil',
    'juloserver.ecommerce',
    'juloserver.grab',
    'juloserver.qris',
    'juloserver.google_analytics',
    'juloserver.api_token',
    'juloserver.rentee',
    'juloserver.face_recognition',
    'juloserver.otp',
    'juloserver.collection_hi_season',
    'juloserver.partnership',
    'juloserver.fraud_score',
    'juloserver.liveness_detection',
    'juloserver.collection_field_automation',
    'juloserver.collops_qa_automation',
    'juloserver.channeling_loan',
    'juloserver.magic_link',
    'juloserver.landing_page_api',
    'juloserver.personal_data_verification',
    'juloserver.cfs',
    'juloserver.sales_ops',
    'juloserver.autodebet',
    'juloserver.income_check',
    'juloserver.user_action_logs',
    'juloserver.registration_flow',
    'juloserver.julovers',
    'juloserver.promo',
    'juloserver.credit_card',
    'juloserver.employee_financing',
    'juloserver.historical',
    'juloserver.ovo',
    'juloserver.lendeast',
    'juloserver.graduation',
    'juloserver.fraud_report',
    'juloserver.julo_app_report',
    'juloserver.julo_savings',
    'juloserver.fraud_security',
    'juloserver.dana',
    'juloserver.julo_starter',
    'juloserver.new_crm',
    'juloserver.geohash',
    'juloserver.education',
    'juloserver.pre',
    'juloserver.balance_consolidation',
    'juloserver.early_limit_release',
    'juloserver.nps',
    'juloserver.merchant_financing.web_app',
    'juloserver.metabase',
    'juloserver.rating',
    'juloserver.partnership.leadgenb2b',
    'juloserver.tokopedia',
    'juloserver.dana_linking',
    'juloserver.oneklik_bca',
    'juloserver.healthcare',
    'juloserver.pii_vault',
    'juloserver.cx_external_party',
    'juloserver.loyalty',
    'juloserver.limit_validity_timer',
    'juloserver.faq',
    'juloserver.credgenics',
    'juloserver.julo_financing',
    'juloserver.omnichannel',
    'juloserver.inapp_survey',
    'juloserver.partnership.liveness_partnership',
    'juloserver.antifraud',
    'juloserver.cx_complaint_form',
    'juloserver.sales_ops_pds',
    'juloserver.digisign',
    'juloserver.cohort_campaign_automation',
    'juloserver.comms',
    'juloserver.ios',
    'juloserver.easy_income_upload',
    'juloserver.payment_gateway',
    'juloserver.smart_ad_hub',
)

JULO_PORTAL_APPS = (
    'dashboard',
    'loan_app',
    'julo_status',
    'scraped_data',
    'app_status',
    'loan_status',
    'payment_status',
    'account_payment_status',
    'payment',
    'offers',
    'product_profile',
    'lender',
    'loc_collection',
    'bulk_upload',
    'bl_statement',
    'ops_team_leader',
    'mini_squad',
    'julo_tool',
    'account_status',
)

NEXMO_POC_APPS = (
    'channels',
    'juloserver.poc_nexmo',
)

# don't uncomment it, except comment out the redis setting above
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'asgi_rabbitmq.RabbitmqChannelLayer',
#         # Change according to your project layout:
#         'ROUTING': 'juloserver.poc_nexmo.routing.channel_routing',
#         'CONFIG': {
#             'url': 'amqp://guest:guest@localhost:5672',
#         },
#     },
# }

OBJECT_APPS = JULO_PORTAL_APPS
INSTALLED_APPS = DJANGO_APPS + CORE_APPS + JULO_APPS + JULO_PORTAL_APPS + NEXMO_POC_APPS

MIDDLEWARE_CLASSES = [
    'django_cookies_samesite.middleware.CookiesSameSite',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 3rd party middleware classes
    'dogslow.WatchdogMiddleware',
    'juloserver.julo.middleware.DeviceIpMiddleware',
    'juloserver.julo.middleware.RequestIDMiddleware',
    'cuser.middleware.CuserMiddleware',
    'juloserver.standardized_api_response.api_middleware.StandardizedApiURLMiddleware',
    'juloserver.julocore.restapi.middleware.ApiLoggingMiddleware',
    'django_userforeignkey.middleware.UserForeignKeyMiddleware',
    'django_request_cache.middleware.RequestCacheMiddleware',
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    'token-version',
    'secret-key',
    'username',
    'x-platform',
]
CORS_EXPOSE_HEADERS = [
    'www-authenticate',
]

DB_APPLICATION_NAME = os.getenv('DB_APPLICATION_NAME', SERVICE_DOMAIN)

DATABASES = {
    # NOTE: set this to legacy after DB migration
    'legacy': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'NAME': os.getenv('POSTGRESQL_NAME'),
        'USER': os.getenv('POSTGRESQL_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_HOST'),
        'PORT': os.getenv('POSTGRESQL_PORT'),
    },
    # NOTE: set this to default after DB migration
    'default': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_OPS_NAME'),
        'USER': os.getenv('POSTGRESQL_OPS_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_OPS_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_OPS_HOST'),
        'PORT': os.getenv('POSTGRESQL_OPS_PORT'),
    },
    'replica': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_REPLICA_OPS_NAME'),
        'USER': os.getenv('POSTGRESQL_REPLICA_OPS_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_REPLICA_OPS_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_REPLICA_OPS_HOST'),
        'PORT': os.getenv('POSTGRESQL_REPLICA_OPS_PORT'),
    },
    'logging_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_LOGGING_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_LOGGING_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_LOGGING_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_LOGGING_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_LOGGING_DB_PORT'),
    },
    'julorepayment_async_replica': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_REPAYMENT_ASYNC_REPLICA_OPS_NAME'),
        'USER': os.getenv('POSTGRESQL_REPAYMENT_ASYNC_REPLICA_OPS_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_REPAYMENT_ASYNC_REPLICA_OPS_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_REPAYMENT_ASYNC_REPLICA_OPS_HOST'),
        'PORT': os.getenv('POSTGRESQL_REPAYMENT_ASYNC_REPLICA_OPS_PORT'),
    },
    'julo_analytics_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst,ana',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_JULO_ANA_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_ANA_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_ANA_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_ANA_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_ANA_DB_PORT'),
    },
    'bureau_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops,sb,hst',
            'application_name': DB_APPLICATION_NAME,
        },
        'NAME': os.getenv('POSTGRESQL_JULO_BUREAU_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_BUREAU_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_BUREAU_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_BUREAU_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_BUREAU_DB_PORT'),
    },
    'onboarding_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_ONBOARDING_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_ONBOARDING_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_ONBOARDING_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_ONBOARDING_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_ONBOARDING_DB_PORT'),
    },
    'loan_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_LOAN_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_LOAN_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_LOAN_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_LOAN_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_LOAN_DB_PORT'),
    },
    'utilization_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_UTILIZATION_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_UTILIZATION_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_UTILIZATION_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_UTILIZATION_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_UTILIZATION_DB_PORT'),
    },
    'juloplatform_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {
            'options': '-c search_path=ops',
            'application_name': SERVICE_DOMAIN,
        },
        'NAME': os.getenv('POSTGRESQL_JULO_PLATFORM_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_PLATFORM_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_PLATFORM_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_PLATFORM_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_PLATFORM_DB_PORT'),
    },
    'partnership_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_PORT'),
    },
    'partnership_onboarding_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_ONBOARDING_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_ONBOARDING_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_DB_PORT'),
    },
    'repayment_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_REPAYMENT_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_REPAYMENT_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_REPAYMENT_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_REPAYMENT_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_REPAYMENT_DB_PORT'),
    },
    'collection_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_COLLECTION_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_COLLECTION_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_COLLECTION_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_COLLECTION_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_COLLECTION_DB_PORT'),
    },
    'partnership_grab_db': {
        'ENGINE': 'juloserver.julocore.customized_psycopg2',
        'OPTIONS': {'options': '-c search_path=ops,sb,hst', 'application_name': SERVICE_DOMAIN},
        'NAME': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_GRAB_DB_NAME'),
        'USER': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_GRAB_DB_USER'),
        'PASSWORD': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_GRAB_DB_PASSWORD'),
        'HOST': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_GRAB_DB_HOST'),
        'PORT': os.getenv('POSTGRESQL_JULO_PARTNERSHIP_GRAB_DB_PORT'),
    },
}
# This setting to enable the master replica switching capability. The options are
# - "force", All traffic will be route to replica.
# - "partial", The traffic will be route to replica by using @use_db_replica decorator
# - False, No traffic will be route to replica even by using @use_db_replica decorator
DATABASE_JULO_DB_REPLICA_ROUTING_MODE = os.getenv('DATABASE_JULO_DB_REPLICA_ROUTING_MODE', False)

DATABASE_ROUTERS = [
    'juloserver.routing.router.AnaDbRouter',
    'juloserver.routing.router.LoggingDbRouter',
    'juloserver.routing.router.BureauDbRouter',
    'juloserver.routing.router.UtilizationDbRouter',
    'juloserver.routing.router.LoanDbRouter',
    'juloserver.routing.router.OnboardingDbRouter',
    'juloserver.routing.router.PlatformDbRouter',
    'juloserver.routing.router.PartnershipDbRouter',
    'juloserver.routing.router.PartnershipOnboardingDbRouter',
    'juloserver.routing.router.RepaymentDbRouter',
    'juloserver.routing.router.CollectionDbRouter',
    'juloserver.routing.router.PartnershipGrabDbRouter',
    # replica db should be placed after main db
    'juloserver.routing.router.JuloDbReplicaDbRouter',
]

REPLICATED_DATABASE_SLAVES = ['replica']

REPLICATED_DATABASE_DOWNTIME = 20

REDIS_URL = os.getenv('REDIS_URL')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
REDIS_PORT = os.getenv('REDIS_PORT', 6379)
REDIS_DB = os.getenv('REDIS_DB', 0)

# Redis
CACHEOPS_DEFAULTS = {
    'timeout': 60 * 60,
}

TOKEN_REDIS_URL = os.getenv('TOKEN_REDIS_URL', REDIS_URL)

TOKEN_REDIS_PASSWORD = os.getenv('TOKEN_REDIS_PASSWORD', REDIS_PASSWORD)

TOKEN_REDIS_PATH = f"redis://{TOKEN_REDIS_URL}:{REDIS_PORT}/{REDIS_DB}"

CACHEOPS_REDIS = {
    'host': os.getenv('REDIS_CACHEOPS_URL', REDIS_URL),
    'port': os.getenv('REDIS_CACHEOPS_PORT', REDIS_PORT),
    'db': os.getenv('REDIS_CACHEOPS_DB', REDIS_DB),
    'password': os.getenv('REDIS_CACHEOPS_PASSWORD', REDIS_PASSWORD),
}

CACHEOPS_DEGRADE_ON_FAILURE = True

CACHEOPS_ENABLED = os.getenv("CACHEOPS_ENABLED", True)

CACHEOPS_LRU = os.getenv("CACHEOPS_LRU", True)

CACHEOPS = {
    'androidcard.AndroidCard': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'application_flow.EmulatorCheck': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'julo.ProductProfile': {'ops': 'get'},
    'cfs.CfsAction': {'ops': 'all'},
    'cfs.CfsTier': {'ops': 'get'},
    'dashboard.CRMSetting': {'ops': 'all', 'timeout': 60 * 60 * 12},
    'auth.Group': {'ops': 'all', 'timeout': 60 * 60 * 12},
    # 'auth.User': {'ops': 'all', 'timeout': 60 * 60 * 12},
    'Account.AccountProperty': {'timeout': 60 * 60},
    'julo.AppVersion': {'ops': ('fetch', 'get'), 'timeout': 60 * 60},
    'julo.FeatureSetting': {'ops': 'get'},
    'julo.Workflow': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.StatusLookup': {'ops': 'all', 'timeout': 60*60*24},
    'julo.MobileFeatureSetting': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.FacebookData': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.WlLevelConfig': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.MasterAgreementTemplate': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.WorkflowStatusPath': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.ProductLookup': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.ProductLine': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.JobType': {'ops': 'all', 'timeout': 60*60*24*14},
    'julo.ReferralSystem': {'ops': 'all', 'timeout': 60*60*24*14},
    'sales_ops.SalesOpsRMScoring': {'ops': 'get'},
    'julo.Bank': {'ops': 'all'},
    'apiv3.CityLookup': {'ops': 'all'},
    'apiv3.DistrictLookup': {'ops': 'all'},
    'apiv3.SubDistrictLookup': {'ops': 'all'},
    'apiv3.ProvinceLookup': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'julo.Customer': {'ops': 'all', 'timeout': 30},
    'julo.AutoDialerRecord': {'ops': 'all', 'timeout': 60 * 60 * 24 * 31},
    'julo.ApplicationCheckListComment': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'julo.LoanPurpose': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'julo.AddressGeolocation': {'ops': 'all', 'timeout': 60 * 60 * 24 * 1},
    'julo.Partner': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'julo.AdditionalExpense': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'streamlined_communication.PushNotificationPermission': {
        'ops': 'all',
        'timeout': 60 * 60 * 24 * 14,
    },
    'streamlined_communication.InfoCardProperty': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'streamlined_communication.InfoCardButtonProperty': {
        'ops': 'all',
        'timeout': 60 * 60 * 24 * 14,
    },
    'julo.WorkflowStatusNode': {'ops': 'all', 'timeout': 60 * 60 * 24},
    'julo.Experiment': {'ops': 'all', 'timeout': 60 * 60 * 24},
    'streamlined_communication.SmsTspVendorConfig': {'ops': 'all', 'timeout': 60 * 60 * 24 * 30},
    'streamlined_communication.TelcoServiceProvider': {'ops': 'all', 'timeout': 60 * 60 * 24 * 30},
    'early_limit_release.EarlyReleaseExperiment': {'ops': 'all'},
    'sales_ops.SalesOpsVendorAgentMapping': {'ops': 'all'},
    'grab.PaymentGatewayApiLog': {'ops': 'all', 'timeout': 60 * 60 * 24 * 31},
    'payback.DanaBillerStatus': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'faq.Faq': {'ops': 'all', 'timeout': 60 * 60 * 24 * 7},
    'julo.CommsProviderLookup': {'ops': 'all', 'timeout': 60 * 60 * 24 * 30},
    'account_payment.LateFeeRule': {'ops': 'all', 'timeout': 60 * 60 * 24 * 14},
    'streamlined_communication.StreamlinedCommunicationCampaign': {
        'ops': 'all',
        'timeout': 60 * 60 * 24,
    },
}

CACHEOPS.update(
    **PAYMENT_POINT_CACHEOPS,
    **JFINANCING_CACHEOPS,
)


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    },
    'loc_mem': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'redis': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_URL}:{REDIS_PORT}/{REDIS_DB}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD
        }
    },
    'token': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": TOKEN_REDIS_PATH,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": TOKEN_REDIS_PASSWORD,
        },
    },
}

ROOT_URLCONF = 'juloserver.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'juloserver', 'templates/html'),
            os.path.join(BASE_DIR, 'juloserver', 'templates/txt'),
        ],
        'OPTIONS': {
            'context_processors': [
                # Custom Context Processor(s)
                'core.context_processors.julo',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.csrf',
                'django.template.context_processors.tz',
                'django.template.context_processors.static',
            ],
            'loaders': [
                (
                    'django.template.loaders.cached.Loader',
                    [
                        'django.template.loaders.filesystem.Loader',
                        'django.template.loaders.app_directories.Loader',
                    ],
                ),
            ],
        },
    },
]

WSGI_APPLICATION = 'juloserver.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        # noqa for flake8
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Applies to both Django and Celery
TIME_ZONE = 'Asia/Jakarta'

CELERY_TIMEZONE = TIME_ZONE

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATE_INPUT_FORMATS = [
    '%Y-%m-%d',  # '2006-10-25'
    '%m/%d/%Y',  # '10/25/2006'
    '%m/%d/%y',  # '10/25/06'
    '%d/%m/%Y',  # '25/10/2006'
    '%d/%B/%Y',  # '25/October/2006'
    '%d-%m-%Y',  # '25-10-2006'
    '%d-%B-%Y',  # '25-October-2006'
]
DATETIME_INPUT_FORMATS = [
    '%Y-%m-%d %H:%M',  # '2006-10-25'
    '%m/%d/%Y %H:%M',  # '10/25/2006'
    '%m/%d/%y %H:%M',  # '10/25/06'
    '%d/%m/%Y %H:%M',  # '25/10/2006'
    '%d/%B/%Y %H:%M',  # '25/October/2006'
    '%d-%m-%Y %H:%M',  # '25-10-2006'
    '%d-%B-%Y %H:%M',  # '25-October-2006'
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_ROOT = os.getenv('STATIC_ROOT', os.path.join(BASE_DIR, 'collected_static'))

STATIC_URL = os.getenv("STATIC_URL", '/static/')

STATICFILES_DIRS = (abspath(join(dirname(__file__), "../../static/")),)
STATICFILES_TEST = abspath(join(dirname(__file__), "../../static/"))

STATIC_ALICLOUD_BUCKET_URL = os.getenv('STATIC_ALICLOUD_BUCKET_URL')
JULOFILES_BUCKET_URL = os.getenv('JULOFILES_BUCKET_URL')
STATIC_ALICLOUD_BUCKET_FOLDER = os.getenv('STATIC_ALICLOUD_BUCKET_FOLDER', '')

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
MEDIA_URL = 'media/'
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o775
FILE_UPLOAD_PERMISSIONS = 0o664

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'juloserver.api_token.authentication.ExpiryTokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'PAGE_SIZE': 10,
}

# custom translation for standardized api response
LOCALE_PATHS = (os.path.join(BASE_DIR, 'juloserver', 'standardized_api_response', 'locale_custom'),)
STANDARDIZED_API_LANGUAGE_CODE = 'julo'

JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')

JWT_AUTH = {
    'JWT_ENCODE_HANDLER': 'rest_framework_jwt.utils.jwt_encode_handler',
    'JWT_DECODE_HANDLER': 'rest_framework_jwt.utils.jwt_decode_handler',
    'JWT_PAYLOAD_GET_USER_ID_HANDLER': (
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'
    ),
    'JWT_SECRET_KEY': JWT_SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=86400),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,
    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'juloserver.apiv1.backends.ApiV1Backend',
]

# Dogslow config---
DOGSLOW = True
# By default, Watchdog will create log files with the backtraces.
# You can also set the location of where it stores them:
DOGSLOW_LOG_TO_SENTRY = True
# Log requests taking longer than 40 seconds:
DOGSLOW_TIMER = 40
DOGSLOW_LOGGER = 'dogslow'  # can be anything, but must match `logger` below
DOGSLOW_LOG_TO_FILE = False
# ----
class RequestIDHandler(WatchedFileHandler):
    def emit(self, record):
        from juloserver.julo.middleware import get_request_id
        try:
            request_id = get_request_id()
            if request_id:
                record.request_id = request_id
            else:
                record.request_id = 'NO_REQUEST_ID'
        except Exception as e:
            record.request_id = 'NO_REQUEST_ID'

        super().emit(record)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ' '.join(
                [
                    '%(asctime)s',
                    '%(levelname)s',
                    '%(module)s',
                    '%(process)d',
                    '%(thread)d',
                    '%(message)s',
                    '[%(request_id)s]',
                ]
            )
        },
        'simple': {
            'format': '%(asctime)s %(message)s [%(request_id)s]'
        },
    },
    'handlers': {
        'logfile_server': {
            'level': 'INFO',
            'class': 'juloserver.settings.base.RequestIDHandler',
            'filename': os.path.join(LOGS_PATH, 'julo_server.log'),
            'formatter': 'verbose',
        },
        'logfile_requests': {
            'level': 'INFO',
            'class': 'juloserver.settings.base.RequestIDHandler',
            'filename': os.path.join(LOGS_PATH, 'julo_requests.log'),
            'formatter': 'simple',
        },
        'logfile_db': {
            'level': 'DEBUG',
            'class': 'juloserver.settings.base.RequestIDHandler',
            'filename': os.path.join(LOGS_PATH, 'julo_db.log'),
            'formatter': 'simple',
        },
        'logfile_gcm': {
            'level': 'DEBUG',
            'class': 'juloserver.settings.base.RequestIDHandler',
            'filename': os.path.join(LOGS_PATH, 'julo_gcm.log'),
            'formatter': 'simple',
        },
        'logfile_api': {
            'level': 'INFO',
            'class': 'juloserver.settings.base.RequestIDHandler',
            'filename': os.path.join(LOGS_PATH, 'julo_api.log'),
            'formatter': 'simple',
        },
        'sentry_dogslow': {
            'level': 'WARNING',
            'class': 'raven.contrib.django.handlers.SentryHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['logfile_requests'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['logfile_db'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'juloserver': {'handlers': ['logfile_server'], 'level': 'INFO', 'propagate': True},
        'gcm.gcm': {'handlers': ['logfile_gcm'], 'level': 'INFO', 'propagate': True},
        'api.request': {'handlers': ['logfile_api'], 'level': 'INFO', 'propagate': True},
        'dogslow': {'level': 'WARNING', 'handlers': ['sentry_dogslow'], 'propagate': True},
        'dogslow.celery': {
            'level': 'WARNING',
            'handlers': ['sentry_dogslow'],
            'propagate': False,
        },  # DO NOT propagate to the 'dogslow' parent logger
    },
}

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'cs@julofinance.com'
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = 'CSjulo88'
EMAIL_FROM = 'JULO <info@julofinance.com>'
EMAIL_DEV = ['webster@julofinance.com', 'dev@julofinance.com']
EMAIL_SUBJECT = 'JULO: Verifikasi Email'
EMAIL_SUBJECT_APP_ERROR = 'Someone Submitted An Error Report'
EMAIL_JULO_INFO_SEPULSA = "finance@julofinance.com, mei@julofinance.com"

RESET_PIN_JULO_ONE_FORM_ACTION = '/api/pin/v1/reset/confirm/'
RESET_PIN_PHONE_VERIFICATION_JULO_ONE_FORM_ACTION = '/api/pin/v1/reset/phone/verify/'
RESET_PIN_BY_PHONE_NUMBER_JULO_ONE_FORM_ACTION = '/api/pin/v1/reset-by-phone-number/confirm/'
RESET_PASSWORD_FORM_ACTION = '/api/v1/rest-auth/password/reset/confirm/'
EMAIL_ACTIVATION_ENDPOINT = '/api/v1/rest-auth/registration/verify-email/'
RESET_PIN_FORM_ACTION = '/api/loc/pin/reset/confirm/'
RESET_PIN_BY_PHONE_NUMBER_FORM_ACTION = '/api/loc/pin/reset-by-phone-number/confirm/'
OTP_WEB_VERIFICATION_PAGE = BASE_URL + '/api/otp/v1/verification/'
RESET_PHONE_NUMBER_FORM_ACTION = '/api/customer-module/v4/request-change-phone/'
RESET_PHONE_NUMBER_FORM_SUCCESS = '/api/customer-module/v4/request-change-phone/submit/'
RESET_PIN_JULO_ONE_LINK_HOST = BASE_URL + RESET_PIN_JULO_ONE_FORM_ACTION
RESET_PIN_PHONE_VERIFICATION_JULO_ONE_LINK_HOST = BASE_URL + RESET_PIN_PHONE_VERIFICATION_JULO_ONE_FORM_ACTION
RESET_PIN_BY_PHONE_NUMBER_JULO_ONE_LINK_HOST = (
    BASE_URL + RESET_PIN_BY_PHONE_NUMBER_JULO_ONE_FORM_ACTION
)
RESET_PASSWORD_LINK_HOST = BASE_URL + RESET_PASSWORD_FORM_ACTION
EMAIL_ACTIVATION_LINK_HOST = BASE_URL + EMAIL_ACTIVATION_ENDPOINT
RESET_PIN_LINK_HOST = BASE_URL + RESET_PIN_FORM_ACTION
RESET_PHONE_NUMBER_LINK_HOST = BASE_URL + RESET_PHONE_NUMBER_FORM_ACTION
RESET_PHONE_NUMBER_LINK_SUCCESS = RESET_PHONE_NUMBER_FORM_SUCCESS

###############################################################################
# Julo specific third-party service settings
###############################################################################

ANASERVER_BASE_URL = os.getenv('ANASERVER_BASE_URL')
ANASERVER_TOKEN = os.getenv('ANASERVER_TOKEN')

SCRAPER_BASE_URL = os.getenv('SCRAPER_BASE_URL')
SCRAPER_TOKEN = os.getenv('SCRAPER_TOKEN')

INFOCARD_BASE_URL = os.getenv('INFOCARD_BASE_URL')

CRM_BASE_URL = os.getenv('BASE_URL')
NEW_CRM_BASE_URL = os.getenv('NEW_CRM_BASE_URL')
CRM_REVAMP_BASE_URL = os.getenv('CRM_REVAMP_BASE_URL')

# The server key used to connect to Google Cloud Messaging
GCM_SERVER_KEY = os.getenv('GCM_SERVER_KEY')
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')

S3_MEDIA_BUCKET = os.getenv('S3_MEDIA_BUCKET')
S3_DATA_BUCKET = os.getenv('S3_DATA_BUCKET')
S3_ANALYTICS_BUCKET = os.getenv('S3_ANALYTICS_BUCKET')

POSTGRESQL_OPS_NAME = os.getenv('POSTGRESQL_OPS_NAME')
POSTGRESQL_OPS_USER = os.getenv('POSTGRESQL_OPS_USER')
POSTGRESQL_OPS_PASSWORD = os.getenv('POSTGRESQL_OPS_PASSWORD')
POSTGRESQL_OPS_HOST = os.getenv('POSTGRESQL_OPS_HOST')
POSTGRESQL_OPS_PORT = os.getenv('POSTGRESQL_OPS_PORT')

POSTGRESQL_ANA_NAME = os.getenv('POSTGRESQL_ANA_NAME')
POSTGRESQL_ANA_USER = os.getenv('POSTGRESQL_ANA_USER')
POSTGRESQL_ANA_PASSWORD = os.getenv('POSTGRESQL_ANA_PASSWORD')
POSTGRESQL_ANA_HOST = os.getenv('POSTGRESQL_ANA_HOST')
POSTGRESQL_ANA_PORT = os.getenv('POSTGRESQL_ANA_PORT')

POSTGRESQL_ANALYTICS_USER = os.getenv('POSTGRESQL_ANALYTICS_USER')
POSTGRESQL_ANALYTICS_PWD = os.getenv('POSTGRESQL_ANALYTICS_PWD')
POSTGRESQL_ANALYTICS_DATABASE = os.getenv('POSTGRESQL_ANALYTICS_DATABASE')
POSTGRESQL_ANALYTICS_PORT = os.getenv('POSTGRESQL_ANALYTICS_PORT')
POSTGRESQL_ANALYTICS_HOSTNAME = os.getenv('POSTGRESQL_ANALYTICS_HOSTNAME')

POSTGRESQL_NAME = os.getenv('POSTGRESQL_NAME')
POSTGRESQL_USER = os.getenv('POSTGRESQL_USER')
POSTGRESQL_PASSWORD = os.getenv('POSTGRESQL_PASSWORD')
POSTGRESQL_HOST = os.getenv('POSTGRESQL_HOST')
POSTGRESQL_PORT = os.getenv('POSTGRESQL_PORT')

AWS_DEFAULT_REGION = os.getenv('AWS_DEFAULT_REGION')
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

WHITELABEL_SECRET_KEY = os.getenv('WHITELABEL_SECRET_KEY')
WHITELABEL_PUBLIC_KEY = os.getenv('WHITELABEL_PUBLIC_KEY')
WHITELABEL_FRONTEND_BASE_URL = os.getenv('WHITELABEL_FRONTEND_BASE_URL')
try:
    RAVEN_CONFIG = {
        # 'dsn': 'This is configured using SENTRY_DSN environment variable',
        # If you are using git, you can also automatically configure the
        # release based on the git info.
        'release': raven.fetch_git_sha(os.path.join(BASE_DIR, os.pardir, os.pardir)),
    }
except Exception:
    RAVEN_CONFIG = {
        # Docker build inserts git sha into env var
        'release': os.getenv('GIT_COMMIT', "GITSHANOTAVALABLE8CHECKSETTINGSBASE"),
    }

RAVEN_CONFIG['include_versions'] = False

DOKU_CLIENT_ID = os.getenv('DOKU_CLIENT_ID')
DOKU_CLIENT_SECRET = os.getenv('DOKU_CLIENT_SECRET')
DOKU_SHARED_KEY = os.getenv('DOKU_SHARED_KEY')
DOKU_BASE_URL = os.getenv('DOKU_BASE_URL')

BFI_CLIENT_ID = os.getenv('BFI_CLIENT_ID')
BFI_BASE_URL = os.getenv('BFI_BASE_URL')

MONTY_API_URL = os.getenv('MONTY_API_URL')
MONTY_API_USERNAME = os.getenv('MONTY_API_USERNAME')
MONTY_API_PASSWORD = os.getenv('MONTY_API_PASSWORD')
MONTY_NON_OTP_API_USERNAME = os.getenv('MONTY_NON_OTP_API_USERNAME')
MONTY_NON_OTP_API_PASSWORD = os.getenv('MONTY_NON_OTP_API_PASSWORD')

NEXMO_API_KEY = os.getenv('NEXMO_API_KEY')
NEXMO_API_SECRET = os.getenv('NEXMO_API_SECRET')
NEXMO_NON_OTP_API_KEY = os.getenv('NEXMO_NON_OTP_API_KEY')
NEXMO_NON_OTP_API_SECRET = os.getenv('NEXMO_NON_OTP_API_SECRET')
NEXMO_SMS_URL = os.getenv('NEXMO_SMS_URL')
NEXMO_CALLBACK = BASE_URL + '/api/integration/v1/callbacks/sms'
NEXMO_VOICE_URL = "https://api.nexmo.com/v1/calls"
NEXMO_APPLICATION_ID = os.getenv('NEXMO_APPLICATION_ID')
NEXMO_PRIVATE_KEY = os.getenv('NEXMO_PRIVATE_KEY')
NEXMO_PHONE_NUMBER = os.getenv('NEXMO_PHONE_NUMBER')

LOAN_NEXMO_API_KEY = os.getenv('LOAN_NEXMO_API_KEY')
LOAN_NEXMO_API_SECRET = os.getenv('LOAN_NEXMO_API_SECRET')
LOAN_NEXMO_APPLICATION_ID = os.getenv('LOAN_NEXMO_APPLICATION_ID')
LOAN_NEXMO_PRIVATE_KEY = os.getenv('LOAN_NEXMO_PRIVATE_KEY')

INFOBIP_SMS_HOST = os.getenv('INFOBIP_SMS_HOST')
INFOBIP_SMS_API_KEY = os.getenv('INFOBIP_SMS_API_KEY')

INFOBIP_SMS_OTP_HOST = os.getenv('INFOBIP_SMS_OTP_HOST')
INFOBIP_SMS_OTP_API_KEY = os.getenv('INFOBIP_SMS_OTP_API_KEY')

INFOBIP_VOICE_HOST = os.getenv('INFOBIP_VOICE_HOST')
INFOBIP_VOICE_API_KEY = os.getenv('INFOBIP_VOICE_API_KEY')

ALICLOUD_ACCESS_KEY = os.getenv('ALICLOUD_ACCESS_KEY')
ALICLOUD_SECRET = os.getenv('ALICLOUD_SECRET')

NEXMO_PRIVATE_KEY_POC = os.getenv('NEXMO_PRIVATE_KEY_POC')

SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
SENDGRID_CALLBACK = BASE_URL + '/api/integration/v1/callbacks/email'

WAVECELL_SUB_ACC_ID = os.getenv('WAVECELL_SUB_ACC_ID')
WAVECELL_API_KEY = os.getenv('WAVECELL_API_KEY')

SENTRY_DSN = os.getenv('SENTRY_DSN')

GOOGLE_CLIENT_SECRET = os.path.join(BASE_DIR, "google_api_client_secret.json")
GOOGLE_AUTH_CALLBACK = BASE_URL + '/api/v1/applications/gmail/authcode'

SIP_API_KEY = os.getenv('SIP_API_KEY')
SIP_API_KEY_CLICK2CALL = os.getenv('SIP_API_KEY_CLICK2CALL')
SIP_API_KEY_ROBODIAL = os.getenv('SIP_API_KEY_ROBODIAL')
SIP_BASE_URL = os.getenv('SIP_BASE_URL')
SIP_BASE_URL_ROBODIAL = os.getenv('SIP_BASE_URL_ROBODIAL')

XENDIT_API_KEY = os.getenv('XENDIT_API_KEY')
XENDIT_BASE_URL = os.getenv('XENDIT_BASE_URL')
XENDIT_DISBURSEMENT_VALIDATION_TOKEN = os.getenv('XENDIT_DISBURSEMENT_VALIDATION_TOKEN')

INSTAMONEY_API_KEY = os.getenv('INSTAMONEY_API_KEY')
INSTAMONEY_API_TOKEN = os.getenv('INSTAMONEY_API_TOKEN')
INSTAMONEY_BASE_URL = os.getenv('INSTAMONEY_BASE_URL')

SLACK_WEB_API_TOKEN = os.getenv('SLACK_WEB_API_TOKEN')
SLACK_WEB_API_BOT_TOKEN = os.getenv('SLACK_WEB_API_BOT_TOKEN')
SLACK_WEBHOOK_DUKCAPIL_LOW_BALANCE_URL = os.getenv('SLACK_WEBHOOK_DUKCAPIL_LOW_BALANCE_URL')
SLACK_MONITORING_CHANNEL = "#monitors_julodb_other"

FASPAY_MERCHANT_NAME = os.getenv('FASPAY_MERCHANT_NAME')
FASPAY_MERCHANT_ID = os.getenv('FASPAY_MERCHANT_ID')
FASPAY_USER_ID = os.getenv('FASPAY_USER_ID')
FASPAY_PASSWORD = os.getenv('FASPAY_PASSWORD')
FASPAY_USER_ID_FOR_VA_PHONE_NUMBER = os.getenv('FASPAY_USER_ID_FOR_VA_PHONE_NUMBER')
FASPAY_PASSWORD_FOR_VA_PHONE_NUMBER = os.getenv('FASPAY_PASSWORD_FOR_VA_PHONE_NUMBER')
FASPAY_USER_ID_BNI_VA = os.getenv('FASPAY_USER_ID_BNI_VA')
FASPAY_PASSWORD_BNI_VA = os.getenv('FASPAY_PASSWORD_BNI_VA')
FASPAY_CODE = '207'
FASPAY_API_BASE_URL = os.getenv('FASPAY_API_BASE_URL')

BRI_X_KEY = os.getenv('BRI_X_KEY')
BRI_CODE = os.getenv('BRI_CODE')
BRI_CLIENT_ID = os.getenv('BRI_CLIENT_ID')
BRI_CLIENT_SECRET = os.getenv('BRI_CLIENT_SECRET')
BRI_BASE_URL = 'https://api.bri.co.id/v1/api/'

DATADOG_TRACE = {
    'DEFAULT_SERVICE': SERVICE_DOMAIN,
    'TAGS': {'env': 'base'},
}
OTP_SECRET_KEY = os.getenv('OTP_SECRET_KEY')

TOKOPEDIA_CLIENT_ID = os.getenv('TOKOPEDIA_CLIENT_ID')
TOKOPEDIA_CLIENT_SECRET = os.getenv('TOKOPEDIA_CLIENT_SECRET')
TOKOPEDIA_BASE_URL = os.getenv('TOKOPEDIA_BASE_URL')

APPS_FLYER_IOS_CLIENT_ID = os.getenv('APPS_FLYER_IOS_CLIENT_ID')
APPS_FLYER_CLIENT_ID = os.getenv('APPS_FLYER_CLIENT_ID')
APPS_FLYER_API_KEY = os.getenv('APPS_FLYER_API_KEY')
APPS_FLYER_BASE_URL = os.getenv('APPS_FLYER_BASE_URL')

OSS_ENDPOINT = os.getenv('OSS_ENDPOINT')
OSS_ACCESS_KEY_ID = os.getenv('OSS_ACCESS_KEY_ID')
OSS_ACCESS_KEY_SECRET = os.getenv('OSS_ACCESS_KEY_SECRET')
OSS_MEDIA_BUCKET = os.getenv('OSS_MEDIA_BUCKET')
OSS_CAMPAIGN_BUCKET = os.getenv('OSS_CAMPAIGN_BUCKET')
OSS_CAMPAIGN_BASE_URL = os.getenv('OSS_CAMPAIGN_BASE_URL')
OSS_PUBLIC_DOMAIN_NAME = "oss-ap-southeast-5.aliyuncs.com"
OSS_PUBLIC_BUCKET = "julowebassets"
OSS_PUBLIC_ASSETS_BUCKET = os.getenv('OSS_PUBLIC_ASSETS_BUCKET')

SEPULSA_BASE_URL = os.getenv('SEPULSA_BASE_URL')
SEPULSA_USERNAME = os.getenv('SEPULSA_USERNAME')
SEPULSA_SECRET_KEY = os.getenv('SEPULSA_SECRET_KEY')
SEPULSA_FERNET_KEY = os.getenv('SEPULSA_FERNET_KEY')
SLACK_SEPULSA_CHANNEL = os.getenv('SLACK_SEPULSA_CHANNEL')

# sepulsa special for j1 loan
SEPULSA_LOAN_BASE_URL = os.getenv('SEPULSA_BASE_URL')
SEPULSA_LOAN_USERNAME = os.getenv('SEPULSA_LOAN_USERNAME')
SEPULSA_LOAN_SECRET_KEY = os.getenv('SEPULSA_LOAN_SECRET_KEY')

QUIROS_AUTODIAL_BASE_URL = os.getenv('QUIROS_AUTODIAL_BASE_URL')
QUIROS_ROBOCALL_BASE_URL = os.getenv('QUIROS_ROBOCALL_BASE_URL')
QUIROS_ROBOCALL_USERNAME = os.getenv('QUIROS_ROBOCALL_USERNAME')
QUIROS_ROBOCALL_PASSWORD = os.getenv('QUIROS_ROBOCALL_PASSWORD')

SLACK_CASHBACK = "#cashback"
SLACK_BACKEND = "#backend"
SLACK_PARTNER_ATTRIBUTION = "#partner_attribution"
SLACK_DEV_FINANCE = "#dev-finance"

QISMO_BASE_URL = os.getenv('QISMO_BASE_URL')
QISMO_USERNAME = os.getenv('QISMO_USERNAME')
QISMO_PASSWORD = os.getenv('QISMO_PASSWORD')
QISMO_APP_ID = os.getenv('QISMO_APP_ID')

PRIMO_BASE_URL = "http://julo.primodialler.com"
PRIMO_USERNAME = os.getenv('PRIMO_USERNAME')
PRIMO_PASSWORD = os.getenv('PRIMO_PASSWORD')

LOC_PIN_MODE = os.getenv("LOC_PIN_MODE")

BCA_API_KEY = os.getenv('BCA_API_KEY')
BCA_API_SECRET_KEY = os.getenv('BCA_API_SECRET_KEY')
BCA_CLIENT_ID = os.getenv('BCA_CLIENT_ID')
BCA_CLIENT_SECRET = os.getenv('BCA_CLIENT_SECRET')
BCA_CORPORATE_ID = os.getenv('BCA_CORPORATE_ID')
BCA_ACCOUNT_NUMBER = os.getenv('BCA_ACCOUNT_NUMBER')
BCA_BASE_URL = os.getenv('BCA_BASE_URL')
SLACK_BCA_CHANNEL = os.getenv('SLACK_BCA_CHANNEL')

BCA_SNAP_BASE_URL_OUTBOND = 'https://devapi.klikbca.com'
BCA_SNAP_CLIENT_ID_OUTBOND = os.getenv('BCA_SNAP_CLIENT_ID_OUTBOND')
BCA_SNAP_CLIENT_SECRET_OUTBOND = os.getenv('BCA_SNAP_CLIENT_SECRET_OUTBOND')
BCA_SNAP_PRIVATE_KEY_OUTBOND = os.getenv('BCA_SNAP_PRIVATE_KEY_OUTBOND')
BCA_SNAP_COMPANY_VA_OUTBOND = '10994'
BCA_SNAP_CHANNEL_ID_OUBTOND = '95231'

BCA_SNAP_PUBLIC_KEY_INBOUND = os.getenv('BCA_SNAP_PUBLIC_KEY_INBOUND')
BCA_SNAP_CLIENT_ID_INBOUND = os.getenv('BCA_SNAP_CLIENT_ID_INBOUND')
BCA_SNAP_CLIENT_SECRET_INBOUND = os.getenv('BCA_SNAP_CLIENT_SECRET_INBOUND')

FASPAY_SNAP_PUBLIC_KEY = os.getenv('FASPAY_SNAP_PUBLIC_KEY')
FASPAY_SNAP_PRIVATE_KEY = os.getenv('FASPAY_SNAP_PRIVATE_KEY')

# BCA param for testing env
BCA_REPAYMENT_ACCOUNT_NUMBER = os.getenv('BCA_REPAYMENT_ACCOUNT_NUMBER')
BCA_REPAYMENT_API_KEY = os.getenv('BCA_REPAYMENT_API_KEY')
BCA_REPAYMENT_API_SECRET_KEY = os.getenv('BCA_REPAYMENT_API_SECRET_KEY')
BCA_REPAYMENT_CLIENT_ID = os.getenv('BCA_REPAYMENT_CLIENT_ID')
BCA_REPAYMENT_CLIENT_SECRET = os.getenv('BCA_REPAYMENT_CLIENT_SECRET')
BCA_REPAYMENT_CORPORATE_ID = os.getenv('BCA_REPAYMENT_CORPORATE_ID')
BCA_CHANNEL_ID = os.getenv('BCA_CHANNEL_ID')

VA_BCA_API_KEY = os.getenv('VA_BCA_API_KEY')
VA_BCA_API_SECRET_KEY = os.getenv('VA_BCA_API_SECRET_KEY')
VA_BCA_CLIENT_ID = os.getenv('VA_BCA_CLIENT_ID')
VA_BCA_CLIENT_SECRET = os.getenv('VA_BCA_CLIENT_SECRET')
VA_BCA_CORPORATE_ID = os.getenv('VA_BCA_CORPORATE_ID')

AUTH_SERVER_BASE_URL = os.getenv('AUTH_SERVER_BASE_URL')

XFERS_APP_API_KEY = os.getenv('XFERS_APP_API_KEY')
XFERS_APP_SECRET_KEY = os.getenv('XFERS_APP_SECRET_KEY')
XFERS_BASE_URL = os.getenv('XFERS_BASE_URL')
XFERS_JTF_USER_TOKEN = os.getenv('XFERS_JTF_USER_TOKEN')
XFERS_JTP_USER_TOKEN = os.getenv('XFERS_JTP_USER_TOKEN')
XFERS_CALLBACK_URL_STEP_ONE = os.getenv('XFERS_CALLBACK_URL_STEP_ONE')
XFERS_CALLBACK_URL_STEP_TWO = os.getenv('XFERS_CALLBACK_URL_STEP_TWO')
XFERS_CALLBACK_URL = os.getenv('XFERS_CALLBACK_URL')

SLACK_XFERS_CHANNEL = os.getenv('SLACK_XFERS_CHANNEL')

SIM_BASE_URL = os.getenv('SIM_BASE_URL')
SIM_USERNAME = os.getenv('SIM_USERNAME')
SIM_PASSWORD = os.getenv('SIM_PASSWORD')

ADVANCE_AI_BASE_URL = os.getenv('ADVANCE_AI_BASE_URL')
ADVANCE_AI_API_KEY = os.getenv('ADVANCE_AI_API_KEY')
ADVANCE_AI_SECRET_KEY = os.getenv('ADVANCE_AI_SECRET_KEY')

CRYPTOGRAPHY_KEY = "QWvxJtgPh36mHJ9R8hn_5uFuaMCxQ5Yj6St2kQ4Mnxk="
BITLY_TOKEN = os.getenv('BITLY_TOKEN')
EMAIL_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/email/"

SPHP_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/sphp/"
BANK_LOGO_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/bank_logo/"
EWALLET_LOGO_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/ewallet_logo/"
ECOMMERCE_LOGO_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/ecommerce/"
PRODUCTS_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/products/"
AUTODIALER_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/autodialer"
PAID_LETTER_STATIC_FILE_PATH = BASE_URL + STATIC_URL + "images/paid_letter/"

if 'http' in STATIC_URL:
    SPHP_STATIC_FILE_PATH = STATIC_URL + "images/sphp/"
    BANK_LOGO_STATIC_FILE_PATH = STATIC_URL + "images/bank_logo/"
    EMAIL_STATIC_FILE_PATH = STATIC_URL + "images/email/"
    EWALLET_LOGO_STATIC_FILE_PATH = STATIC_URL + "images/ewallet_logo/"
    ECOMMERCE_LOGO_STATIC_FILE_PATH = STATIC_URL + "images/ecommerce/"
    PRODUCTS_STATIC_FILE_PATH = STATIC_URL + "images/products/"
    AUTODIALER_STATIC_FILE_PATH = STATIC_URL + "images/autodialer"
    PAID_LETTER_STATIC_FILE_PATH = STATIC_URL + "images/paid_letter/"

DIGISIGN_BASE_URL = os.getenv('DIGISIGN_BASE_URL')
DIGISIGN_TOKEN = os.getenv('DIGISIGN_TOKEN')
DIGISIGN_USERID = os.getenv('DIGISIGN_USERID')
DIGISIGN_PWD = os.getenv('DIGISIGN_PWD')
DIGISIGN_PLATFORM_EMAIL = os.getenv('DIGISIGN_PLATFORM_EMAIL')
DIGISIGN_PLATFORM_NAME = os.getenv('DIGISIGN_PLATFORM_NAME')
DIGISIGN_PLATFORM_KEY = os.getenv('DIGISIGN_PLATFORM_KEY')

GOPAY_SERVER_KEY = os.getenv('GOPAY_SERVER_KEY')
GOPAY_SNAP_BASE_URL = os.getenv('GOPAY_SNAP_BASE_URL')
GOPAY_BASE_URL = os.getenv('GOPAY_BASE_URL')

URL_SHORTENER_BASE = os.getenv('URL_SHORTENER_BASE')

BUKALAPAK_USERNAME = os.getenv('BUKALAPAK_USERNAME')
BUKALAPAK_SECRET_KEY = os.getenv('BUKALAPAK_SECRET_KEY')

TINYMCE_JS_URL = "/static/plugins/js/tinymce/tinymce.min.js"
TINYMCE_DEFAULT_CONFIG = {
    'plugins': "code",
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'width': '100%',
    'height': 900,
}
LAKU6_CALLBACK = os.getenv('LAKU6_CALLBACK')
LAKU6_TOKEN = os.getenv('LAKU6_TOKEN')
NEXMO_API_BL_KEY = os.getenv('NEXMO_API_BL_KEY')
NEXMO_API_BL_SECRET = os.getenv('NEXMO_API_BL_SECRET')
PEDE_CALLBACK_URL = os.getenv('PEDE_CALLBACK_URL')
NEMESYS_BASE_URL = os.getenv('NEMESYS_BASE_URL')

CENTERIX_USER_ID = os.getenv('CENTERIX_USER_ID')
CENTERIX_PASSWORD = os.getenv('CENTERIX_PASSWORD')
CENTERIX_BASE_URL = os.getenv('CENTERIX_BASE_URL')

CENTERIX_JULO_USER_ID = os.getenv('CENTERIX_JULO_USER_ID')
CENTERIX_JULO_PASSWORD = os.getenv('CENTERIX_JULO_PASSWORD')

FOLLOW_THE_MONEY_URL = os.getenv('FOLLOW_THE_MONEY_URL')

NEMESYS_TOKEN = os.getenv('NEMESYS_TOKEN')

LOAN_APPROVAL_SMS_URL = 'https://go.onelink.me/zOQD/53d1867c'

LENDER_WITHDRAWAL_CALLBACK_URL = os.getenv('LENDER_WITHDRAWAL_CALLBACK_URL')

PEDE_BASE_URL = os.getenv('PEDE_BASE_URL')
# Gopay
GOPAY_API_KEY = os.getenv('GOPAY_API_KEY')
GOPAY_APPROVER_API_KEY = os.getenv('GOPAY_APPROVER_API_KEY')
GOPAY_CASHBACK_BASE_URL = os.getenv('GOPAY_CASHBACK_BASE_URL')

# Mintos
MINTOS_BASE_URL = os.getenv('MINTOS_BASE_URL')
MINTOS_TOKEN = os.getenv('MINTOS_TOKEN')
# Cootek
COOTEK_API_KEY = os.getenv('COOTEK_API_KEY')
COOTEK_API_SECRET_KEY = os.getenv('COOTEK_API_SECRET_KEY')
COOTEK_API_BASE_URL = os.getenv('COOTEK_API_BASE_URL')

# FDC
FDC_SFTP_HOST = os.getenv('FDC_SFTP_HOST')
FDC_SFTP_USERNAME = os.getenv('FDC_SFTP_USERNAME')
FDC_SFTP_PASSWORD = os.getenv('FDC_SFTP_PASSWORD')
FDC_ZIP_PASSWORD = os.getenv('FDC_ZIP_PASSWORD')
FDC_SFTP_PROXY_PORT = os.getenv('FDC_SFTP_PROXY_PORT', 22)

FDC_API_BASE_URL = os.getenv('FDC_API_BASE_URL')
FDC_API_USERNAME = os.getenv('FDC_API_USERNAME')
FDC_API_PASSWORD = os.getenv('FDC_API_PASSWORD')

# Appsflyer Uninstallations constants
APPS_FLYER_INSTALL_BASE_URL = os.getenv('APPS_FLYER_INSTALL_BASE_URL')
APPS_FLYER_UNINSTALL_BASE_URL = os.getenv('APPS_FLYER_UNINSTALL_BASE_URL')
APPS_FLYER_API_TOKEN = os.getenv('APPS_FLYER_API_TOKEN')
APPS_FLYER_UNINSTALL_LOCATION_QUERY = os.getenv('APPS_FLYER_UNINSTALL_LOCATION_QUERY')

# BPJS - Tongdun
TONGDUN_PARTNER_CODE = os.getenv('TONGDUN_PARTNER_CODE')
TONGDUN_PARTNER_KEY = os.getenv('TONGDUN_PARTNER_KEY')
TONGDUN_APP_NAME_ANDROID = os.getenv('TONGDUN_APP_NAME_ANDROID')
TONGDUN_APP_NAME_WEB = os.getenv('TONGDUN_APP_NAME_WEB')
TONGDUN_BOX_TOKEN_ANDROID = os.getenv('TONGDUN_BOX_TOKEN_ANDROID')
TONGDUN_BOX_TOKEN_WEB = os.getenv('TONGDUN_BOX_TOKEN_WEB')
TONGDUN_BPJS_LOGIN_URL = os.getenv('TONGDUN_BPJS_LOGIN_URL')
TONGDUN_INTERFACE_API_BASE_URL = os.getenv('TONGDUN_INTERFACE_API_BASE_URL')
BPJS_WEB_REDIRECT_URL = os.getenv('BPJS_WEB_REDIRECT_URL')

# Intelix
INTELIX_API_KEY = os.getenv('INTELIX_API_KEY')
INTELIX_JULO_TOKEN = os.getenv('INTELIX_JULO_TOKEN')

# privy integration
PRIVY_BASE_URL = os.getenv('PRIVY_BASE_URL')
PRIVY_MERCHANT_KEY = os.getenv('PRIVY_MERCHANT_KEY')
PRIVY_USERNAME = os.getenv('PRIVY_USERNAME')
PRIVY_SECRET_KEY = os.getenv('PRIVY_SECRET_KEY')
PRIVY_ENTERPRISE_TOKEN = os.getenv('PRIVY_ENTERPRISE_TOKEN')
PRIVY_ENTERPRISE_ID = os.getenv('PRIVY_ENTERPRISE_ID')

CALLBACK_BASE_URL = os.getenv('CALLBACK_BASE_URL')

# MoEngage
MOENGAGE_API_ID = os.getenv('MOENGAGE_API_ID')
MOENGAGE_API_KEY = os.getenv('MOENGAGE_API_KEY')
MOENGAGE_API_BASE_URL = os.getenv('MOENGAGE_API_BASE_URL')
# OCR GOOGLE MODEL
GOOGLE_CREDENTIALS_PATH = os.getenv('GOOGLE_CREDENTIALS_PATH')
OCR_PROJECT_ID = os.getenv('OCR_PROJECT_ID')
OCR_MODEL_ID = os.getenv('OCR_MODEL_ID')

TIME_SLEEP = 0.2
TIME_SLEEP_PAYMENT = 10
DELAY_FOR_REALTIME_EVENTS = 5
DELAY_FOR_MOENGAGE_API_CALL = 60

AXIATA_API_URL = "http://149.129.192.29:8081/axiata"

WEBVIEW_ECOMMERCE_URL = os.getenv('WEBVIEW_ECOMMERCE_URL')

# GRAB
GRAB_API_URL = os.getenv('GRAB_API_URL')
GRAB_CLIENT_ID = os.getenv('GRAB_CLIENT_ID')
GRAB_CLIENT_NAME = os.getenv('GRAB_CLIENT_NAME')
GRAB_HMAC_SECRET = os.getenv('GRAB_HMAC_SECRET')
GRAB_HMAC_SECRET_PHONE_NUMBER = os.getenv('GRAB_HMAC_SECRET_PHONE_NUMBER')
GRAB_REFERRAL_CODE_SALT = os.getenv('GRAB_REFERRAL_CODE_SALT')
GRAB_FE_URL = os.getenv('GRAB_FE_URL')
GRAB_JWT_SECRET_KEY = os.getenv('GRAB_JWT_SECRET_KEY')

# Linkaja
LINKAJA_API_BASE_URL = os.getenv('LINKAJA_API_BASE_URL')
LINKAJA_API_USERNAME = os.getenv('LINKAJA_API_USERNAME')
LINKAJA_API_SECRET_KEY = os.getenv('LINKAJA_API_SECRET_KEY')
LINKAJA_API_ALGORITHM = os.getenv('LINKAJA_API_ALGORITHM')

# Pusdafil
PUSDAFIL_URL = os.getenv('PUSDAFIL_URL')
PUSDAFIL_USERNAME = os.getenv('PUSDAFIL_USERNAME')
PUSDAFIL_PASSWORD = os.getenv('PUSDAFIL_PASSWORD')

PUSDAFIL_ENCRYPTION_KEY = os.getenv('PUSDAFIL_ENCRYPTION_KEY')
PUSDAFIL_ENCRYPTION_IV = os.getenv('PUSDAFIL_ENCRYPTION_IV')
PUSDAFIL_ENCRYPTION_BS = int(os.getenv('PUSDAFIL_ENCRYPTION_BS'))

# intelix QA recording automation
INTELIX_SFTP_HOST = os.getenv('INTELIX_SFTP_HOST')
INTELIX_SFTP_USERNAME = os.getenv('INTELIX_SFTP_USERNAME')
INTELIX_SFTP_PASSWORD = os.getenv('INTELIX_SFTP_PASSWORD')
INTELIX_SFTP_PORT = 22230
OSS_JULO_COLLECTION_BUCKET = "julo-collection"

# Google analytics
GOOGLE_ANALYTICS_PROPERTY_ID = os.getenv('GOOGLE_ANALYTICS_PROPERTY_ID')
GOOGLE_ANALYTICS_CREDENTIALS_PATH = os.getenv('GOOGLE_ANALYTICS_CREDENTIALS_PATH')
GOOGLE_ANALYTICS_FIREBASE_APP_ID = os.getenv('GOOGLE_ANALYTICS_FIREBASE_APP_ID')
GOOGLE_ANALYTICS_API_SECRET_KEY = os.getenv('GOOGLE_ANALYTICS_API_SECRET_KEY')

# HERE maps geocoding
HERE_GEO_CODING_API_URL = os.getenv('HERE_GEO_CODING_API_URL')
HERE_GEO_CODING_API_KEY = os.getenv('HERE_GEO_CODING_API_KEY')

# Citcall
CITCALL_URL = os.getenv('CITCALL_URL')
CITCALL_BACKUP_URL = os.getenv('CITCALL_BACKUP_URL')
CITCALL_API_KEY = os.getenv('CITCALL_API_KEY')

SLACK_SECURITY_ALERTS = "#security_alerts"

# IPINFO.IO
IPINFO_HOST = os.getenv('IPINFO_HOST')
IPINFO_API_TOKEN = os.getenv('IPINFO_API_TOKEN')

ADMIN_HONEYPOT_EMAIL_ADMINS = False
ADMIN_HONEYPOT_SLACK_ALERT = True

# Bonza
BONZA_API_KEY = os.getenv('BONZA_API_KEY')
BONZA_API_BASE_URL = os.getenv('BONZA_API_BASE_URL')
BONZA_INHOUSE_LOAN_SCORING_URL = os.getenv('BONZA_INHOUSE_LOAN_SCORING_URL')

# DOT core server
DOT_API_BASE_URL = os.getenv('DOT_API_BASE_URL', 'http://livedetection.julo-internal.vpc:8080')
LIVENESS_LICENSE_KEY = os.getenv('LIVENESS_LICENSE_KEY')
DOT_DIGITAL_IDENTITY_API_BASE_URL = os.getenv(
    'DOT_DIGITAL_IDENTITY_API_BASE_URL', 'http://smiledetection.julo-internal.vpc:8080'
)
DDIS_TOKEN = os.getenv('DDIS_TOKEN')

# Airudder QA Semi automation
QA_AIRUDDER_API_BASE_URL = "https://quality-testing.airudder.com/service/cloud/"
QA_AIRUDDER_API_KEY = os.getenv('QA_AIRUDDER_API_KEY')
QA_AIRUDDER_API_SECRET_KEY = os.getenv('QA_AIRUDDER_API_SECRET_KEY')

# BSS channeling
# for testing purpose only, after get real account will move to infra
BSS_CHANNELING_BASE_URL = os.getenv('BSS_CHANNELING_BASE_URL')
BSS_SLACK_NOTIFICATION_CHANNEL = os.getenv('BSS_SLACK_NOTIFICATION_CHANNEL')

# BSS VA
BSS_VA_USER = 'JULOBSS001'
BSS_VA_HASHCODE = 'BSSVAHASHCODE'
BSS_VA_BASE_URL = 'http://117.54.10.50:8081/ibb/rest/virtualAccount/'
BSS_VA_TOKEN = 'BSSVATOKEN'

# Dukcapil
DUKCAPIL_API_KEY = os.getenv('DUKCAPIL_API_KEY')
DUKCAPIL_API_BASE_URL = os.getenv('DUKCAPIL_API_BASE_URL')

# Dukcapil Official
DUKCAPIL_OFFICIAL_USER_ID = os.getenv('DUKCAPIL_OFFICIAL_USER_ID')
DUKCAPIL_OFFICIAL_PASSWORD = os.getenv('DUKCAPIL_OFFICIAL_PASSWORD')
DUKCAPIL_OFFICIAL_API_VERIFY_URL = os.getenv('DUKCAPIL_OFFICIAL_API_VERIFY_URL')
DUKCAPIL_OFFICIAL_API_STORE_URL = os.getenv('DUKCAPIL_OFFICIAL_API_STORE_URL')
DUKCAPIL_OFFICIAL_API_TOKEN = os.getenv('DUKCAPIL_OFFICIAL_API_TOKEN')
DUKCAPIL_OFFICIAL_ORGANIZATION_ID = os.getenv('DUKCAPIL_OFFICIAL_ORGANIZATION_ID')
DUKCAPIL_OFFICIAL_ORGANIZATION_NAME = os.getenv('DUKCAPIL_OFFICIAL_ORGANIZATION_NAME')

# Dukcapil FR
DUKCAPIL_FR_PUBLIC_KEY = os.getenv('DUKCAPIL_FR_PUBLIC_KEY')
DUKCAPIL_FR_HOST = os.getenv('DUKCAPIL_FR_HOST')
DUKCAPIL_FR_CREDENTIAL_ID = os.getenv('DUKCAPIL_FR_CREDENTIAL_ID')
DUKCAPIL_FR_CUSTOMER_ID = os.getenv('DUKCAPIL_FR_CUSTOMER_ID', '00_JULO_TEKNOLOGI_FINANSIAL')
DUKCAPIL_FR_CLIENT_USER = os.getenv('DUKCAPIL_FR_CLIENT_USER')
DUKCAPIL_FR_CLIENT_PASSWORD = os.getenv('DUKCAPIL_FR_CLIENT_PASSWORD')
DUKCAPIL_FR_CLIENT_IP = os.getenv('DUKCAPIL_FR_CLIENT_IP', '10.162.150.165')
DUKCAPIL_FR_ENV = os.getenv('DUKCAPIL_FR_ENV')

# iPrice - Used in ecommerce subapp
IPRICE_BASE_URL = os.getenv('IPRICE_BASE_URL', 'http://iprice.url')
IPRICE_PID = os.getenv('IPRICE_PID', 'iprice-pid')

# JuloShop
JULOSHOP_BASE_URL = os.getenv('JULOSHOP_BASE_URL')

# Google Play Integrity
GOOGLE_PLAY_INTEGRITY_TOKEN_FILE_PATH = os.getenv('GOOGLE_PLAY_INTEGRITY_TOKEN_FILE_PATH')
GOOGLE_PLAY_INTEGRITY_TOKEN = os.getenv('GOOGLE_PLAY_INTEGRITY_TOKEN')

# CSM
CMS_BASE_URL = os.getenv('CMS_BASE_URL')

# Graduation
SLACK_GRADUATION_ALERTS = os.getenv('GRADUATION_ALERTS_CHANNEL', "#graduation_alerts_test")

# Use CKEditor Toolbar Configurator to see the available toolbar.
# https://ckeditor.com/latest/samples/toolbarconfigurator/index.html#advanced
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Styles', 'Format', 'Font', 'FontSize'],
            ['Bold', 'Italic', 'Underline', 'Strike', 'Undo', 'Redo'],
            ['NumberedList', 'BulletedList'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['Source', 'Maximize'],
        ],
        'contentsCss': ['https://fonts.googleapis.com/css?family=Nunito'],
        'font_names': 'Arial/Arial, Helvetica, sans-serif;'
        + 'Nunito;'
        + 'Comic Sans MS/Comic Sans MS, cursive;'
        + 'Courier New/Courier New, Courier, monospace;'
        + 'Georgia/Georgia, serif;'
        + 'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;'
        + 'Tahoma/Tahoma, Geneva, sans-serif;'
        + 'Times New Roman/Times New Roman, Times, serif;'
        + 'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;'
        + 'Calibri/Calibri, Verdana, Geneva, sans-serif;'
        + 'Verdana/Verdana, Geneva, sans-serif',
    },
    'payment_method_instruction': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike', 'Undo', 'Redo'],
            ['NumberedList', 'BulletedList'],
        ],
    },
    'cx_suggested_answers': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike', 'Undo', 'Redo', 'Link', 'Unlink'],
            ['NumberedList', 'BulletedList'],
        ],
    },
}

USER_ACTION_LOG_TOKEN = os.getenv('USER_ACTION_LOG_TOKEN')
XENDIT_AUTODEBET_API_KEY = os.getenv('XENDIT_AUTODEBET_API_KEY')
XENDIT_AUTODEBET_BASE_URL = os.getenv('XENDIT_AUTODEBET_BASE_URL')
XENDIT_AUTODEBET_CALLBACK_TOKEN = os.getenv('XENDIT_AUTODEBET_CALLBACK_TOKEN')

# BCA autodebet
BCA_AUTODEBET_API_KEY = os.getenv('BCA_API_KEY')
BCA_AUTODEBET_API_SECRET_KEY = os.getenv('BCA_API_SECRET_KEY')
BCA_AUTODEBET_CLIENT_ID = os.getenv('BCA_CLIENT_ID')
BCA_AUTODEBET_CLIENT_SECRET = os.getenv('BCA_CLIENT_SECRET')
BCA_AUTODEBET_BASE_URL = os.getenv('BCA_BASE_URL')
BCA_AUTODEBET_WEBVIEW_URL = "https://registrasi.klikbca.com/id/skpr"
BCA_AUTODEBET_V_CORPORATE_ID = "54252210"
BCA_AUTODEBET_CHANNEL_ID = os.getenv('BCA_CHANNEL_ID')
BCA_AUTODEBET_ACCOUNT_NUMBER = "5425350011"
BCA_AUTODEBET_CORPORATE_ID = os.getenv('BCA_CORPORATE_ID')

BCA_FUND_COLLECTION_API_KEY = os.getenv('BCA_API_KEY')
BCA_FUND_COLLECTION_API_SECRET_KEY = os.getenv('BCA_API_SECRET_KEY')
BCA_FUND_COLLECTION_CLIENT_ID = os.getenv('BCA_CLIENT_ID')
BCA_FUND_COLLECTION_CLIENT_SECRET = os.getenv('BCA_CLIENT_SECRET')
BCA_FUND_COLLECTION_BASE_URL = os.getenv('BCA_BASE_URL')
BCA_FUND_COLLECTION_CORPORATE_ID = os.getenv('BCA_CORPORATE_ID')

# for testing purpose only
BCA_FUND_COLLECTION_DEBITED_ACCOUNT = "0613007064"
BCA_FUND_COLLECTION_CREDITED_ACCOUNT = "0611103670"

# Izidata
IZIDATA_APP_ACCESS_KEY = os.getenv('IZIDATA_APP_ACCESS_KEY')
IZIDATA_APP_SECRET_KEY = os.getenv('IZIDATA_APP_SECRET_KEY')
IZIDATA_BASE_URL = os.getenv('IZIDATA_BASE_URL')

USER_ACTION_LOG_TOKEN = os.getenv('USER_ACTION_LOG_TOKEN')
XENDIT_AUTODEBET_API_KEY = os.getenv('XENDIT_AUTODEBET_API_KEY')
XENDIT_AUTODEBET_BASE_URL = os.getenv('XENDIT_AUTODEBET_BASE_URL')

# BSS credit card
BSS_CREDIT_CARD_BASE_URL = os.getenv('BSS_CREDIT_CARD_URL')
BSS_CREDIT_CARD_HASHCODE = os.getenv('BSS_CREDIT_CARD_HASHCODE')
BSS_JULO_CARD_VA_PREFIX = os.getenv('BSS_JULO_CARD_VA_PREFIX')

# koleko
KOLEKO_GOOGLE_CLOUD_STORAGE_CREDENTIAL = os.getenv('KOLEKO_GOOGLE_CLOUD_STORAGE_CREDENTIAL')
KOLEKO_BUCKET = "koleko-data-recon"

# Google Calendar
GOOGLE_CALENDAR_CREDENTIALS_PATH = os.getenv('GOOGLE_CALENDAR_CREDENTIALS_PATH')
GOOGLE_CALENDAR_TOKEN_DIR = os.getenv('GOOGLE_CALENDAR_TOKEN_DIR')
GOOGLE_CALENDAR_TOKEN = os.getenv('GOOGLE_CALENDAR_TOKEN')
GOOGLE_CALENDAR_API_NAME = 'calendar'
GOOGLE_CALENDAR_API_VERSION = 'v3'
GOOGLE_CALENDAR_SCOPES = ['https://www.googleapis.com/auth/calendar']

# BPJS Scrape with Brick
BRICK_CLIENT_ID = os.getenv('BRICK_CLIENT_ID')
BRICK_CLIENT_SECRET = os.getenv('BRICK_CLIENT_SECRET')
BRICK_BASE_URL = os.getenv('BRICK_BASE_URL')
BRICK_SALT = os.getenv('BRICK_SALT')
BRICK_WIDGET_BASE_URL = os.getenv('BRICK_WIDGET_BASE_URL')

# Employee Financing
WEB_FORM_JWT_SECRET_KEY = os.getenv('WEB_FORM_JWT_SECRET_KEY')

# Shopee Scoring
SCORING_CUSTOMER_ID = os.getenv('SCORING_CUSTOMER_ID')
SCORING_APP_ID = os.getenv('SCORING_APP_ID')
SCORING_KEY = os.getenv('SCORING_KEY')
SCORING_URL = os.getenv('SCORING_URL')
SCORING_JULO_PRIVATE_KEY = os.getenv('SCORING_JULO_PRIVATE_KEY')
SCORING_JULO_PUBLIC_KEY = os.getenv('SCORING_JULO_PUBLIC_KEY')
SCORING_PUBLIC_KEY = os.getenv('SCORING_PUBLIC_KEY')

RABBITMQ_EXPORTER_METRIC_URL = os.getenv('RABBITMQ_EXPORTER_METRIC_URL') + '/metrics'
RABBITMQ_VHOST = os.getenv('RABBITMQ_VHOST')

# zendesk
ZENDESK_SECRET_KEY = os.getenv('ZENDESK_SECRET_KEY')
ZENDESK_KEY_ID = os.getenv('ZENDESK_KEY_ID')

# BPJS Direct
BPJS_DIRECT_BASE_URL = os.getenv('BPJS_DIRECT_BASE_URL')
BPJS_DIRECT_SECRET_KEY = os.getenv('BPJS_DIRECT_SECRET_KEY')
BPJS_DIRECT_USERNAME = os.getenv('BPJS_DIRECT_USERNAME')
BPJS_DIRECT_PASSWORD = os.getenv('BPJS_DIRECT_PASSWORD')
BPJS_DIRECT_PREFIX = os.getenv('BPJS_DIRECT_PREFIX')

# For PDAM
PDAM_PRODUCTID = 87

# fdc reactivation
RABBITMQ_EXPORTER_METRIC_URL = os.getenv('RABBITMQ_EXPORTER_METRIC_URL') + '/metrics'
RABBITMQ_VHOST = os.getenv('RABBITMQ_VHOST')

DIGITAL_SIGNATURE = {
    "BUCKET": os.getenv('DIGITAL_SIGNATURE_BUCKET'),
    "IV": os.getenv('DIGITAL_SIGNATURE_IV'),
    "BASE_KEY": os.getenv('DIGITAL_SIGNATURE_BASE_KEY'),
    "OSS_ACCESS_KEY_ID": os.getenv('OSS_DIGITAL_SIGNATURE_ACCESS_KEY_ID'),
    "OSS_ACCESS_KEY_SECRET": os.getenv('OSS_DIGITAL_SIGNATURE_ACCESS_KEY_SECRET'),
}

JULO_CERTIFICATE_AUTHORITY = {
    "PRIVATE_KEY": os.getenv("JULO_CA_PRIVATE_KEY"),
    "PASSPHRASE": os.getenv("JULO_CA_PASSPHRASE"),
    "CERTIFICATE": os.getenv("JULO_CA_CERTIFICATE"),
}

# DANA Consume API
DANA_SIGNATURE_KEY = os.getenv('DANA_SIGNATURE_KEY')
DANA_SIGNATURE_PRIVATE_KEY = os.getenv('DANA_SIGNATURE_PRIVATE_KEY')
JULO_PEM_PUBLIC_KEY = os.getenv('JULO_PEM_PUBLIC_KEY')
JULO_PEM_PRIVATE_KEY = os.getenv('JULO_PEM_PRIVATE_KEY')
DANA_PEM_PRIVATE_KEY = os.getenv('DANA_PEM_PRIVATE_KEY')
DANA_PEM_PUBLIC_KEY = os.getenv('DANA_PEM_PUBLIC_KEY')
DANA_SALT = os.getenv('DANA_SALT')
DANA_NAME_BANK_VALIDATION_ID = os.getenv('DANA_NAME_BANK_VALIDATION_ID')
DANA_API_BASE_URL = os.getenv('DANA_API_BASE_URL')

# DANA Request API
DANA_X_SIGNATURE_PUBLIC_KEY_REQUEST = os.getenv('DANA_X_SIGNATURE_PUBLIC_KEY_REQUEST')
DANA_X_SIGNATURE_PRIVATE_KEY_REQUEST = os.getenv('DANA_X_SIGNATURE_PRIVATE_KEY_REQUEST')

# Partnership JWT Key
PARTNERSHIP_JWT_SECRET_KEY = os.getenv('PARTNERSHIP_JWT_SECRET_KEY')
PARTNERSHIP_HASH_ID_SALT = os.getenv('PARTNERSHIP_HASH_ID_SALT')
MERCHANT_FINANCING_JWT_SECRET_KEY = os.getenv('MERCHANT_FINANCING_JWT_SECRET_KEY')
MERCHANT_FINANCING_HASH_ID_SALT = os.getenv('MERCHANT_FINANCING_HASH_ID_SALT')

# Partnership Liveness key
PARTNERSHIP_LIVENESS_ENCRYPTION_KEY = os.getenv('PARTNERSHIP_LIVENESS_ENCRYPTION_KEY')

# JULOSHOP ACCOUNT DETAILS
JULOSHOP_BANK_ACCOUNT_NUMBER = "5425350037"
JULOSHOP_BANK_NAME = "BCA"
JULOSHOP_ACCOUNT_NAME = " PT. Julo Teknologi Finansial"

# General Channeling
AR_SWITCHING_FAILED_SLACK_NOTIFICATION_CHANNEL = os.getenv(
    'AR_SWITCHING_FAILED_SLACK_NOTIFICATION_CHANNEL'
)
SYNC_FAILED_SLACK_NOTIFICATION_CHANNEL = os.getenv('SYNC_FAILED_SLACK_NOTIFICATION_CHANNEL')
SYNC_COMPLETE_SLACK_NOTIFICATION_CHANNEL = os.getenv('SYNC_COMPLETE_SLACK_NOTIFICATION_CHANNEL')
LOAN_WRITE_OFF_FAILED_SLACK_NOTIFICATION_CHANNEL = os.getenv(
    'LOAN_WRITE_OFF_FAILED_SLACK_NOTIFICATION_CHANNEL'
)
NOTIFY_WHEN_LOAN_CANCEL_SLACK_NOTIFICATION_CHANNEL = '#temp-loan-channeling-test'

# FAMA Channeling
FAMA_SFTP_HOST = os.getenv('FAMA_SFTP_HOST')
FAMA_SFTP_USERNAME = os.getenv('FAMA_SFTP_USERNAME')
FAMA_SFTP_PORT = os.getenv('FAMA_SFTP_PORT')
FAMA_SFTP_RSA_PRIVATE_KEY = os.getenv('FAMA_SFTP_RSA_PRIVATE_KEY')
FAMA_SFTP_REMOTE_DIRECTORY = os.getenv('FAMA_SFTP_REMOTE_DIRECTORY')
FAMA_GPG_ENCRYPT_RECIPIENT = os.getenv('FAMA_GPG_ENCRYPT_RECIPIENT')
FAMA_GPG_ENCRYPT_KEY_DATA = os.getenv('FAMA_GPG_ENCRYPT_KEY_DATA')
FAMA_GPG_DECRYPT_RECIPIENT = os.getenv('FAMA_GPG_DECRYPT_RECIPIENT')
FAMA_GPG_DECRYPT_KEY_DATA = os.getenv('FAMA_GPG_DECRYPT_KEY_DATA')
FAMA_GPG_DECRYPT_PASSPHRASE = os.getenv('FAMA_GPG_DECRYPT_PASSPHRASE')
FAMA_SLACK_NOTIFICATION_CHANNEL = os.getenv('FAMA_SLACK_NOTIFICATION_CHANNEL')

# SMF Channeling
SMF_SLACK_NOTIFICATION_CHANNEL = os.getenv('SMF_SLACK_NOTIFICATION_CHANNEL')

# Permata Channeling
PERMATA_SFTP_HOST = os.getenv('PERMATA_SFTP_HOST')
PERMATA_SFTP_USERNAME = os.getenv('PERMATA_SFTP_USERNAME')
PERMATA_SFTP_PORT = os.getenv('PERMATA_SFTP_PORT')
PERMATA_SFTP_PASSWORD = os.getenv('PERMATA_SFTP_PASSWORD')
PERMATA_SFTP_UPLOAD_DIRECTORY = "Outbox"
PERMATA_GPG_ENCRYPT_RECIPIENT = os.getenv('PERMATA_GPG_ENCRYPT_RECIPIENT')
PERMATA_GPG_ENCRYPT_KEY_DATA = os.getenv('PERMATA_GPG_ENCRYPT_KEY_DATA')
PERMATA_GPG_DECRYPT_RECIPIENT = os.getenv('PERMATA_GPG_DECRYPT_RECIPIENT')
PERMATA_GPG_DECRYPT_KEY_DATA = os.getenv('PERMATA_GPG_DECRYPT_KEY_DATA')
PERMATA_GPG_DECRYPT_PASSPHRASE = os.getenv('PERMATA_GPG_DECRYPT_PASSPHRASE')

# BNI Channeling
BNI_SFTP_HOST = os.getenv('BNI_SFTP_HOST')
BNI_SFTP_USERNAME = os.getenv('BNI_SFTP_USERNAME')
BNI_SFTP_PORT = os.getenv('BNI_SFTP_PORT')
BNI_SFTP_PASSWORD = os.getenv('BNI_SFTP_PASSWORD')

# SEON Fraud Score
SEON_API_BASE_URL = os.getenv('SEON_API_BASE_URL')
SEON_API_LICENSE_KEY = os.getenv('SEON_API_LICENSE_KEY')

# Trust Decision
TRUST_DECISION_PARTNER_CODE = os.getenv('TRUST_DECISION_PARTNER_CODE')
TRUST_DECISION_PARTNER_KEY = os.getenv('TRUST_DECISION_PARTNER_KEY')
TRUST_DECISION_HOST_URL = os.getenv('TRUST_DECISION_HOST_URL')
FINSCORE_HOST_URL = os.getenv('FINSCORE_HOST_URL')

# Digital signature
DIGITAL_SIGNATURE_BUCKET = os.getenv('DIGITAL_SIGNATURE_BUCKET')
DIGITAL_SIGNATURE_IV = os.getenv('DIGITAL_SIGNATURE_IV')
DIGITAL_SIGNATURE_BASE_KEY = os.getenv('DIGITAL_SIGNATURE_BASE_KEY')

# Monnai (Fraud Score)
MONNAI_AUTH_BASE_URL = os.getenv('MONNAI_AUTH_BASE_URL')
MONNAI_INSIGHT_BASE_URL = os.getenv('MONNAI_INSIGHT_BASE_URL')
MONNAI_CLIENT_ID = os.getenv('MONNAI_CLIENT_ID')
MONNAI_CLIENT_SECRET = os.getenv('MONNAI_CLIENT_SECRET')

# Ai Rudder PDS
AI_RUDDER_PDS_JULO_TOKEN = os.getenv('AI_RUDDER_PDS_JULO_TOKEN')
BALANCE_CONS_SUBMIT_FORM_SECRET_KEY = os.getenv('BALANCE_CONS_SUBMIT_FORM_SECRET_KEY')

# AI Rudder PDS
AI_RUDDER_PDS_BASE_URL = os.getenv('AI_RUDDER_PDS_BASE_URL')
AI_RUDDER_PDS_APP_KEY = os.getenv('AI_RUDDER_PDS_APP_KEY')
AI_RUDDER_PDS_APP_SECRET = os.getenv('AI_RUDDER_PDS_APP_SECRET')

# Google Drive
GOOGLE_DRIVE_CREDENTIALS_PATH = os.getenv('GOOGLE_CALENDAR_CREDENTIALS_PATH')
GOOGLE_DRIVE_TOKEN = os.getenv('GOOGLE_DRIVE_TOKEN')
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_DRIVE_TOKEN')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

# Google Auth
GOOGLE_AUTH_CLIENT_ID = os.getenv('GOOGLE_AUTH_CLIENT_ID')
GOOGLE_AUTH_CLIENT_ID_IOS = os.getenv('GOOGLE_AUTH_CLIENT_ID_IOS')

# IDfy Credentials
IDFY_CONFIG_ID = os.getenv('IDFY_CONFIG_ID')
IDFY_API_KEY = os.getenv('IDFY_API_KEY')
IDFY_BASE_URL = os.getenv('IDFY_BASE_URL')
AUTODEBET_IDFY_API_KEY = os.getenv('AUTODEBET_IDFY_API_KEY')
AUTODEBET_IDFY_BASE_URL = os.getenv('AUTODEBET_IDFY_BASE_URL')

# Metabase Credentials
METABASE_BASE_URL = os.getenv('METABASE_BASE_URL')
METABASE_API_USER = os.getenv('METABASE_API_USER')
METABASE_API_PASSWORD = os.getenv('METABASE_API_PASSWORD')

# Ayoconnect
AYOCONNECT_CLIENT_ID = os.getenv('AYOCONNECT_CLIENT_ID')
AYOCONNECT_CLIENT_SECRET = os.getenv('AYOCONNECT_CLIENT_SECRET')
AYOCONNECT_BASE_URL = os.getenv('AYOCONNECT_BASE_URL')
AYOCONNECT_MERCHANT_CODE = "JULOTF"
AYOCONNECT_LATITUDE = os.getenv('AYOCONNECT_LATITUDE')  # AS45102 Alibaba (US) Latitude
AYOCONNECT_LONGITUDE = os.getenv('AYOCONNECT_LONGITUDE')  # AS45102 Alibaba (US) Longitude
AYOCONNECT_IP_ADDRESS = os.getenv('AYOCONNECT_IP_ADDRESS')  # Sserver IP Address

# Payment Gateway vendor
PAYMENT_GATEWAY_VENDOR_SALT = os.getenv('PAYMENT_GATEWAY_VENDOR_SALT')

# Send SMS after robocall
SMS_API_KEY = os.getenv('SMS_API_KEY')
SMS_API_SECRET = os.getenv('SMS_API_SECRET')
SMS_API_BASE_URL = os.getenv('SMS_BASE_URL')

# Easy Income
MISSION_WEB_URL = os.getenv("MISSION_WEB_URL")
EASY_INCOME_AUTH_SECRET_KEY = os.getenv("EASY_INCOME_AUTH_SECRET_KEY")
DEFAULT_TOKEN_EXPIRE_AFTER_HOURS = os.getenv("DEFAULT_TOKEN_EXPIRE_AFTER_HOURS")

# JULO Cares
JULO_CARE_BASE_URL = os.getenv('JULO_CARE_BASE_URL')

# growthbook
GROWTHBOOK_API_HOST = os.getenv('GROWTHBOOK_API_HOST')
GROWTHBOOK_CLIENT_KEY = os.getenv('GROWTHBOOK_CLIENT_KEY')

# Dana wallet payment method
DANA_LINKING_API_BASE_URL = os.getenv('DANA_LINKING_API_BASE_URL')
DANA_LINKING_WEB_BASE_URL = os.getenv('DANA_LINKING_WEB_BASE_URL')
DANA_LINKING_MERCHANT_ID = os.getenv('DANA_LINKING_MERCHANT_ID')
DANA_LINKING_CLIENT_ID = os.getenv('DANA_LINKING_CLIENT_ID')
DANA_LINKING_CLIENT_SECRET = os.getenv('DANA_LINKING_CLIENT_SECRET')
DANA_LINKING_CHANNEL_ID = os.getenv('DANA_LINKING_CHANNEL_ID')
DANA_LINKING_PUBLIC_KEY = os.getenv('DANA_LINKING_PUBLIC_KEY')
DANA_LINKING_PRIVATE_KEY = os.getenv('DANA_LINKING_PRIVATE_KEY')

# Tokoscore
TOKOSCORE_BASE_URL = os.getenv('TOKOSCORE_BASE_URL')
TOKOSCORE_PUBLIC_KEY = os.getenv('TOKOSCORE_PUBLIC_KEY')
TOKOSCORE_PRIVATE_KEY = os.getenv('TOKOSCORE_PRIVATE_KEY')
TOKOSCORE_CLIENT_ID = os.getenv('TOKOSCORE_CLIENT_ID')
TOKOSCORE_CLIENT_SECRET = os.getenv('TOKOSCORE_CLIENT_SECRET')

# Dana Biller
DANA_BILLER_PUBLIC_KEY = os.getenv('DANA_BILLER_PUBLIC_KEY')
DANA_BILLER_PRIVATE_KEY = os.getenv('DANA_BILLER_PRIVATE_KEY')

# Autodebet Mandiri
AUTODEBET_MANDIRI_BASE_URL = 'https://api.yokke.bankmandiri.co.id'
AUTODEBET_MANDIRI_CLIENT_ID = 'JULO'
AUTODEBET_MANDIRI_CHANNEL_ID = '09'
AUTODEBET_MANDIRI_CLIENT_KEY = os.getenv('AUTODEBET_MANDIRI_CLIENT_KEY')
AUTODEBET_MANDIRI_CLIENT_SECRET = os.getenv('AUTODEBET_MANDIRI_CLIENT_SECRET')
AUTODEBET_MANDIRI_MERCHANT_ID = os.getenv('AUTODEBET_MANDIRI_MERCHANT_ID')
AUTODEBET_MANDIRI_TERMINAL_ID = os.getenv('AUTODEBET_MANDIRI_TERMINAL_ID')
AUTODEBET_MANDIRI_PRIVATE_KEY = os.getenv('AUTODEBET_MANDIRI_PRIVATE_KEY')
AUTODEBET_MANDIRI_PUBLIC_KEY_LANDING_PAGE = os.getenv('AUTODEBET_MANDIRI_PUBLIC_KEY_LANDING_PAGE')
AUTODEBET_MANDIRI_CARD_ENCRYPTION_KEY = os.getenv('AUTODEBET_MANDIRI_CARD_ENCRYPTION_KEY')
AUTODEBET_MANDIRI_PUBLIC_KEY = os.getenv('AUTODEBET_MANDIRI_PUBLIC_KEY')

# VAULT service variables
PII_VAULT_BASE_URL = os.getenv("PII_VAULT_BASE_URL")
PII_VAULT_JULOVER_TOKEN = os.getenv("PII_VAULT_JULOVER_TOKEN")
PII_VAULT_ONBOARDING_TOKEN = os.getenv("PII_VAULT_ONBOARDING_TOKEN")
PII_VAULT_COLLECTION_TOKEN = os.getenv("PII_VAULT_COLLECTION_TOKEN")
PII_VAULT_PARTNERSHIP_ONBOARDING_TOKEN = os.getenv("PII_VAULT_PARTNERSHIP_ONBOARDING_TOKEN")
PII_VAULT_REPAYMENT_TOKEN = os.getenv("PII_VAULT_REPAYMENT_TOKEN")
PII_VAULT_ANTIFRAUD_TOKEN = os.getenv("PII_VAULT_ANTIFRAUD_TOKEN")
PII_VAULT_CUSTOMER_EXCELLENCE_TOKEN = os.getenv("PII_VAULT_CUSTOMER_EXCELLENCE_TOKEN")
PII_VAULT_UTILIZATION_TOKEN = os.getenv("PII_VAULT_UTILIZATION_TOKEN")
PII_VAULT_LOAN_TOKEN = os.getenv("PII_VAULT_LOAN_TOKEN")
PII_VAULT_PLATFORM_TOKEN = os.getenv("PII_VAULT_PLATFORM_TOKEN")

# Julo Whatsapp-Service
JULO_WHATSAPP_API_KEY = os.getenv('JULO_WHATSAPP_API_KEY')
JULO_WHATSAPP_API_SECRET = os.getenv('JULO_WHATSAPP_API_SECRET')
JULO_WHATSAPP_BASE_URL = os.getenv('JULO_WHATSAPP_BASE_URL')

# OTPLess
JULO_OTPLESS_CLIENT_ID = os.getenv('JULO_OTPLESS_CLIENT_ID')
JULO_OTPLESS_CLIENT_SECRET = os.getenv('JULO_OTPLESS_CLIENT_SECRET')
JULO_OTPLESS_BASE_URL = os.getenv('JULO_OTPLESS_BASE_URL')

# VAULT service variables
CLIK_ENDPOINT = os.getenv("CLIK_ENDPOINT")

# CX External Party
CX_FERNET_SECRET_KEY = os.getenv('CX_FERNET_SECRET_KEY')

# Bureau
BUREAU_USERNAME = os.getenv('BUREAU_USERNAME')
BUREAU_PASSWORD = os.getenv('BUREAU_PASSWORD')
BUREAU_SUPPLIER_URL = os.getenv('BUREAU_SUPPLIER_URL')
BUREAU_SERVICE_URL = os.getenv('BUREAU_SERVICE_URL')

# Account Deletion Request - Adjust Time Limit
ADJUST_AUTO_APPROVE_DATE_RELEASE = os.getenv('ADJUST_AUTO_APPROVE_DATE_RELEASE')

# OCR service
OCR_URL = os.getenv("OCR_URL")

# Rating Service
RATING_SERVICE_HOST = os.getenv('RATING_SERVICE_HOST')

# Autodebet BNI
AUTODEBET_BNI_BASE_URL = os.getenv('AUTODEBET_BNI_BASE_URL')
AUTODEBET_BNI_CLIENT_ID = os.getenv('AUTODEBET_BNI_CLIENT_ID')
AUTODEBET_BNI_CLIENT_SECRET = os.getenv('AUTODEBET_BNI_CLIENT_SECRET')
AUTODEBET_BNI_MERCHANT_CODE = os.getenv('AUTODEBET_BNI_MERCHANT_CODE')
AUTODEBET_BNI_PRIVATE_KEY = os.getenv('AUTODEBET_BNI_PRIVATE_KEY')
AUTODEBET_BNI_CHANNEL_ID = os.getenv('AUTODEBET_BNI_CHANNEL_ID')
AUTODEBET_BNI_AYO_CONNECT_CLIENT_ID = os.getenv('AUTODEBET_BNI_AYO_CONNECT_CLIENT_ID')
AUTODEBET_BNI_AYO_CONNECT_CLIENT_SECRET = os.getenv('AUTODEBET_BNI_AYO_CONNECT_CLIENT_SECRET')

# JUICY SCORE
JUICY_SCORE_BASE_URL = os.getenv('JUICY_SCORE_BASE_URL')
JUICY_SCORE_GET_SCORE_TOKEN = os.getenv('JUICY_SCORE_GET_SCORE_TOKEN')
JUICY_SCORE_ACCOUNT_ID = os.getenv('JUICY_SCORE_ACCOUNT_ID')

# TSI Telco Score
TS_TELCO_SCORING = {
    "TELKOMSEL": {
        "PRIVATE_KEY": os.getenv("TS_TELCO_SCORING_TELKOMSEL_PRIVATE_KEY"),
        "PUBLIC_KEY": os.getenv("TS_TELCO_SCORING_TELKOMSEL_PUBLIC_KEY"),
        "BASE_URL": os.getenv("TS_TELCO_SCORING_TELKOMSEL_BASE_URL"),
        "USERNAME": os.getenv("TS_TELCO_SCORING_TELKOMSEL_USERNAME"),
        "PASSWORD": os.getenv("TS_TELCO_SCORING_TELKOMSEL_PASSWORD"),
        "CLIENT_CODE": os.getenv("TS_TELCO_SCORING_TELKOMSEL_CLIENT_CODE"),
    },
    "INDOSAT": {
        "PRIVATE_KEY": os.getenv("TS_TELCO_SCORING_INDOSAT_PRIVATE_KEY"),
        "PUBLIC_KEY": os.getenv("TS_TELCO_SCORING_INDOSAT_PUBLIC_KEY"),
        "BASE_URL": os.getenv("TS_TELCO_SCORING_INDOSAT_BASE_URL"),
        "USERNAME": os.getenv("TS_TELCO_SCORING_INDOSAT_USERNAME"),
        "PASSWORD": os.getenv("TS_TELCO_SCORING_INDOSAT_PASSWORD"),
        "CLIENT_CODE": os.getenv("TS_TELCO_SCORING_INDOSAT_CLIENT_CODE"),
    },
    "XL": {
        "PRIVATE_KEY": os.getenv("TS_TELCO_SCORING_XL_PRIVATE_KEY"),
        "PUBLIC_KEY": os.getenv("TS_TELCO_SCORING_XL_PUBLIC_KEY"),
        "BASE_URL": os.getenv("TS_TELCO_SCORING_XL_BASE_URL"),
        "USERNAME": os.getenv("TS_TELCO_SCORING_XL_USERNAME"),
        "PASSWORD": os.getenv("TS_TELCO_SCORING_XL_PASSWORD"),
        "CLIENT_CODE": os.getenv("TS_TELCO_SCORING_XL_CLIENT_CODE"),
    },
}

# Credgenics
CREDGENICS_BASE_URL = os.getenv('CREDGENICS_BASE_URL')
CREDGENICS_AUTH_TOKEN = os.getenv('CREDGENICS_AUTH_TOKEN')
CREDGENICS_COMPANY_ID = os.getenv('CREDGENICS_COMPANY_ID')
CREDGENICS_AWS_ACCESS_KEY_ID = os.getenv('CREDGENICS_AWS_ACCESS_KEY_ID')
CREDGENICS_AWS_SECRET_ACCESS_KEY = os.getenv('CREDGENICS_AWS_SECRET_ACCESS_KEY')
CREDGENICS_AWS_REGION_NAME = os.getenv('CREDGENICS_AWS_REGION_NAME')
CREDGENICS_AWS_BUCKET_NAME = os.getenv('CREDGENICS_AWS_BUCKET_NAME')
CREDGENICS_AWS_BUCKET_PATH = os.getenv('CREDGENICS_AWS_BUCKET_PATH')

# CIMB VA
CIMB_SNAP_PUBLIC_KEY_INBOUND = os.getenv('CIMB_SNAP_PUBLIC_KEY_INBOUND')
CIMB_SNAP_CLIENT_ID_INBOUND = os.getenv('CIMB_SNAP_CLIENT_ID_INBOUND')
CIMB_SNAP_CLIENT_SECRET_INBOUND = os.getenv('CIMB_SNAP_CLIENT_SECRET_INBOUND')

# Collection Serverless
COLLECTION_SERVERLESS_BASE_URL = os.getenv('COLLECTION_SERVERLESS_BASE_URL')
COLLECTION_SERVERLESS_TOKEN = os.getenv('COLLECTION_SERVERLESS_TOKEN')

CIMB_SNAP_CLIENT_KEY = os.getenv('CIMB_SNAP_CLIENT_KEY')
CIMB_SNAP_CLIENT_SECRET = os.getenv('CIMB_SNAP_CLIENT_SECRET')
CIMB_SNAP_PRIVATE_KEY = os.getenv('CIMB_SNAP_PRIVATE_KEY')
CIMB_SNAP_BASE_URL = os.getenv('CIMB_SNAP_BASE_URL')

# Partnership SMS Client
PARTNERSHIP_SMS_API_KEY = os.getenv('PARTNERSHIP_SMS_API_KEY')
PARTNERSHIP_SMS_API_SECRET = os.getenv('PARTNERSHIP_SMS_API_SECRET')
PARTNERSHIP_SMS_API_BASE_URL = os.getenv('PARTNERSHIP_SMS_API_BASE_URL')

# Smartphone financing
JULO_LITE_BASE_URL = os.getenv('JULO_LITE_BASE_URL')
J_FINANCING_SECRET_KEY_TOKEN = os.getenv('J_FINANCING_SECRET_KEY_TOKEN')

# Anti Fraud Service
ANTI_FRAUD_BASE_URL = os.getenv('ANTI_FRAUD_BASE_URL')

OMNICHANNEL_BASE_URL = os.getenv('OMNICHANNEL_BASE_URL')
OMNICHANNEL_TOKEN = os.getenv('OMNICHANNEL_TOKEN')

# Engineer Googleads
ENGINEER_GOOGLE_DRIVE_CREDENTIALS_PATH = os.getenv('ENGINEER_GOOGLE_DRIVE_CREDENTIALS_PATH')
ENGINEER_GOOGLE_DRIVE_TOKEN = os.getenv('ENGINEER_GOOGLE_DRIVE_TOKEN')
ENGINEER_GOOGLE_CLIENT_ID = os.getenv('ENGINEER_GOOGLE_CLIENT_ID')
ENGINEER_GOOGLE_CLIENT_SECRET = os.getenv('ENGINEER_GOOGLE_CLIENT_SECRET')

# Field Collection Service
FIELDCOLL_BASE_URL = os.getenv('FIELDCOLL_BASE_URL')
FIELDCOLL_TOKEN = os.getenv('FIELDCOLL_TOKEN')

# DOKU SNAP
DOKU_SNAP_PUBLIC_KEY_INBOUND = os.getenv('DOKU_SNAP_PUBLIC_KEY_INBOUND')
DOKU_SNAP_CLIENT_ID_INBOUND = os.getenv('DOKU_SNAP_CLIENT_ID_INBOUND')
DOKU_SNAP_CLIENT_SECRET_INBOUND = os.getenv('DOKU_SNAP_CLIENT_SECRET_INBOUND')

# SalesOps TNC Base URL
SALES_OPS_TNC_BASE_URL = os.getenv('SALES_OPS_TNC_BASE_URL')

# FASPAY SNAP OUTBOUND
FASPAY_SNAP_OUTBOUND_BASE_URL = os.getenv('FASPAY_SNAP_OUTBOUND_BASE_URL')
FASPAY_SNAP_OUTBOUND_CHANNEL_ID = '77001'
FASPAY_SNAP_OUTBOUND_PRIVATE_KEY = os.getenv('FASPAY_SNAP_OUTBOUND_PRIVATE_KEY')
FASPAY_SNAP_OUTBOUND_MERCHANT_ID = '31932'
FASPAY_SNAP_OUTBOUND_MERCHANT_ID_BNI_V2 = '31932'
FASPAY_SNAP_OUTBOUND_MERCHANT_ID_ALAFMART = '31932'
FASPAY_SNAP_OUTBOUND_MERCHANT_ID_INDOMARET = '31932'
FASPAY_SNAP_OUTBOUND_MERCHANT_ID_PERMATA = '31932'

# DOKU SNAP
DOKU_SNAP_BASE_URL_OUTBOND = os.getenv('DOKU_SNAP_BASE_URL_OUTBOND')
DOKU_SNAP_CLIENT_ID_OUTBOND = os.getenv('DOKU_SNAP_CLIENT_ID_OUTBOND')
DOKU_SNAP_CLIENT_SECRET_OUTBOND = os.getenv('DOKU_SNAP_CLIENT_SECRET_OUTBOND')
DOKU_SNAP_PRIVATE_KEY_OUTBOND = os.getenv('DOKU_SNAP_PRIVATE_KEY_OUTBOND')

# ONEKLIK BCA
ONEKLIK_BCA_BASE_URL = os.getenv('ONEKLIK_BCA_BASE_URL')
ONEKLIK_BCA_CLIENT_ID = os.getenv('ONEKLIK_BCA_CLIENT_ID')
ONEKLIK_BCA_CLIENT_SECRET = os.getenv('ONEKLIK_BCA_CLIENT_SECRET')
ONEKLIK_BCA_PRIVATE_KEY = os.getenv('ONEKLIK_BCA_PRIVATE_KEY')
ONEKLIK_BCA_WEBVIEW_BASE_URL = os.getenv('ONEKLIK_BCA_WEBVIEW_BASE_URL')
ONEKLIK_BCA_CLIENT_ID_OUTBOUND = os.getenv('ONEKLIK_BCA_CLIENT_ID_OUTBOUND')
ONEKLIK_BCA_CLIENT_SECRET_OUTBOUND = os.getenv('ONEKLIK_BCA_CLIENT_SECRET_OUTBOUND')
ONEKLIK_PUBLIC_KEY_OUTBOUND = os.getenv('ONEKLIK_BCA_PUBLIC_KEY_OUTBOUND')
ONEKLIK_BCA_CHANNEL_ID_OUTBOUND = os.getenv('ONEKLIK_BCA_CHANNEL_ID_OUTBOUND')
ONEKLIK_BCA_PARTNER_ID_OUTBOUND = os.getenv('ONEKLIK_BCA_PARTNER_ID_OUTBOUND')

# PARTNERSHIP GOOGLE DRIVE
PARTNERSHIP_GOOGLE_DRIVE_CREDENTIALS_PATH = os.getenv('PARTNERSHIP_GOOGLE_DRIVE_CREDENTIALS_PATH')
PARTNERSHIP_GOOGLE_DRIVE_TOKEN = os.getenv('PARTNERSHIP_GOOGLE_DRIVE_TOKEN')
PARTNERSHIP_GOOGLE_CLIENT_ID = os.getenv('PARTNERSHIP_GOOGLE_CLIENT_ID')
PARTNERSHIP_GOOGLE_CLIENT_SECRET = os.getenv('PARTNERSHIP_GOOGLE_CLIENT_SECRET')

# GRAB SERVICE
GRAB_SERVICE_BASE_URL = os.getenv('GRAB_SERVICE_BASE_URL')

# MVP Sync J360 to User Service
JULO_SYNC_REGISTRATION_KEY = os.getenv('JULO_SYNC_REGISTRATION_KEY')

# COLLECTION GOOGLE DRIVE
COLLECTION_GOOGLE_DRIVE_CREDENTIALS_PATH = os.getenv('COLLECTION_GOOGLE_DRIVE_CREDENTIALS_PATH')
COLLECTION_GOOGLE_DRIVE_TOKEN = os.getenv('COLLECTION_GOOGLE_DRIVE_TOKEN')
COLLECTION_GOOGLE_CLIENT_ID = os.getenv('COLLECTION_GOOGLE_CLIENT_ID')
COLLECTION_GOOGLE_CLIENT_SECRET = os.getenv('COLLECTION_GOOGLE_CLIENT_SECRET')

# DIGISIGN
NEW_DIGISIGN_BASE_URL = os.getenv('NEW_DIGISIGN_BASE_URL')
NEW_DIGISIGN_TOKEN = os.getenv('NEW_DIGISIGN_TOKEN')

# PARTNERSHIP DIGISIGN
PARTNERSHIP_AXIATA_DIGISIGN_TOKEN = os.getenv('PARTNERSHIP_AXIATA_DIGISIGN_TOKEN')
PARTNERSHIP_LEADGEN_STANDARD_PRODUCT_DIGISIGN_TOKEN = os.getenv(
    'PARTNERSHIP_LEADGEN_STANDARD_PRODUCT_DIGISIGN_TOKEN'
)

# NSQ
NSQD_HTTP_URL = os.getenv('NSQD_HTTP_URL')
NSQD_HTTP_PORT = os.getenv('NSQD_HTTP_PORT')
NSQ_ENVIRONMENT = os.getenv('NSQ_ENVIRONMENT')

# Email Service Integration
EMAIL_SERVICE_BASE_URL = os.getenv('EMAIL_SERVICE_BASE_URL', 'http://localhost:7000')
EMAIL_SERVICE_API_ID = os.getenv('EMAIL_SERVICE_API_ID', 'no-id')
EMAIL_SERVICE_API_KEY = os.getenv('EMAIL_SERVICE_API_KEY', 'no-key')

# Partnership Google vision credentials
PARTNERSHIP_GOOGLE_VISION_PROJECT_ID = os.getenv('PARTNERSHIP_GOOGLE_VISION_PROJECT_ID')
PARTNERSHIP_GOOGLE_VISION_PRIVATE_KEY_ID = os.getenv('PARTNERSHIP_GOOGLE_VISION_PRIVATE_KEY_ID')
PARTNERSHIP_GOOGLE_VISION_PRIVATE_ID = os.getenv('PARTNERSHIP_GOOGLE_VISION_PRIVATE_ID')
PARTNERSHIP_GOOGLE_VISION_CLIENT_EMAIL = os.getenv('PARTNERSHIP_GOOGLE_VISION_CLIENT_EMAIL')
PARTNERSHIP_GOOGLE_VISION_CLIENT_ID = os.getenv('PARTNERSHIP_GOOGLE_VISION_CLIENT_ID')
PARTNERSHIP_GOOGLE_VISION_AUTH_URI = os.getenv('PARTNERSHIP_GOOGLE_VISION_AUTH_URI')
PARTNERSHIP_GOOGLE_VISION_TOKEN_URI = os.getenv('PARTNERSHIP_GOOGLE_VISION_TOKEN_URI')
PARTNERSHIP_GOOGLE_VISION_AUTH_PROVIDER = os.getenv('PARTNERSHIP_GOOGLE_VISION_AUTH_PROVIDER')
PARTNERSHIP_GOOGLE_VISION_CLIENT_X509_CERT_URL = os.getenv(
    'PARTNERSHIP_GOOGLE_VISION_CLIENT_X509_CERT_URL'
)
PARTNERSHIP_GOOGLE_VISION_UNIVERSE_DOMAIN = os.getenv('PARTNERSHIP_GOOGLE_VISION_UNIVERSE_DOMAIN')

# DOKU GATEWAY
DOKU_PG_BASE_URL_OUTBOUND = os.getenv('DOKU_PG_BASE_URL_OUTBOUND')
DOKU_PG_CLIENT_ID_OUTBOUND = os.getenv('DOKU_PG_CLIENT_ID_OUTBOUND')
DOKU_PG_PRIVATE_KEY_OUTBOUND = os.getenv('DOKU_PG_PRIVATE_KEY_OUTBOUND')
DOKU_PG_CLIENT_SECRET_OUTBOUND = os.getenv('DOKU_PG_CLIENT_SECRET_OUTBOUND')
PG_API_SECRET_KEY = os.getenv('PG_API_SECRET_KEY')
PG_LOAN_CLIENT_ID = os.getenv('PG_LOAN_CLIENT_ID')
PG_LOAN_API_KEY = os.getenv('PG_LOAN_API_KEY')
PAYMENT_GATEWAY_BASE_URL = os.getenv('PAYMENT_GATEWAY_BASE_URL')
PAYMENT_GATEWAY_CLIENT_SECRET = os.getenv('PAYMENT_GATEWAY_CLIENT_SECRET')
PG_GRAB_CLIENT_ID = os.getenv('PG_GRAB_CLIENT_ID')
PG_GRAB_API_KEY = os.getenv('PG_GRAB_API_KEY')

# Sales Ops AIRudder PDS
SALES_OPS_AIRUDDER_PDS_BASE_URL = os.getenv('SALES_OPS_AIRUDDER_PDS_BASE_URL')
SALES_OPS_AIRUDDER_PDS_APP_KEY = os.getenv('SALES_OPS_AIRUDDER_PDS_APP_KEY')
SALES_OPS_AIRUDDER_PDS_APP_SECRET = os.getenv('SALES_OPS_AIRUDDER_PDS_APP_SECRET')

# Partnership Payment Gateway
PARTNERSHIP_PAYMENT_GATEWAY_CLIENT_ID = os.getenv('PARTNERSHIP_PAYMENT_GATEWAY_CLIENT_ID')
PARTNERSHIP_PAYMENT_GATEWAY_API_KEY = os.getenv('PARTNERSHIP_PAYMENT_GATEWAY_API_KEY')

# Onboarding Payment Gateway
ONBOARDING_PG_CLIENT_ID = os.getenv('ONBOARDING_PG_CLIENT_ID')
ONBOARDING_PG_API_KEY = os.getenv('ONBOARDING_PG_API_KEY')

# Oona encrypted passphrase
OONA_ENCRYPTED_PASSPHRASE = os.getenv('OONA_ENCRYPTED_PASSPHRASE')

# Kangtau
KANGTAU_BASE_URL = os.getenv('KANGTAU_BASE_URL')
KANGTAU_API_INTEGRATION_TOKEN = os.getenv('KANGTAU_API_INTEGRATION_TOKEN')
KANGTAU_COMPANY_ID = os.getenv('KANGTAU_COMPANY_ID')
KANGTAU_PROJECT_ID = os.getenv('KANGTAU_PROJECT_ID')
KANGTAU_USER_EMAIL = os.getenv('KANGTAU_USER_EMAIL')
KANGTAU_USER_PASSWORD = os.getenv('KANGTAU_USER_PASSWORD')

# SMF Channeling API
SMF_CHANNELING_API_BASE_URL = os.getenv('SMF_CHANNELING_API_BASE_URL')
SMF_CHANNELING_API_URL_PREFIX = os.getenv('SMF_CHANNELING_API_URL_PREFIX')
SMF_CHANNELING_GTW_ACCESS_KEY = os.getenv('SMF_CHANNELING_GTW_ACCESS_KEY')
SMF_CHANNELING_GTW_API_KEY = os.getenv('SMF_CHANNELING_GTW_API_KEY')
SMF_CHANNELING_HMAC_SECRET_KEY = os.getenv('SMF_CHANNELING_HMAC_SECRET_KEY')

# DBS Channeling
DBS_API_KEY = os.getenv('DBS_API_KEY')
DBS_CALLBACK_API_KEY = os.getenv('DBS_CALLBACK_API_KEY')
DBS_CHANNELING_BASE_URL = os.getenv('DBS_CHANNELING_BASE_URL')
DBS_SFTP_HOST = os.getenv('DBS_SFTP_HOST')
DBS_SFTP_USERNAME = os.getenv('DBS_SFTP_USERNAME')
DBS_SFTP_PORT = os.getenv('DBS_SFTP_PORT')
DBS_SFTP_RSA_PRIVATE_KEY = os.getenv('DBS_SFTP_RSA_PRIVATE_KEY')
DBS_SFTP_REMOTE_DIRECTORY = os.getenv('DBS_SFTP_REMOTE_DIRECTORY')
DBS_GPG_ENCRYPT_RECIPIENT = os.getenv('DBS_GPG_ENCRYPT_RECIPIENT')
DBS_GPG_ENCRYPT_KEY_DATA = os.getenv('DBS_GPG_ENCRYPT_KEY_DATA')
DBS_GPG_ENCRYPT_API_RECIPIENT = os.getenv('DBS_GPG_ENCRYPT_API_RECIPIENT')
DBS_GPG_ENCRYPT_API_KEY_DATA = os.getenv('DBS_GPG_ENCRYPT_API_KEY_DATA')
DBS_GPG_DECRYPT_RECIPIENT = os.getenv('DBS_GPG_DECRYPT_RECIPIENT')
DBS_GPG_DECRYPT_KEY_DATA = os.getenv('DBS_GPG_DECRYPT_KEY_DATA')
DBS_GPG_DECRYPT_PASSPHRASE = os.getenv('DBS_GPG_DECRYPT_PASSPHRASE')
DBS_SLACK_NOTIFICATION_CHANNEL = os.getenv('DBS_SLACK_NOTIFICATION_CHANNEL')

# LOAN TOKEN SECRET KEY
LOAN_TOKEN_SECRET_KEY = os.getenv('LOAN_TOKEN_SECRET_KEY')
