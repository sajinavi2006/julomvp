# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2020-09-02 08:34
from __future__ import unicode_literals

import ckeditor.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import juloserver.julo.models
import phonenumber_field.modelfields
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FDCDataAsView',
            fields=[
                ('fdc_data_as_view_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('id_penyelenggara', models.IntegerField(blank=True, null=True)),
                ('id_borrower', models.BigIntegerField(blank=True, null=True)),
                ('jenis_pengguna', models.IntegerField(blank=True, null=True)),
                ('nama_borrower', models.CharField(max_length=100)),
                ('no_identitas', models.CharField(max_length=100)),
                ('no_npwp', models.TextField(blank=True, null=True)),
                ('id_pinjaman', models.BigIntegerField(blank=True, null=True)),
                ('tgl_perjanjian_borrower', models.TextField(blank=True, null=True)),
                ('tgl_penyaluran_dana', models.TextField(blank=True, null=True)),
                ('nilai_pendanaan', models.BigIntegerField(blank=True, null=True)),
                ('tgl_pelaporan_data', models.TextField(blank=True, null=True)),
                ('sisa_pinjaman_berjalan', models.BigIntegerField(blank=True, null=True)),
                ('tgl_jatuh_tempo_pinjaman', models.TextField(blank=True, null=True)),
                ('id_kualitas_pinjaman', models.IntegerField(blank=True, null=True)),
                ('status_pinjaman_dpd', models.IntegerField(blank=True, null=True)),
                ('status_pinjaman_max_dpd', models.IntegerField(blank=True, null=True)),
                ('status_pinjaman', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fdc_data_as_view',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AAIBlacklistLog',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='aai_blacklist_log_id', primary_key=True, serialize=False)),
                ('application_id', models.BigIntegerField(db_index=True)),
                ('response_status_code', models.CharField(blank=True, max_length=50, null=True)),
                ('request_string', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('response_string', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'aai_blacklist_log',
            },
        ),
        migrations.CreateModel(
            name='AdditionalExpense',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='additional_expense_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('description', models.TextField()),
                ('amount', models.BigIntegerField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('group', models.CharField(max_length=5)),
            ],
            options={
                'db_table': 'additional_expense',
            },
        ),
        migrations.CreateModel(
            name='AdditionalExpenseHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='additional_expense_history_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('old_description', models.TextField()),
                ('old_amount', models.BigIntegerField()),
                ('new_description', models.TextField()),
                ('new_amount', models.BigIntegerField()),
                ('group', models.CharField(max_length=5)),
            ],
            options={
                'db_table': 'additional_expense_history',
            },
        ),
        migrations.CreateModel(
            name='AddressGeolocation',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='address_geolocation_id', primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('provinsi', models.CharField(blank=True, max_length=100, null=True)),
                ('kabupaten', models.CharField(blank=True, max_length=100, null=True)),
                ('kecamatan', models.CharField(blank=True, max_length=100, null=True)),
                ('kelurahan', models.CharField(blank=True, max_length=100, null=True)),
                ('kodepos', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'db_table': 'address_geolocation',
            },
        ),
        migrations.CreateModel(
            name='AffordabilityHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='affordability_history_id', primary_key=True, serialize=False)),
                ('affordability_value', models.BigIntegerField()),
                ('affordability_type', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'affordability_history',
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('user_extension', models.CharField(blank=True, max_length=50, null=True)),
                ('is_autodialer_online', models.BooleanField(default=False)),
                ('inactive_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'agent',
            },
        ),
        migrations.CreateModel(
            name='AgentAssignmentOld',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='agent_assignment_id', primary_key=True, serialize=False)),
                ('collect_date', models.DateField(blank=True, null=True)),
                ('assign_time', models.DateTimeField(blank=True, null=True)),
                ('unassign_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'agent_assignment_old',
            },
        ),
        migrations.CreateModel(
            name='AgentProductivity',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='agent_productivity_id', primary_key=True, serialize=False)),
                ('agent_name', models.TextField(blank=True, null=True)),
                ('hourly_interval', models.TextField(blank=True, null=True)),
                ('calling_date', models.DateTimeField(blank=True, null=True)),
                ('inbound_calls_offered', models.IntegerField(blank=True, null=True)),
                ('inbound_calls_answered', models.IntegerField(blank=True, null=True)),
                ('inbound_calls_not_answered', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_initiated', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_connected', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_not_connected', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_offered', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_answered', models.IntegerField(blank=True, null=True)),
                ('outbound_calls_not_answered', models.IntegerField(blank=True, null=True)),
                ('manual_in_calls_offered', models.IntegerField(blank=True, null=True)),
                ('manual_in_calls_answered', models.IntegerField(blank=True, null=True)),
                ('manual_in_calls_not_answered', models.IntegerField(blank=True, null=True)),
                ('manual_out_calls_initiated', models.IntegerField(blank=True, null=True)),
                ('manual_out_calls_connected', models.IntegerField(blank=True, null=True)),
                ('manual_out_calls_not_connected', models.IntegerField(blank=True, null=True)),
                ('internal_in_calls_offered', models.IntegerField(blank=True, null=True)),
                ('internal_in_calls_answered', models.IntegerField(blank=True, null=True)),
                ('internal_in_calls_not_answered', models.IntegerField(blank=True, null=True)),
                ('internal_out_calls_initiated', models.IntegerField(blank=True, null=True)),
                ('internal_out_calls_connected', models.IntegerField(blank=True, null=True)),
                ('internal_out_calls_not_connected', models.IntegerField(blank=True, null=True)),
                ('inbound_talk_time', models.TextField(blank=True, null=True)),
                ('inbound_hold_time', models.TextField(blank=True, null=True)),
                ('inbound_acw_time', models.TextField(blank=True, null=True)),
                ('inbound_handling_time', models.TextField(blank=True, null=True)),
                ('outbound_talk_time', models.TextField(blank=True, null=True)),
                ('outbound_hold_time', models.TextField(blank=True, null=True)),
                ('outbound_acw_time', models.TextField(blank=True, null=True)),
                ('outbound_handling_time', models.TextField(blank=True, null=True)),
                ('manual_out_call_time', models.TextField(blank=True, null=True)),
                ('manual_in_call_time', models.TextField(blank=True, null=True)),
                ('internal_out_call_time', models.TextField(blank=True, null=True)),
                ('internal_in_call_time', models.TextField(blank=True, null=True)),
                ('logged_in_time', models.TextField(blank=True, null=True)),
                ('available_time', models.TextField(blank=True, null=True)),
                ('aux_time', models.TextField(blank=True, null=True)),
                ('busy_time', models.TextField(blank=True, null=True)),
                ('login_ts', models.DateTimeField(blank=True, null=True)),
                ('logout_ts', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'agent_productivity',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_id', primary_key=True, serialize=False)),
                ('loan_amount_request', models.BigIntegerField(blank=True, null=True)),
                ('validated_qr_code', models.BooleanField(default=False)),
                ('loan_duration_request', models.IntegerField(blank=True, null=True)),
                ('loan_purpose', models.CharField(blank=True, max_length=100, null=True, verbose_name='Tujuan pinjaman')),
                ('loan_purpose_desc', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marketing_source', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Dari mana tahu')),
                ('payday', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('referral_code', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_own_phone', models.NullBooleanField()),
                ('fullname', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('dob', models.DateField(blank=True, null=True)),
                ('birth_place', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin')),
                ('ktp', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('address_street_num', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_provinsi', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kabupaten', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kecamatan', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kelurahan', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('occupied_since', models.DateField(blank=True, null=True)),
                ('home_status', models.CharField(blank=True, choices=[('Mess karyawan', 'Mess karyawan'), ('Kontrak', 'Kontrak'), ('Kos', 'Kos'), ('Milik orang tua', 'Milik orang tua'), ('Milik keluarga', 'Milik keluarga'), ('Milik sendiri, lunas', 'Milik sendiri, lunas'), ('Milik sendiri, mencicil', 'Milik sendiri, mencicil'), ('Lainnya', 'Lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status domisili')),
                ('landlord_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('mobile_phone_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('new_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('has_whatsapp_1', models.NullBooleanField()),
                ('mobile_phone_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('has_whatsapp_2', models.NullBooleanField()),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('bbm_pin', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('twitter_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('instagram_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marital_status', models.CharField(blank=True, choices=[('Lajang', 'Lajang'), ('Menikah', 'Menikah'), ('Cerai', 'Cerai'), ('Janda / duda', 'Janda / duda')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status sipil')),
                ('dependent', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Jumlah tanggungan')),
                ('spouse_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('spouse_dob', models.DateField(blank=True, null=True)),
                ('spouse_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('spouse_has_whatsapp', models.NullBooleanField()),
                ('kin_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('kin_dob', models.DateField(blank=True, null=True)),
                ('kin_gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin kerabat')),
                ('kin_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('kin_relationship', models.CharField(blank=True, choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Hubungan kerabat')),
                ('close_kin_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('close_kin_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('close_kin_relationship', models.CharField(blank=True, choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Hubungan kerabat')),
                ('job_type', models.CharField(blank=True, choices=[('Pegawai swasta', 'Pegawai swasta'), ('Pegawai negeri', 'Pegawai negeri'), ('Pengusaha', 'Pengusaha'), ('Freelance', 'Freelance'), ('Pekerja rumah tangga', 'Pekerja rumah tangga'), ('Lainnya', 'Lainnya'), ('Staf rumah tangga', 'Staf rumah tangga'), ('Ibu rumah tangga', 'Ibu rumah tangga'), ('Mahasiswa', 'Mahasiswa'), ('Tidak bekerja', 'Tidak bekerja')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Tipe pekerjaan')),
                ('job_industry', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_function', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_description', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='phone has to be 6 to 15 numeric digits', regex='^\\+?\\d{6,15}$')])),
                ('work_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('job_start', models.DateField(blank=True, null=True)),
                ('monthly_income', models.BigIntegerField(blank=True, null=True)),
                ('income_1', models.BigIntegerField(blank=True, null=True)),
                ('income_2', models.BigIntegerField(blank=True, null=True)),
                ('income_3', models.BigIntegerField(blank=True, null=True)),
                ('last_education', models.CharField(blank=True, choices=[('SD', 'SD'), ('SLTP', 'SLTP'), ('SLTA', 'SLTA'), ('Diploma', 'Diploma'), ('S1', 'S1'), ('S2', 'S2'), ('S3', 'S3')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Pendidikan terakhir')),
                ('college', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('major', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('has_other_income', models.BooleanField(default=False)),
                ('other_income_amount', models.BigIntegerField(blank=True, null=True)),
                ('other_income_source', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('monthly_housing_cost', models.BigIntegerField(blank=True, null=True)),
                ('monthly_expenses', models.BigIntegerField(blank=True, null=True)),
                ('total_current_debt', models.BigIntegerField(blank=True, null=True)),
                ('vehicle_type_1', models.CharField(blank=True, choices=[('Sepeda motor', 'Sepeda motor'), ('Mobil', 'Mobil'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kendaraan pribadi 1')),
                ('vehicle_ownership_1', models.CharField(blank=True, choices=[('Lunas', 'Lunas'), ('Mencicil', 'Mencicil'), ('Diagunkan', 'Diagunkan'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kepemilikan 1')),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('name_in_bank', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_term_accepted', models.BooleanField(default=False)),
                ('is_verification_agreed', models.BooleanField(default=False)),
                ('is_document_submitted', models.NullBooleanField()),
                ('is_sphp_signed', models.NullBooleanField()),
                ('sphp_exp_date', models.DateField(blank=True, null=True)),
                ('application_xid', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('app_version', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('web_version', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('application_number', models.IntegerField(blank=True, null=True)),
                ('gmail_scraped_status', models.CharField(choices=[('Not scraped', 'Not scraped'), ('Working', 'Working'), ('Done', 'Done')], default='Not scraped', max_length=15, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_courtesy_call', models.NullBooleanField(default=False)),
                ('hrd_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_address', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('number_of_employees', models.IntegerField(blank=True, null=True)),
                ('position_employees', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('employment_status', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('billing_office', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('mutation', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('dialect', models.CharField(blank=True, choices=[('Bahasa Jawa', 'Bahasa Jawa'), ('Bahasa Melayu', 'Bahasa Melayu'), ('Bahasa Sunda', 'Bahasa Sunda'), ('Bahasa Madura', 'Bahasa Madura'), ('Bahasa Batak', 'Bahasa Batak'), ('Bahasa Minangkabau', 'Bahasa Minangkabau'), ('Bahasa Bugis', 'Bahasa Bugis'), ('Bahasa Aceh', 'Bahasa Aceh'), ('Bahasa Bali', 'Bahasa Bali'), ('Bahasa Banjar', 'Bahasa Banjar'), ('Lainnya', 'Lainnya'), ('Tidak ada', 'Tidak ada')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Bahasa sehari-hari')),
                ('teaser_loan_amount', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.NullBooleanField()),
                ('status_path_locked', models.IntegerField(blank=True, null=True)),
                ('additional_contact_1_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('additional_contact_1_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('additional_contact_2_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('additional_contact_2_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('loan_purpose_description_expanded', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(500)])),
                ('is_fdc_risky', models.NullBooleanField()),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='ApplicationCheckList',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_check_list_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('sd', models.NullBooleanField()),
                ('dv', models.NullBooleanField()),
                ('pv', models.NullBooleanField()),
                ('ca', models.NullBooleanField()),
                ('fin', models.NullBooleanField()),
            ],
            options={
                'db_table': 'application_check_list',
            },
        ),
        migrations.CreateModel(
            name='ApplicationCheckListComment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_check_list_comment_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('comment', models.TextField()),
                ('group', models.CharField(max_length=5)),
            ],
            options={
                'db_table': 'application_check_list_comment',
            },
        ),
        migrations.CreateModel(
            name='ApplicationCheckListHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_check_list_history_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('changed_to', models.NullBooleanField()),
                ('changed_from', models.NullBooleanField()),
                ('group', models.CharField(max_length=5)),
            ],
            options={
                'db_table': 'application_check_list_history',
            },
        ),
        migrations.CreateModel(
            name='ApplicationDataCheck',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='data_check_id', primary_key=True, serialize=False)),
                ('automation', models.SmallIntegerField(blank=True, null=True)),
                ('prioritize', models.SmallIntegerField(blank=True, null=True)),
                ('sequence', models.SmallIntegerField(blank=True, null=True)),
                ('data_to_check', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
                ('check_type', models.SmallIntegerField(blank=True, null=True)),
                ('is_okay', models.NullBooleanField()),
                ('text_value', models.CharField(blank=True, max_length=150, null=True)),
                ('number_value', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['application', 'sequence'],
                'db_table': 'application_data_check',
            },
        ),
        migrations.CreateModel(
            name='ApplicationExperiment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_experiment_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'application_experiment',
            },
        ),
        migrations.CreateModel(
            name='ApplicationField',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_field_id', primary_key=True, serialize=False)),
                ('field_name', models.CharField(max_length=50)),
                ('edit_status', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('description', models.CharField(default='-inital data-', max_length=50)),
            ],
            options={
                'db_table': 'application_field',
            },
        ),
        migrations.CreateModel(
            name='ApplicationFieldChange',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_field_change_id', primary_key=True, serialize=False)),
                ('field_name', models.TextField()),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField()),
            ],
            options={
                'db_table': 'application_field_change',
            },
        ),
        migrations.CreateModel(
            name='ApplicationHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_history_id', primary_key=True, serialize=False)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('change_reason', models.TextField(default='system_triggered')),
                ('is_skip_workflow_action', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'application_history',
                'verbose_name_plural': 'Application History',
            },
        ),
        migrations.CreateModel(
            name='ApplicationInstallHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_install_history_id', primary_key=True, serialize=False)),
                ('appsflyer', models.CharField(blank=True, db_column='appsflyer_id', max_length=100, null=True)),
                ('event_time', models.DateTimeField()),
                ('event_name', models.CharField(blank=True, max_length=100, null=True)),
                ('partner', models.CharField(blank=True, max_length=100, null=True)),
                ('media_source', models.CharField(blank=True, max_length=100, null=True)),
                ('campaign', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'application_install_history',
            },
        ),
        migrations.CreateModel(
            name='ApplicationNote',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_note_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
            ],
            options={
                'db_table': 'application_note',
            },
        ),
        migrations.CreateModel(
            name='ApplicationOriginal',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_id', primary_key=True, serialize=False)),
                ('loan_amount_request', models.BigIntegerField(blank=True, null=True)),
                ('validated_qr_code', models.BooleanField(default=False)),
                ('loan_duration_request', models.IntegerField(blank=True, null=True)),
                ('loan_purpose', models.CharField(blank=True, max_length=100, null=True, verbose_name='Tujuan pinjaman')),
                ('loan_purpose_desc', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marketing_source', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Dari mana tahu')),
                ('payday', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('referral_code', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_own_phone', models.NullBooleanField()),
                ('fullname', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('dob', models.DateField(blank=True, null=True)),
                ('birth_place', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin')),
                ('ktp', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('address_street_num', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_provinsi', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kabupaten', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kecamatan', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kelurahan', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('address_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('occupied_since', models.DateField(blank=True, null=True)),
                ('home_status', models.CharField(blank=True, choices=[('Mess karyawan', 'Mess karyawan'), ('Kontrak', 'Kontrak'), ('Kos', 'Kos'), ('Milik orang tua', 'Milik orang tua'), ('Milik keluarga', 'Milik keluarga'), ('Milik sendiri, lunas', 'Milik sendiri, lunas'), ('Milik sendiri, mencicil', 'Milik sendiri, mencicil'), ('Lainnya', 'Lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status domisili')),
                ('landlord_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('mobile_phone_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('new_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('has_whatsapp_1', models.NullBooleanField()),
                ('mobile_phone_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('has_whatsapp_2', models.NullBooleanField()),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('bbm_pin', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('twitter_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('instagram_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marital_status', models.CharField(blank=True, choices=[('Lajang', 'Lajang'), ('Menikah', 'Menikah'), ('Cerai', 'Cerai'), ('Janda / duda', 'Janda / duda')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status sipil')),
                ('dependent', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Jumlah tanggungan')),
                ('spouse_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('spouse_dob', models.DateField(blank=True, null=True)),
                ('spouse_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('spouse_has_whatsapp', models.NullBooleanField()),
                ('kin_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('kin_dob', models.DateField(blank=True, null=True)),
                ('kin_gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin kerabat')),
                ('kin_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('kin_relationship', models.CharField(blank=True, choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Hubungan kerabat')),
                ('close_kin_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('close_kin_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('close_kin_relationship', models.CharField(blank=True, choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Hubungan kerabat')),
                ('job_type', models.CharField(blank=True, choices=[('Pegawai swasta', 'Pegawai swasta'), ('Pegawai negeri', 'Pegawai negeri'), ('Pengusaha', 'Pengusaha'), ('Freelance', 'Freelance'), ('Pekerja rumah tangga', 'Pekerja rumah tangga'), ('Lainnya', 'Lainnya'), ('Staf rumah tangga', 'Staf rumah tangga'), ('Ibu rumah tangga', 'Ibu rumah tangga'), ('Mahasiswa', 'Mahasiswa'), ('Tidak bekerja', 'Tidak bekerja')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Tipe pekerjaan')),
                ('job_industry', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_function', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_description', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='phone has to be 6 to 15 numeric digits', regex='^\\+?\\d{6,15}$')])),
                ('work_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('job_start', models.DateField(blank=True, null=True)),
                ('monthly_income', models.BigIntegerField(blank=True, null=True)),
                ('income_1', models.BigIntegerField(blank=True, null=True)),
                ('income_2', models.BigIntegerField(blank=True, null=True)),
                ('income_3', models.BigIntegerField(blank=True, null=True)),
                ('last_education', models.CharField(blank=True, choices=[('SD', 'SD'), ('SLTP', 'SLTP'), ('SLTA', 'SLTA'), ('Diploma', 'Diploma'), ('S1', 'S1'), ('S2', 'S2'), ('S3', 'S3')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Pendidikan terakhir')),
                ('college', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('major', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('has_other_income', models.BooleanField(default=False)),
                ('other_income_amount', models.BigIntegerField(blank=True, null=True)),
                ('other_income_source', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('monthly_housing_cost', models.BigIntegerField(blank=True, null=True)),
                ('monthly_expenses', models.BigIntegerField(blank=True, null=True)),
                ('total_current_debt', models.BigIntegerField(blank=True, null=True)),
                ('vehicle_type_1', models.CharField(blank=True, choices=[('Sepeda motor', 'Sepeda motor'), ('Mobil', 'Mobil'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kendaraan pribadi 1')),
                ('vehicle_ownership_1', models.CharField(blank=True, choices=[('Lunas', 'Lunas'), ('Mencicil', 'Mencicil'), ('Diagunkan', 'Diagunkan'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kepemilikan 1')),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('name_in_bank', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_term_accepted', models.BooleanField(default=False)),
                ('is_verification_agreed', models.BooleanField(default=False)),
                ('is_document_submitted', models.NullBooleanField()),
                ('is_sphp_signed', models.NullBooleanField()),
                ('sphp_exp_date', models.DateField(blank=True, null=True)),
                ('application_xid', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('app_version', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('web_version', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('application_number', models.IntegerField(blank=True, null=True)),
                ('gmail_scraped_status', models.CharField(choices=[('Not scraped', 'Not scraped'), ('Working', 'Working'), ('Done', 'Done')], default='Not scraped', max_length=15, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_courtesy_call', models.NullBooleanField(default=False)),
                ('hrd_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_address', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('number_of_employees', models.IntegerField(blank=True, null=True)),
                ('position_employees', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('employment_status', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('billing_office', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('mutation', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('dialect', models.CharField(blank=True, choices=[('Bahasa Jawa', 'Bahasa Jawa'), ('Bahasa Melayu', 'Bahasa Melayu'), ('Bahasa Sunda', 'Bahasa Sunda'), ('Bahasa Madura', 'Bahasa Madura'), ('Bahasa Batak', 'Bahasa Batak'), ('Bahasa Minangkabau', 'Bahasa Minangkabau'), ('Bahasa Bugis', 'Bahasa Bugis'), ('Bahasa Aceh', 'Bahasa Aceh'), ('Bahasa Bali', 'Bahasa Bali'), ('Bahasa Banjar', 'Bahasa Banjar'), ('Lainnya', 'Lainnya'), ('Tidak ada', 'Tidak ada')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Bahasa sehari-hari')),
                ('teaser_loan_amount', models.BigIntegerField(blank=True, null=True)),
                ('is_deleted', models.NullBooleanField()),
                ('status_path_locked', models.IntegerField(blank=True, null=True)),
                ('additional_contact_1_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('additional_contact_1_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('additional_contact_2_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('additional_contact_2_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='mobile phone has to be 10 to 15 numeric digits', regex='^\\+?\\d{10,15}$')])),
                ('loan_purpose_description_expanded', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(500)])),
                ('is_fdc_risky', models.NullBooleanField()),
            ],
            options={
                'db_table': 'application_original',
            },
        ),
        migrations.CreateModel(
            name='ApplicationScrapeAction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_scrape_action_id', primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=100)),
                ('scrape_type', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'application_scrape_action',
            },
        ),
        migrations.CreateModel(
            name='ApplicationWorkflowSwitchHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_workflow_switch_history_id', primary_key=True, serialize=False)),
                ('workflow_old', models.CharField(max_length=200)),
                ('workflow_new', models.CharField(max_length=200)),
                ('change_reason', models.TextField(default='system_triggered')),
            ],
            options={
                'db_table': 'application_workflow_switch_history',
            },
        ),
        migrations.CreateModel(
            name='AppsFlyerLogs',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('log_id', models.AutoField(db_column='appsflyer_logs_id', primary_key=True, serialize=False)),
                ('status_new', models.IntegerField(blank=True, null=True)),
                ('status_old', models.IntegerField(blank=True, null=True)),
                ('appsflyer_device_id', models.CharField(blank=True, max_length=50, null=True)),
                ('appsflyer_log_code', models.CharField(blank=True, max_length=50, null=True)),
                ('event_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'appsflyer_logs',
            },
        ),
        migrations.CreateModel(
            name='AppVersion',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='app_version_id', primary_key=True, serialize=False)),
                ('app_version', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('supported', 'supported'), ('deprecated', 'deprecated'), ('not_supported', 'not_supported'), ('latest', 'latest')], max_length=50)),
            ],
            options={
                'db_table': 'app_version',
            },
        ),
        migrations.CreateModel(
            name='AppVersionHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='app_version_history_id', primary_key=True, serialize=False)),
                ('build_number', models.IntegerField()),
                ('version_name', models.CharField(max_length=10)),
                ('is_critical', models.NullBooleanField()),
            ],
            options={
                'db_table': 'app_version_history',
            },
        ),
        migrations.CreateModel(
            name='Autodialer122Queue',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_122_queue_id', primary_key=True, serialize=False)),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('auto_call_result_status', models.CharField(blank=True, max_length=50, null=True)),
                ('is_agent_called', models.BooleanField(default=False)),
                ('attempt', models.IntegerField(blank=True, null=True)),
                ('conversation_uuid', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'autodialer_122_queue',
            },
        ),
        migrations.CreateModel(
            name='AutodialerActivityHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_activity_history_id', primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'autodialer_activity_history',
            },
        ),
        migrations.CreateModel(
            name='AutodialerCallResult',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_call_result_id', primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
                ('phone_number', juloserver.julo.models.NoValidatePhoneNumberField(blank=True, max_length=128, null=True)),
            ],
            options={
                'db_table': 'autodialer_call_result',
            },
        ),
        migrations.CreateModel(
            name='AutoDialerRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_record_id', primary_key=True, serialize=False)),
                ('call_id', models.CharField(max_length=250, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('time_of_call', models.DateTimeField(null=True)),
                ('call_status', models.CharField(max_length=20)),
                ('call_duration', models.IntegerField(null=True)),
                ('attempt_number', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'autodialer_record',
            },
        ),
        migrations.CreateModel(
            name='AutodialerSession',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_session_id', primary_key=True, serialize=False)),
                ('failed_count', models.IntegerField(default=0)),
                ('next_session_ts', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField()),
            ],
            options={
                'db_table': 'autodialer_session',
            },
        ),
        migrations.CreateModel(
            name='AutodialerSessionStatus',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='autodialer_session_status_id', primary_key=True, serialize=False)),
                ('failed_count', models.IntegerField(default=0)),
                ('next_session_ts', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'autodialer_session_status',
            },
        ),
        migrations.CreateModel(
            name='AwsFaceRecogLog',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='aws_face_recog_log_id', primary_key=True, serialize=False)),
                ('face_id', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='face_id', null=True)),
                ('raw_response', django.contrib.postgres.fields.jsonb.JSONField(db_column='raw_response')),
                ('is_indexed', models.NullBooleanField(db_column='is_indexed')),
                ('is_quality_check_passed', models.NullBooleanField(db_column='is_quality_check_passed')),
                ('brightness_threshold', models.IntegerField()),
                ('sharpness_threshold', models.IntegerField()),
            ],
            options={
                'db_table': 'aws_face_recog_log',
            },
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bank_id', primary_key=True, serialize=False)),
                ('bank_code', models.CharField(blank=True, max_length=50, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=150, null=True)),
                ('min_account_number', models.IntegerField(blank=True, null=True)),
                ('xendit_bank_code', models.CharField(blank=True, max_length=100, null=True)),
                ('instamoney_bank_code', models.CharField(blank=True, max_length=100, null=True)),
                ('xfers_bank_code', models.CharField(blank=True, max_length=100, null=True)),
                ('swift_bank_code', models.CharField(blank=True, max_length=100, null=True)),
                ('order_position', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bank',
            },
        ),
        migrations.CreateModel(
            name='BankApplication',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bank_application_id', primary_key=True, serialize=False)),
                ('mailing_address', models.CharField(blank=True, choices=[('Alamat Identitas', 'Alamat Identitas'), ('Alamat tempat kerja', 'Alamat tempat kerja'), ('Alamat domisili', 'Alamat domisili')], max_length=50, null=True)),
                ('kkbri', models.NullBooleanField()),
                ('daily_transaction', models.BigIntegerField(blank=True, null=True)),
                ('income_source', models.CharField(blank=True, choices=[('Gaji', 'Gaji'), ('Hasil Usaha', 'Hasil Usaha'), ('Lainnya', 'Lainnya')], max_length=50, null=True)),
                ('company_address_kelurahan', models.CharField(blank=True, max_length=100, null=True)),
                ('company_address_kecamatan', models.CharField(blank=True, max_length=100, null=True)),
                ('company_address_kabupaten', models.CharField(blank=True, max_length=100, null=True)),
                ('company_address_provinsi', models.CharField(blank=True, max_length=100, null=True)),
                ('uker_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'bank_application',
            },
        ),
        migrations.CreateModel(
            name='BankLookup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='internal_bank_id', primary_key=True, serialize=False)),
                ('bank_code', models.CharField(max_length=3)),
                ('bank_name', models.TextField()),
                ('xendit_bank_code', models.TextField()),
                ('swift_bank_code', models.CharField(max_length=8)),
            ],
            options={
                'db_table': 'bank_lookup',
            },
        ),
        migrations.CreateModel(
            name='BankVirtualAccount',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bank_virtual_account_id', primary_key=True, serialize=False)),
                ('virtual_account_number', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(message='Bank account number has to be numeric digits', regex='^[0-9]+$')])),
            ],
            options={
                'db_table': 'bank_virtual_account',
            },
        ),
        migrations.CreateModel(
            name='BannerSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='banner_setting_id', primary_key=True, serialize=False)),
                ('reference_model', models.CharField(blank=True, choices=[('ProductLine', 'ProductLine'), ('Partner', 'Partner'), ('StatusLookup', 'StatusLookup'), ('Payment', 'Payment'), ('Loan', 'Loan'), ('CreditScore', 'CreditMatrix')], max_length=100, null=True)),
                ('reference_type', models.CharField(blank=True, choices=[('PRODUCT', 'PRODUCT'), ('PARTNER', 'PARTNER'), ('APPLICATION_STATUS', 'APPLICATION_STATUS'), ('LOAN_STATUS', 'LOAN_STATUS'), ('DUE_DATE_PAYMENT', 'DUE_DATE_PAYMENT'), ('PAYMENT_STATUS', 'PAYMENT_STATUS'), ('DPD_LOAN', 'DPD_LOAN'), ('DPD_PAYMENT', 'DPD_PAYMENT'), ('CREDIT_SCORE', 'CREDIT_SCORE')], max_length=100, null=True)),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'banner_setting',
            },
        ),
        migrations.CreateModel(
            name='BcaTransactionRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bca_transaction_id', primary_key=True, serialize=False)),
                ('transaction_date', models.DateField()),
                ('reference_id', models.CharField(max_length=20)),
                ('currency_code', models.CharField(max_length=10)),
                ('amount', models.IntegerField()),
                ('beneficiary_account_number', models.CharField(max_length=100)),
                ('remark1', models.CharField(max_length=100)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('error_code', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'bca_transaction_record',
            },
        ),
        migrations.CreateModel(
            name='BlacklistCustomer',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='blacklist_customer_id', primary_key=True, serialize=False)),
                ('source', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('citizenship', models.TextField(blank=True, null=True)),
                ('dob', models.TextField(blank=True, null=True)),
                ('fullname_trim', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'blacklist_customer',
            },
        ),
        migrations.CreateModel(
            name='CampaignSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='campaign_setting_id', primary_key=True, serialize=False)),
                ('campaign_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'campaign_setting',
            },
        ),
        migrations.CreateModel(
            name='CashbackTransferTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='cashback_transfer_transaction_id', primary_key=True, serialize=False)),
                ('bank_name', models.CharField(max_length=100)),
                ('bank_code', models.CharField(max_length=50, null=True)),
                ('bank_number', models.CharField(max_length=50)),
                ('name_in_bank', models.CharField(max_length=250)),
                ('validation_status', models.CharField(max_length=50, null=True)),
                ('validation_id', models.CharField(max_length=250, null=True)),
                ('validated_name', models.CharField(max_length=250, null=True)),
                ('transfer_status', models.CharField(max_length=50, null=True)),
                ('transfer_id', models.CharField(max_length=250, null=True)),
                ('failure_code', models.CharField(max_length=250, null=True)),
                ('failure_message', models.TextField(null=True)),
                ('transfer_amount', models.BigIntegerField()),
                ('redeem_amount', models.BigIntegerField()),
                ('external_id', models.CharField(blank=True, max_length=250, null=True)),
                ('retry_times', models.IntegerField(blank=True, default=0, null=True)),
                ('partner_transfer', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'cashback_transfer_transaction',
            },
        ),
        migrations.CreateModel(
            name='CashbackXenditTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='cashback_xendit_transaction_id', primary_key=True, serialize=False)),
                ('bank_name', models.CharField(max_length=100)),
                ('bank_code', models.CharField(max_length=50, null=True)),
                ('bank_number', models.CharField(max_length=50)),
                ('name_in_bank', models.CharField(max_length=250)),
                ('validation_status', models.CharField(max_length=50, null=True)),
                ('validation_id', models.CharField(max_length=250, null=True)),
                ('validated_name', models.CharField(max_length=250, null=True)),
                ('transfer_status', models.CharField(max_length=50, null=True)),
                ('transfer_id', models.CharField(max_length=250, null=True)),
                ('failure_code', models.CharField(max_length=250, null=True)),
                ('failure_message', models.TextField(null=True)),
                ('transfer_amount', models.BigIntegerField()),
                ('redeem_amount', models.BigIntegerField()),
                ('external_id', models.CharField(blank=True, max_length=250, null=True)),
                ('retry_times', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'cashback_xendit_transaction',
            },
        ),
        migrations.CreateModel(
            name='CenterixCallbackResults',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='centerix_callback_results_id', primary_key=True, serialize=False)),
                ('campaign_code', models.CharField(blank=True, max_length=100, null=True)),
                ('application_id', models.BigIntegerField(blank=True, null=True)),
                ('payment_id', models.BigIntegerField(blank=True, null=True)),
                ('start_ts', models.DateTimeField(blank=True, null=True)),
                ('end_ts', models.DateTimeField(blank=True, null=True)),
                ('error_msg', models.TextField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('parameters', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'centerix_callback_results',
            },
        ),
        migrations.CreateModel(
            name='ChangeReason',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='change_reason_id', primary_key=True, serialize=False)),
                ('reason', models.TextField()),
            ],
            options={
                'db_table': 'change_reason',
            },
        ),
        migrations.CreateModel(
            name='Collateral',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='collateral_id', primary_key=True, serialize=False)),
                ('collateral_type', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('collateral_model_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('collateral_model_year', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
            ],
            options={
                'db_table': 'collateral',
            },
        ),
        migrations.CreateModel(
            name='CollectionAgentAssignment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='collection_agent_assignment_id', primary_key=True, serialize=False)),
                ('assign_time', models.DateTimeField(blank=True, null=True)),
                ('unassign_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('type', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'collection_agent_assignment',
            },
        ),
        migrations.CreateModel(
            name='CommsProviderLookup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.CharField(db_column='comms_provider_id', max_length=50, primary_key=True, serialize=False)),
                ('provider_name', models.CharField(blank=True, db_column='comms_provider_name', max_length=100, null=True)),
            ],
            options={
                'db_table': 'comms_provider_lookup',
            },
        ),
        migrations.CreateModel(
            name='CootekRobocall',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='cootek_event_id', primary_key=True, serialize=False)),
                ('arrears', models.BigIntegerField(blank=True, null=True)),
                ('cootek_event_type', models.CharField(blank=True, max_length=50, null=True)),
                ('cootek_event_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('task_id', models.CharField(blank=True, max_length=50, null=True)),
                ('call_to', models.CharField(blank=True, max_length=50, null=True)),
                ('task_status', models.CharField(blank=True, max_length=50, null=True)),
                ('called_at', models.BigIntegerField(blank=True, null=True)),
                ('round', models.BigIntegerField(blank=True, default=0, null=True)),
                ('ring_type', models.CharField(blank=True, max_length=50, null=True)),
                ('robot_type', models.CharField(blank=True, max_length=50, null=True)),
                ('intention', models.CharField(blank=True, max_length=50, null=True)),
                ('duration', models.BigIntegerField(blank=True, default=0, null=True)),
                ('campaign_or_strategy', models.CharField(blank=True, max_length=50, null=True)),
                ('hang_type', models.CharField(blank=True, max_length=50, null=True)),
                ('call_status', models.CharField(blank=True, max_length=50, null=True)),
                ('task_type', models.CharField(default=None, max_length=200, null=True)),
                ('time_to_start', models.TimeField(default=None, null=True)),
                ('product', models.CharField(default=None, max_length=10, null=True)),
            ],
            options={
                'db_table': 'cootek_robocall',
            },
        ),
        migrations.CreateModel(
            name='CreditMatrix',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='credit_matrix_id', primary_key=True, serialize=False)),
                ('score', models.CharField(max_length=5)),
                ('min_threshold', models.FloatField()),
                ('max_threshold', models.FloatField()),
                ('score_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_premium_area', models.BooleanField(default=True)),
                ('is_salaried', models.BooleanField(default=True)),
                ('credit_matrix_type', models.CharField(choices=[(b'julo', b'julo'), (b'julo_repeat', b'julo_repeat'), (b'webapp', b'webapp')], max_length=50)),
                ('version', models.IntegerField(blank=True, default=None, null=True)),
                ('parameter', models.TextField(blank=True, default=None, null=True)),
                ('priority', models.CharField(blank=True, default=None, max_length=5, null=True)),
            ],
            options={
                'db_table': 'credit_matrix',
            },
        ),
        migrations.CreateModel(
            name='CreditMatrixProductLine',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='credit_matrix_product_line_id', primary_key=True, serialize=False)),
                ('interest', models.FloatField()),
                ('min_loan_amount', models.BigIntegerField()),
                ('max_loan_amount', models.BigIntegerField()),
                ('max_duration', models.IntegerField()),
                ('min_duration', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'credit_matrix_product_line',
            },
        ),
        migrations.CreateModel(
            name='CreditScore',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='credit_score_id', primary_key=True, serialize=False)),
                ('score', models.TextField()),
                ('message', models.TextField()),
                ('products_str', models.TextField()),
                ('income_prediction_score', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('thin_file_score', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('inside_premium_area', models.BooleanField(default=True)),
                ('score_tag', models.CharField(blank=True, max_length=60, null=True)),
                ('credit_limit', models.BigIntegerField(blank=True, null=True)),
                ('failed_checks', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('model_version', models.CharField(default=None, max_length=200, null=True)),
                ('credit_matrix_version', models.IntegerField(blank=True, default=None, null=True)),
                ('fdc_inquiry_check', models.NullBooleanField()),
                ('credit_matrix_id', models.CharField(blank=True, default=None, max_length=10, null=True)),
            ],
            options={
                'db_table': 'credit_score',
            },
        ),
        migrations.CreateModel(
            name='CreditScoreExperiment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='credit_score_experiment_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'credit_score_experiment',
            },
        ),
        migrations.CreateModel(
            name='CrmNavlog',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='crm_navlog_id', primary_key=True, serialize=False)),
                ('page_url', models.TextField(blank=True, null=True)),
                ('referrer_url', models.TextField(blank=True, null=True)),
                ('user', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('element', models.TextField(blank=True, null=True)),
                ('path', models.TextField(blank=True, null=True)),
                ('event', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'crm_navlog',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_id', primary_key=True, serialize=False)),
                ('fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('nik', models.CharField(blank=True, max_length=16, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('self_referral_code', models.CharField(blank=True, max_length=20, null=True)),
                ('email_verification_key', models.CharField(blank=True, max_length=50, null=True)),
                ('email_key_exp_date', models.DateTimeField(blank=True, null=True)),
                ('reset_password_key', models.CharField(blank=True, max_length=50, null=True)),
                ('reset_password_exp_date', models.DateTimeField(blank=True, null=True)),
                ('can_reapply', models.BooleanField(default=False)),
                ('is_review_submitted', models.NullBooleanField()),
                ('is_phone_verified', models.NullBooleanField()),
                ('is_email_verified', models.NullBooleanField()),
                ('appsflyer_device_id', models.CharField(blank=True, max_length=50, null=True)),
                ('advertising_id', models.CharField(blank=True, max_length=50, null=True)),
                ('disabled_reapply_date', models.DateTimeField(blank=True, null=True)),
                ('can_reapply_date', models.DateTimeField(blank=True, null=True)),
                ('potential_skip_pv_dv', models.BooleanField(default=False)),
                ('google_access_token', models.CharField(blank=True, max_length=500, null=True)),
                ('google_refresh_token', models.CharField(blank=True, max_length=500, null=True)),
                ('is_digisign_registered', models.NullBooleanField()),
                ('is_digisign_activated', models.NullBooleanField()),
                ('customer_xid', models.BigIntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin')),
                ('dob', models.DateField(blank=True, null=True)),
                ('can_notify', models.BooleanField(default=True)),
                ('is_digisign_affected', models.BooleanField(default=False)),
                ('is_new_va', models.BooleanField(default=False)),
                ('mother_maiden_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'customer',
            },
            bases=(models.Model, juloserver.julo.models.GetInstanceMixin),
        ),
        migrations.CreateModel(
            name='CustomerAppAction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_app_action_id', primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
                ('is_completed', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'customer_app_action',
            },
        ),
        migrations.CreateModel(
            name='CustomerCampaignParameter',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_campaign_parameter_id', primary_key=True, serialize=False)),
                ('effective_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'customer_campaign_parameters',
            },
        ),
        migrations.CreateModel(
            name='CustomerFieldChange',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_field_change_id', primary_key=True, serialize=False)),
                ('field_name', models.CharField(max_length=100)),
                ('old_value', models.CharField(blank=True, max_length=200, null=True)),
                ('new_value', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'customer_field_change',
            },
        ),
        migrations.CreateModel(
            name='CustomerWalletHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('wallet_balance_accruing', models.BigIntegerField(default=0)),
                ('wallet_balance_available', models.BigIntegerField(default=0)),
                ('wallet_balance_accruing_old', models.BigIntegerField(default=0)),
                ('wallet_balance_available_old', models.BigIntegerField(default=0)),
                ('wallet_delayed_amount', models.BigIntegerField(default=0)),
                ('change_reason', models.CharField(choices=[('loan_initial', 'Earned on Loan Start'), ('loan_paid_off', 'Earned from Loan'), ('payment_on_time', 'Payment on Time'), ('paid_back_to_customer', 'Paid back to Customer'), ('used_on_payment', 'Used on Payment'), ('cashback_over_paid', 'Cashback Over Paid'), ('used_buy_pulsa', 'Used buy pulsa'), ('refunded_buy_pulsa', 'Refunded buy pulsa'), ('used_transfer', 'Used Transfer'), ('refunded_transfer', 'Refunded Transfer'), ('agent_finance_adjustment', 'Agent Finance Adjustment'), ('gopay_transfer', 'Transfer GoPay'), ('refunded_transfer_gopay', 'Refunded Transfer GoPay')], max_length=50)),
                ('latest_flag', models.BooleanField(default=False)),
                ('event_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'customer_wallet_history',
            },
        ),
        migrations.CreateModel(
            name='CustomerWalletNote',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_wallet_note_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
            ],
            options={
                'db_table': 'customer_wallet_note',
            },
        ),
        migrations.CreateModel(
            name='DashboardBuckets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_120', models.IntegerField(default=0)),
                ('app_121', models.IntegerField(default=0)),
                ('app_122', models.IntegerField(default=0)),
                ('app_1220', models.IntegerField(default=0)),
                ('app_123', models.IntegerField(default=0)),
                ('app_125', models.IntegerField(default=0)),
                ('app_124', models.IntegerField(default=0)),
                ('app_1240', models.IntegerField(default=0)),
                ('app_126', models.IntegerField(default=0)),
                ('app_130', models.IntegerField(default=0)),
                ('app_132', models.IntegerField(default=0)),
                ('app_134', models.IntegerField(default=0)),
                ('app_145', models.IntegerField(default=0)),
                ('app_163', models.IntegerField(default=0)),
                ('app_164', models.IntegerField(default=0)),
                ('app_165', models.IntegerField(default=0)),
                ('app_150', models.IntegerField(default=0)),
                ('app_170', models.IntegerField(default=0)),
                ('app_175', models.IntegerField(default=0)),
                ('app_177', models.IntegerField(default=0)),
                ('app_180', models.IntegerField(default=0)),
                ('app_190', models.IntegerField(default=0)),
                ('app_cashback_request', models.IntegerField(default=0)),
                ('app_cashback_pending', models.IntegerField(default=0)),
                ('app_cashback_failed', models.IntegerField(default=0)),
                ('app_141', models.IntegerField(default=0)),
                ('app_105', models.IntegerField(default=0)),
                ('app_110', models.IntegerField(default=0)),
                ('app_131', models.IntegerField(default=0)),
                ('app_138', models.IntegerField(default=0)),
                ('app_1380', models.IntegerField(default=0)),
                ('app_140', models.IntegerField(default=0)),
                ('app_160', models.IntegerField(default=0)),
                ('app_162', models.IntegerField(default=0)),
                ('app_172', models.IntegerField(default=0)),
                ('app_181', models.IntegerField(default=0)),
                ('app_courtesy_call', models.IntegerField(default=0)),
                ('app_129', models.IntegerField(default=0)),
                ('app_189', models.IntegerField(default=0)),
                ('app_106', models.IntegerField(default=0)),
                ('app_111', models.IntegerField(default=0)),
                ('app_133', models.IntegerField(default=0)),
                ('app_135', models.IntegerField(default=0)),
                ('app_136', models.IntegerField(default=0)),
                ('app_137', models.IntegerField(default=0)),
                ('app_139', models.IntegerField(default=0)),
                ('app_142', models.IntegerField(default=0)),
                ('app_143', models.IntegerField(default=0)),
                ('app_161', models.IntegerField(default=0)),
                ('app_171', models.IntegerField(default=0)),
                ('app_priority_120', models.IntegerField(default=0)),
                ('app_priority_121', models.IntegerField(default=0)),
                ('app_priority_122', models.IntegerField(default=0)),
                ('app_priority_1220', models.IntegerField(default=0)),
                ('app_priority_123', models.IntegerField(default=0)),
                ('app_priority_125', models.IntegerField(default=0)),
                ('app_priority_124', models.IntegerField(default=0)),
                ('app_priority_1240', models.IntegerField(default=0)),
                ('app_priority_126', models.IntegerField(default=0)),
                ('app_priority_130', models.IntegerField(default=0)),
                ('app_priority_132', models.IntegerField(default=0)),
                ('app_priority_134', models.IntegerField(default=0)),
                ('app_priority_163', models.IntegerField(default=0)),
                ('app_priority_164', models.IntegerField(default=0)),
                ('app_priority_165', models.IntegerField(default=0)),
                ('app_priority_170', models.IntegerField(default=0)),
                ('app_priority_175', models.IntegerField(default=0)),
                ('app_priority_177', models.IntegerField(default=0)),
                ('app_priority_180', models.IntegerField(default=0)),
                ('app_priority_190', models.IntegerField(default=0)),
                ('app_priority_cashback_request', models.IntegerField(default=0)),
                ('app_priority_141', models.IntegerField(default=0)),
                ('app_priority_105', models.IntegerField(default=0)),
                ('app_priority_110', models.IntegerField(default=0)),
                ('app_priority_131', models.IntegerField(default=0)),
                ('app_priority_138', models.IntegerField(default=0)),
                ('app_priority_1380', models.IntegerField(default=0)),
                ('app_priority_140', models.IntegerField(default=0)),
                ('app_priority_160', models.IntegerField(default=0)),
                ('app_priority_162', models.IntegerField(default=0)),
                ('app_priority_172', models.IntegerField(default=0)),
                ('app_priority_181', models.IntegerField(default=0)),
                ('app_priority_courtesy_call', models.IntegerField(default=0)),
                ('app_priority_129', models.IntegerField(default=0)),
                ('app_priority_189', models.IntegerField(default=0)),
                ('app_priority_106', models.IntegerField(default=0)),
                ('app_priority_111', models.IntegerField(default=0)),
                ('app_priority_133', models.IntegerField(default=0)),
                ('app_priority_135', models.IntegerField(default=0)),
                ('app_priority_136', models.IntegerField(default=0)),
                ('app_priority_137', models.IntegerField(default=0)),
                ('app_priority_139', models.IntegerField(default=0)),
                ('app_priority_142', models.IntegerField(default=0)),
                ('app_priority_143', models.IntegerField(default=0)),
                ('app_priority_161', models.IntegerField(default=0)),
                ('app_priority_171', models.IntegerField(default=0)),
                ('loan_220', models.IntegerField(default=0)),
                ('loan_240', models.IntegerField(default=0)),
                ('loan_250', models.IntegerField(default=0)),
                ('loan_cycle_day_requested', models.IntegerField(default=0)),
                ('payment_330', models.IntegerField(default=0)),
                ('payment_331', models.IntegerField(default=0)),
                ('payment_332', models.IntegerField(default=0)),
                ('payment_T531', models.IntegerField(default=0)),
                ('payment_Tminus5', models.IntegerField(default=0)),
                ('payment_Tminus3', models.IntegerField(default=0)),
                ('payment_Tminus1', models.IntegerField(default=0)),
                ('payment_T0', models.IntegerField(default=0)),
                ('payment_T1to4', models.IntegerField(default=0)),
                ('payment_T5to30', models.IntegerField(default=0)),
                ('payment_Tplus30', models.IntegerField(default=0)),
                ('payment_TnotCalled', models.IntegerField(default=0)),
                ('payment_PTP', models.IntegerField(default=0)),
                ('payment_T5', models.IntegerField(default=0)),
                ('payment_T1', models.IntegerField(default=0)),
                ('payment_grab', models.IntegerField(default=0)),
                ('payment_whatsapp', models.IntegerField(default=0)),
                ('payment_Tminus5Robo', models.IntegerField(default=0)),
                ('payment_Tminus3Robo', models.IntegerField(default=0)),
                ('payment_whatsapp_blasted', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DataCheck',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='data_check_id', primary_key=True, serialize=False)),
                ('responsibility', models.CharField(max_length=100)),
                ('data_to_check', models.CharField(max_length=100)),
                ('is_okay', models.NullBooleanField()),
            ],
            options={
                'db_table': 'data_check',
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='decision_id', primary_key=True, serialize=False)),
                ('is_non_fraud', models.NullBooleanField()),
                ('is_able_to_pay', models.NullBooleanField()),
                ('is_willing_to_pay', models.NullBooleanField()),
                ('is_approved', models.NullBooleanField()),
                ('interest_rate', models.FloatField(blank=True, null=True)),
                ('origination_fee_pct', models.FloatField(blank=True, null=True)),
                ('late_fee_pct', models.FloatField(blank=True, null=True)),
                ('cashback_initial_pct', models.FloatField(blank=True, null=True)),
                ('cashback_payment_pct', models.FloatField(blank=True, null=True)),
                ('monthly_saving', models.BigIntegerField(blank=True, null=True)),
                ('saving_confidence_pct', models.FloatField(blank=True, null=True)),
                ('max_monthly_pmt', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'decision',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='device_id', primary_key=True, serialize=False)),
                ('gcm_reg_id', models.CharField(max_length=200)),
                ('android_id', models.CharField(blank=True, max_length=50)),
                ('imei', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'device',
            },
        ),
        migrations.CreateModel(
            name='DeviceGeolocation',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='device_geolocation_id', primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'device_geolocation',
            },
        ),
        migrations.CreateModel(
            name='DeviceIpHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='device_ip_history_id', primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('count', models.PositiveIntegerField()),
                ('path', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'device_ip_history',
                'verbose_name_plural': 'Device IP History',
            },
        ),
        migrations.CreateModel(
            name='DeviceScrapedData',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='device_scraped_data_id', primary_key=True, serialize=False)),
                ('url', models.CharField(blank=True, max_length=200, null=True)),
                ('file', models.FileField(blank=True, db_column='internal_path', null=True, upload_to=juloserver.julo.models.upload_to)),
                ('reports_url', models.CharField(blank=True, max_length=200)),
                ('file_type', models.CharField(blank=True, max_length=50, null=True)),
                ('service', models.CharField(choices=[('s3', 's3'), ('oss', 'oss')], default='s3', max_length=50)),
            ],
            options={
                'db_table': 'device_scraped_data',
            },
        ),
        migrations.CreateModel(
            name='DigisignConfiguration',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='digisign_configuration_id', primary_key=True, serialize=False)),
                ('product_selection', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'digisign_configuration',
            },
        ),
        migrations.CreateModel(
            name='DigisignConfigurationHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='digisign_configuration_history_id', primary_key=True, serialize=False)),
                ('product_selection', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'digisign_configuration_history',
            },
        ),
        migrations.CreateModel(
            name='DigitalSignatureFaceResult',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='digital_signature_face_result_id', primary_key=True, serialize=False)),
                ('face_recognition_provider', models.CharField(max_length=100)),
                ('digital_signature_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('is_used_for_registration', models.NullBooleanField()),
                ('is_passed', models.NullBooleanField()),
            ],
            options={
                'db_table': 'digital_signature_face_result',
            },
        ),
        migrations.CreateModel(
            name='Disbursement',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='disbursement_id', primary_key=True, serialize=False)),
                ('validation_status', models.CharField(max_length=50, null=True)),
                ('validation_id', models.CharField(max_length=250, null=True)),
                ('validated_name', models.CharField(max_length=250, null=True)),
                ('bank_code', models.CharField(max_length=50, null=True)),
                ('bank_number', models.CharField(blank=True, max_length=50, null=True)),
                ('disburse_status', models.CharField(max_length=50, null=True)),
                ('disburse_id', models.CharField(max_length=250, null=True)),
                ('disburse_amount', models.BigIntegerField(null=True)),
                ('external_id', models.BigIntegerField(blank=True, null=True)),
                ('retry_times', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'disbursement',
            },
        ),
        migrations.CreateModel(
            name='DisbursementTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_transaction_id', primary_key=True, serialize=False)),
                ('lender_disbursed', models.BigIntegerField(default=0)),
                ('borrower_received', models.BigIntegerField(default=0)),
                ('total_provision_received', models.BigIntegerField(default=0)),
                ('julo_provision_received', models.BigIntegerField(default=0)),
                ('lender_provision_received', models.BigIntegerField(default=0)),
                ('lender_balance_before', models.BigIntegerField(default=0)),
                ('lender_balance_after', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'disbursement_transaction',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='document_id', primary_key=True, serialize=False)),
                ('document_source', models.BigIntegerField(db_column='document_source_id')),
                ('url', models.CharField(max_length=200)),
                ('service', models.CharField(choices=[('s3', 's3'), ('oss', 'oss')], default='oss', max_length=50)),
                ('document_type', models.CharField(max_length=50)),
                ('filename', models.CharField(blank=True, max_length=200, null=True)),
                ('application_xid', models.BigIntegerField(blank=True, db_index=True, null=True)),
            ],
            options={
                'db_table': 'document',
            },
        ),
        migrations.CreateModel(
            name='DokuTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='doku_transaction_id', primary_key=True, serialize=False)),
                ('transaction_id', models.CharField(max_length=20, unique=True)),
                ('reference_id', models.CharField(max_length=100, unique=True)),
                ('account_id', models.CharField(max_length=50)),
                ('transaction_date', models.DateTimeField()),
                ('amount', models.BigIntegerField()),
                ('transaction_type', models.CharField(max_length=10)),
                ('is_processed', models.NullBooleanField()),
            ],
            options={
                'db_table': 'doku_transaction',
            },
        ),
        migrations.CreateModel(
            name='EarlyPaybackOffer',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='early_payback_offer_id', primary_key=True, serialize=False)),
                ('is_fdc_risky', models.NullBooleanField()),
                ('cycle_number', models.IntegerField()),
                ('promo_date', models.DateField()),
                ('dpd', models.IntegerField(blank=True, null=True)),
                ('email_status', models.CharField(max_length=50)),
                ('paid_off_indicator', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'early_payback_offer',
            },
        ),
        migrations.CreateModel(
            name='EmailAttachments',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='email_attachment_id', primary_key=True, serialize=False)),
                ('attachment', models.FileField(upload_to='uploads/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='email_history_id', primary_key=True, serialize=False)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('sg_message_id', models.CharField(blank=True, max_length=150, null=True)),
                ('to_email', models.TextField(blank=True, null=True)),
                ('cc_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('subject', models.CharField(blank=True, max_length=250, null=True)),
                ('message_content', models.TextField(blank=True, null=True)),
                ('template_code', models.CharField(blank=True, max_length=250, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'email_history',
            },
        ),
        migrations.CreateModel(
            name='EmailSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='email_setting_id', primary_key=True, serialize=False)),
                ('status_code', models.CharField(blank=True, max_length=10, null=True)),
                ('partner_email_content', tinymce.models.HTMLField(blank=True, null=True)),
                ('customer_email_content', tinymce.models.HTMLField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'email_setting',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='experiment_id', primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=400)),
                ('description', models.TextField(blank=True, null=True)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.CharField(max_length=400)),
            ],
            options={
                'db_table': 'experiment',
            },
        ),
        migrations.CreateModel(
            name='ExperimentAction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='experiment_action_id', primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=100)),
                ('value', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'experiment_action',
            },
        ),
        migrations.CreateModel(
            name='ExperimentSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='experiment_setting_id', primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=250)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('schedule', models.CharField(blank=True, max_length=10, null=True)),
                ('action', models.CharField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(max_length=50)),
                ('criteria', django.contrib.postgres.fields.jsonb.JSONField()),
                ('is_active', models.BooleanField(default=False)),
                ('is_permanent', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'experiment_setting',
            },
        ),
        migrations.CreateModel(
            name='ExperimentTestGroup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='experiment_test_group_id', primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=100)),
                ('value', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'experiment_test_group',
            },
        ),
        migrations.CreateModel(
            name='FacebookData',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='facebook_data_id', primary_key=True, serialize=False)),
                ('facebook_id', models.BigIntegerField()),
                ('fullname', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('friend_count', models.IntegerField(blank=True, null=True)),
                ('open_date', models.DateField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'facebook_data',
            },
        ),
        migrations.CreateModel(
            name='FacebookDataHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('facebook_id', models.BigIntegerField()),
                ('fullname', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('friend_count', models.IntegerField(blank=True, null=True)),
                ('open_date', models.DateField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'detailed_fb_change',
            },
        ),
        migrations.CreateModel(
            name='FaceRecognition',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='face_recognition_id', primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('quality_filter', models.CharField(blank=True, choices=[('LOW', 'LOW'), ('MEDIUM', 'MEDIUM'), ('HIGH', 'HIGH')], max_length=10, null=True)),
                ('sharpness', models.IntegerField(blank=True, null=True)),
                ('brightness', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'face_recognition',
            },
        ),
        migrations.CreateModel(
            name='FaqItem',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='faq_item_id', primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=250)),
                ('link_url', models.URLField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('rich_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=250, null=True)),
                ('order_priority', models.IntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('order_priority', 'visible'),
                'db_table': 'faq_item',
            },
            bases=(juloserver.julo.models.GetInstanceMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FaqSection',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='faq_section_id', primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250)),
                ('order_priority', models.IntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('order_priority', 'visible'),
                'db_table': 'faq_section',
            },
        ),
        migrations.CreateModel(
            name='FaqSubTitle',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='faq_subtitle_id', primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250)),
                ('link_url', models.URLField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('rich_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('order_priority', models.IntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('order_priority', 'visible'),
                'db_table': 'faq_subtitle',
            },
        ),
        migrations.CreateModel(
            name='FasPayTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='faspay_transaction_id', primary_key=True, serialize=False)),
                ('transaction_id', models.CharField(blank=True, max_length=16, null=True, unique=True)),
                ('amount', models.BigIntegerField(blank=True, null=True)),
                ('is_processed', models.NullBooleanField(default=False)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('status_desc', models.CharField(blank=True, max_length=60, null=True)),
                ('transaction_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'faspay_transaction',
            },
        ),
        migrations.CreateModel(
            name='FDCDelivery',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_delivery_id', primary_key=True, serialize=False)),
                ('count_of_record', models.BigIntegerField(blank=True, null=True)),
                ('status', models.CharField(default='pending', max_length=100)),
                ('generated_filename', models.CharField(max_length=100)),
                ('error', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'fdc_delivery',
            },
        ),
        migrations.CreateModel(
            name='FDCDeliveryTemp',
            fields=[
                ('id', models.AutoField(db_column='fdc_delivery_id', primary_key=True, serialize=False)),
                ('dpd_max', models.IntegerField(blank=True, null=True)),
                ('dpd_terakhir', models.IntegerField(blank=True, null=True)),
                ('id_penyelenggara', models.IntegerField(blank=True, null=True)),
                ('jenis_pengguna', models.IntegerField(blank=True, null=True)),
                ('kualitas_pinjaman', models.IntegerField(blank=True, null=True)),
                ('nama_borrower', models.CharField(blank=True, max_length=100, null=True)),
                ('nilai_pendanaan', models.BigIntegerField(blank=True, null=True)),
                ('no_identitas', models.CharField(blank=True, db_index=True, max_length=16, null=True)),
                ('no_npwp', models.TextField(blank=True, null=True)),
                ('sisa_pinjaman_berjalan', models.BigIntegerField(blank=True, null=True)),
                ('status_pinjaman', models.TextField(blank=True, null=True)),
                ('tgl_jatuh_tempo_pinjaman', models.TextField(blank=True, null=True)),
                ('tgl_pelaporan_data', models.TextField(blank=True, null=True)),
                ('tgl_penyaluran_dana', models.TextField(blank=True, null=True)),
                ('tgl_perjanjian_borrower', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fdc_delivery_temp',
            },
        ),
        migrations.CreateModel(
            name='FDCInquiry',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_inquiry_id', primary_key=True, serialize=False)),
                ('inquiry_reason', models.CharField(blank=True, max_length=150, null=True)),
                ('nik', models.CharField(blank=True, max_length=16, null=True)),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('inquiry_status', models.CharField(blank=True, default='pending', max_length=50, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('application_status_code', models.IntegerField(blank=True, null=True)),
                ('loan_status_code', models.IntegerField(blank=True, null=True)),
                ('inquiry_date', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'fdc_inquiry',
            },
        ),
        migrations.CreateModel(
            name='FDCInquiryCheck',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_inquiry_check_id', primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=False)),
                ('min_threshold', models.FloatField()),
                ('max_threshold', models.FloatField()),
                ('min_tidak_lancar', models.IntegerField(default=0)),
                ('min_macet', models.IntegerField(default=0)),
                ('max_paid_pct', models.FloatField(default=0)),
            ],
            options={
                'db_table': 'fdc_inquiry_check',
            },
        ),
        migrations.CreateModel(
            name='FDCInquiryLoan',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_inquiry_loan_id', primary_key=True, serialize=False)),
                ('dpd_max', models.IntegerField(blank=True, null=True)),
                ('dpd_terakhir', models.IntegerField(blank=True, null=True)),
                ('id_penyelenggara', models.CharField(blank=True, max_length=50, null=True)),
                ('jenis_pengguna', models.CharField(blank=True, max_length=50, null=True)),
                ('kualitas_pinjaman', models.CharField(blank=True, max_length=50, null=True)),
                ('nama_borrower', models.CharField(blank=True, max_length=100, null=True)),
                ('nilai_pendanaan', models.BigIntegerField(blank=True, null=True)),
                ('no_identitas', models.CharField(blank=True, max_length=16, null=True)),
                ('no_npwp', models.CharField(blank=True, max_length=20, null=True)),
                ('sisa_pinjaman_berjalan', models.BigIntegerField(blank=True, null=True)),
                ('status_pinjaman', models.CharField(blank=True, max_length=20, null=True)),
                ('tgl_jatuh_tempo_pinjaman', models.DateField(blank=True, null=True)),
                ('tgl_pelaporan_data', models.DateField(blank=True, null=True)),
                ('tgl_penyaluran_dana', models.DateField(blank=True, null=True)),
                ('tgl_perjanjian_borrower', models.DateField(blank=True, null=True)),
                ('is_julo_loan', models.NullBooleanField()),
            ],
            options={
                'db_table': 'fdc_inquiry_loan',
            },
        ),
        migrations.CreateModel(
            name='FDCInquiryRun',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_inquiry_run_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'fdc_inquiry_run',
            },
        ),
        migrations.CreateModel(
            name='FDCRiskyHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_risky_history_id', primary_key=True, serialize=False)),
                ('dpd', models.IntegerField(blank=True, null=True)),
                ('is_fdc_risky', models.NullBooleanField()),
            ],
            options={
                'db_table': 'fdc_risky_history',
            },
        ),
        migrations.CreateModel(
            name='FDCValidationError',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fdc_validation_error_id', primary_key=True, serialize=False)),
                ('row_number', models.BigIntegerField(blank=True, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('id_borrower', models.BigIntegerField(blank=True, null=True)),
                ('id_pinjaman', models.BigIntegerField(blank=True, null=True)),
                ('filename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'fdc_validation_error',
            },
        ),
        migrations.CreateModel(
            name='FeatureSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='feature_setting_id', primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('category', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'feature_setting',
            },
        ),
        migrations.CreateModel(
            name='FraudModelExperiment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='fraud_model_experiment_id', primary_key=True, serialize=False)),
                ('fraud_model_check', models.BooleanField(default=False)),
                ('advance_ai_blacklist', models.BooleanField(default=False)),
                ('fraud_model_value', models.FloatField(blank=True, null=True)),
                ('is_fraud_experiment_period', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'fraud_model_experiment',
            },
        ),
        migrations.CreateModel(
            name='FrontendView',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('label_name', models.CharField(max_length=200)),
                ('label_value', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'frontend_view',
            },
        ),
        migrations.CreateModel(
            name='HighScoreFullBypass',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='high_score_full_bypass_id', primary_key=True, serialize=False)),
                ('cm_version', models.CharField(default=None, max_length=200, null=True)),
                ('threshold', models.FloatField()),
                ('is_premium_area', models.BooleanField(default=True)),
                ('is_salaried', models.BooleanField(default=True)),
                ('customer_category', models.CharField(choices=[(b'julo', b'julo'), (b'julo_repeat', b'julo_repeat'), (b'webapp', b'webapp')], max_length=50)),
            ],
            options={
                'db_table': 'high_score_full_bypass',
                'verbose_name_plural': 'High Score Full Bypass',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='image_id', primary_key=True, serialize=False)),
                ('image_source', models.BigIntegerField(db_column='image_source_id')),
                ('image_type', models.CharField(max_length=50)),
                ('url', models.CharField(max_length=200)),
                ('thumbnail_url', models.CharField(max_length=200)),
                ('service', models.CharField(choices=[('s3', 's3'), ('oss', 'oss')], default='oss', max_length=50)),
                ('image_status', models.IntegerField(blank=True, choices=[(-1, 'Deleted'), (0, 'Current'), (1, 'Resubmission Required')], default=0, null=True)),
                ('image', models.ImageField(blank=True, db_column='internal_path', null=True, upload_to=juloserver.julo.models.upload_to)),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='ITIConfiguration',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='iti_configuration_id', primary_key=True, serialize=False)),
                ('iti_version', models.IntegerField()),
                ('min_threshold', models.FloatField()),
                ('max_threshold', models.FloatField()),
                ('min_income', models.BigIntegerField()),
                ('max_income', models.BigIntegerField()),
                ('is_active', models.BooleanField(default=False)),
                ('is_premium_area', models.BooleanField(default=True)),
                ('is_salaried', models.BooleanField(default=True)),
                ('customer_category', models.CharField(choices=[(b'julo', b'julo'), (b'julo_repeat', b'julo_repeat'), (b'webapp', b'webapp')], default='julo', max_length=50)),
            ],
            options={
                'db_table': 'iti_configuration',
                'verbose_name_plural': 'ITI Configuration',
            },
        ),
        migrations.CreateModel(
            name='JobType',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='job_type_id', primary_key=True, serialize=False)),
                ('job_type', models.CharField(max_length=100)),
                ('is_salaried', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'job_type',
            },
        ),
        migrations.CreateModel(
            name='JuloContactDetail',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='julo_contact_details_id', primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=250)),
                ('link_url', models.URLField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('show_image', models.BooleanField(default=True)),
                ('description', models.TextField()),
                ('rich_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('chat_availability', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('email_ids', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, null=True, size=None)),
                ('phone_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')]), blank=True, null=True, size=None)),
                ('contact_us_text', models.CharField(blank=True, max_length=250, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('order_priority', models.IntegerField(default=0)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'julo_contact_detail',
            },
        ),
        migrations.CreateModel(
            name='JuloCustomerEmailSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='julo_customer_email_setting_id', primary_key=True, serialize=False)),
                ('send_email', models.BooleanField(default=False)),
                ('attach_sphp', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'julo_customer_email_setting',
            },
        ),
        migrations.CreateModel(
            name='KycRequest',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='kyc_request_id', primary_key=True, serialize=False)),
                ('eform_voucher', models.CharField(blank=True, max_length=60, null=True, unique=True)),
                ('expiry_time', models.DateTimeField(blank=True, null=True)),
                ('is_processed', models.NullBooleanField(default=False)),
            ],
            options={
                'db_table': 'kyc_request',
            },
        ),
        migrations.CreateModel(
            name='LenderBalance',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_balance_id', primary_key=True, serialize=False)),
                ('total_deposit', models.BigIntegerField(default=0)),
                ('total_withdrawal', models.BigIntegerField(default=0)),
                ('total_disbursed_principal', models.BigIntegerField(default=0)),
                ('total_received', models.BigIntegerField(default=0)),
                ('total_received_principal', models.BigIntegerField(default=0)),
                ('total_received_interest', models.BigIntegerField(default=0)),
                ('total_received_late_fee', models.BigIntegerField(default=0)),
                ('total_received_provision', models.BigIntegerField(default=0)),
                ('total_paidout', models.BigIntegerField(default=0)),
                ('total_paidout_principal', models.BigIntegerField(default=0)),
                ('total_paidout_interest', models.BigIntegerField(default=0)),
                ('total_paidout_late_fee', models.BigIntegerField(default=0)),
                ('total_paidout_provision', models.BigIntegerField(default=0)),
                ('available_balance', models.BigIntegerField(default=0)),
                ('outstanding_principal', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'lender_balance',
            },
        ),
        migrations.CreateModel(
            name='LenderBalanceEvent',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_balance_event_id', primary_key=True, serialize=False)),
                ('amount', models.BigIntegerField()),
                ('before_amount', models.BigIntegerField()),
                ('after_amount', models.BigIntegerField()),
                ('type', models.CharField(choices=[('deposit', 'deposit'), ('withdraw', 'withdraw')], max_length=50)),
            ],
            options={
                'db_table': 'lender_balance_event',
            },
        ),
        migrations.CreateModel(
            name='LenderCustomerCriteria',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_customer_criteria_id', primary_key=True, serialize=False)),
                ('min_age', models.IntegerField(blank=True, null=True)),
                ('max_age', models.IntegerField(blank=True, null=True)),
                ('min_income', models.BigIntegerField(blank=True, null=True)),
                ('max_income', models.BigIntegerField(blank=True, null=True)),
                ('job_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('job_industry', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('job_description', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('location', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('credit_score', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), blank=True, null=True, size=None)),
                ('loan_purpose', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('company_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
            ],
            options={
                'db_table': 'lender_customer_criteria',
            },
        ),
        migrations.CreateModel(
            name='LenderDisburseCounter',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_disburse_counter_id', primary_key=True, serialize=False)),
                ('actual_count', models.BigIntegerField(default=0)),
                ('rounded_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'lender_counter',
            },
        ),
        migrations.CreateModel(
            name='LenderProductCriteria',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_product_criteria_id', primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Product Definition', 'Product Definition'), ('Product List', 'Product List')], max_length=50)),
                ('product_profile_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('min_amount', models.BigIntegerField(blank=True, null=True)),
                ('max_amount', models.BigIntegerField(blank=True, null=True)),
                ('min_duration', models.IntegerField(blank=True, null=True)),
                ('max_duration', models.IntegerField(blank=True, null=True)),
                ('min_interest_rate', models.FloatField(blank=True, null=True)),
                ('max_interest_rate', models.FloatField(blank=True, null=True)),
                ('min_origination_fee', models.FloatField(blank=True, null=True)),
                ('max_origination_fee', models.FloatField(blank=True, null=True)),
                ('min_late_fee', models.FloatField(blank=True, null=True)),
                ('max_late_fee', models.FloatField(blank=True, null=True)),
                ('min_cashback_initial', models.FloatField(blank=True, null=True)),
                ('max_cashback_initial', models.FloatField(blank=True, null=True)),
                ('min_cashback_payment', models.FloatField(blank=True, null=True)),
                ('max_cashback_payment', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lender_product_criteria',
            },
        ),
        migrations.CreateModel(
            name='LenderServiceRate',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_service_rate_id', primary_key=True, serialize=False)),
                ('provision_rate', models.FloatField()),
                ('principal_rate', models.FloatField()),
                ('interest_rate', models.FloatField()),
                ('late_fee_rate', models.FloatField()),
            ],
            options={
                'db_table': 'lender_service_rate',
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_id', primary_key=True, serialize=False)),
                ('loan_amount', models.BigIntegerField()),
                ('loan_duration', models.IntegerField()),
                ('sphp_sent_ts', models.DateTimeField(blank=True, null=True)),
                ('sphp_accepted_ts', models.DateTimeField(blank=True, null=True)),
                ('first_installment_amount', models.BigIntegerField()),
                ('installment_amount', models.BigIntegerField()),
                ('cashback_earned_total', models.BigIntegerField(default=0)),
                ('initial_cashback', models.BigIntegerField(default=0)),
                ('loan_disbursement_amount', models.BigIntegerField(default=0)),
                ('loan_disbursement_method', models.TextField(blank=True, null=True)),
                ('fund_transfer_ts', models.DateTimeField(blank=True, null=True)),
                ('julo_bank_name', models.CharField(blank=True, max_length=250)),
                ('julo_bank_branch', models.CharField(blank=True, max_length=100)),
                ('julo_bank_account_number', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(message='Bank account number has to be numeric digits', regex='^[0-9]+$')])),
                ('cycle_day', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(28)])),
                ('cycle_day_change_date', models.DateField(blank=True, null=True)),
                ('cycle_day_requested', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(28)])),
                ('cycle_day_requested_date', models.DateField(blank=True, null=True)),
                ('is_ignore_calls', models.BooleanField(default=False)),
                ('name_bank_validation_id', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('disbursement_id', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=100, null=True)),
                ('is_restructured', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'loan',
            },
        ),
        migrations.CreateModel(
            name='LoanDisburseInvoices',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_disburse_invoices_id', primary_key=True, serialize=False)),
                ('disbursement_id', models.BigIntegerField(blank=True, null=True)),
                ('name_bank_validation_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'loan_disburse_invoices',
            },
        ),
        migrations.CreateModel(
            name='LoanPurpose',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_purpose_id', primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=20)),
                ('purpose', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'loan_purpose',
            },
        ),
        migrations.CreateModel(
            name='LoanStatusChange',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('change_reason', models.CharField(default='system_triggered', max_length=100)),
                ('id', models.AutoField(db_column='loan_status_change_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'loan_status_change',
            },
        ),
        migrations.CreateModel(
            name='Mantri',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='mantri_id', primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=20, null=True)),
            ],
            options={
                'db_table': 'mantri',
            },
        ),
        migrations.CreateModel(
            name='MarginOfError',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='margin_of_error_id', primary_key=True, serialize=False)),
                ('min_threshold', models.BigIntegerField()),
                ('max_threshold', models.BigIntegerField()),
                ('mae', models.BigIntegerField()),
            ],
            options={
                'db_table': 'margin_of_error',
            },
        ),
        migrations.CreateModel(
            name='MassMoveApplicationsHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='mass_move_applications_history_id', primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=200, unique=True)),
                ('result', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'mass_move_applications_history_id',
            },
        ),
        migrations.CreateModel(
            name='MobileFeatureSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='mobile_feature_setting_id', primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mobile_feature_setting',
            },
        ),
        migrations.CreateModel(
            name='MobileOperator',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='mobile_operator_id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('initial_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, null=True, size=None)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'mobile_operator',
            },
        ),
        migrations.CreateModel(
            name='NexmoAutocallHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='nexmo_autocall_history_id', primary_key=True, serialize=False)),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('auto_call_result_status', models.CharField(blank=True, max_length=50, null=True)),
                ('conversation_uuid', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'nexmo_autocall_history',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='note_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
            ],
            options={
                'db_table': 'note',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='notification_id', primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('body', models.TextField()),
                ('click_action', models.CharField(blank=True, default='com.julofinance.juloapp_HOME', max_length=200)),
                ('destination_page', models.CharField(choices=[('com.julofinance.juloapp_HOME| ', 'Home Screen'), ('com.julofinance.juloapp_HOME|activity_loan', 'Activity Screen - activity_loan'), ('com.julofinance.juloapp_HOME|loc_installment', 'Activity Screen - loc_installment'), ('com.julofinance.juloapp_HOME|scrape_status', 'Product selection - scrape_status'), ('com.julofinance.juloapp_HOME|product_selection', 'Product selection - product_selection'), ('com.julofinance.juloapp_CASHBACK_RESULT|cashback_transaction', 'Cashback Activity'), ('com.julofinance.juloapp_HOME|rating_page', 'Rating popup Home Screen'), ('com.julofinance.juloapp_REGISTER_V3|register_v3', 'Application v3 Main Page'), ('com.julofinance.juloapp_HOME|sphp_page', 'SPHP'), ('com.julofinance.juloapp_HOME|document_v3', 'Document Submission'), ('com.julofinance.juloapp_HOME|rating_playstore', 'Rating popup Play Store')], max_length=100)),
                ('notification_code', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'notification_templates',
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='offer_id', primary_key=True, serialize=False)),
                ('offer_number', models.IntegerField()),
                ('loan_amount_offer', models.BigIntegerField()),
                ('loan_duration_offer', models.IntegerField()),
                ('installment_amount_offer', models.BigIntegerField()),
                ('is_accepted', models.NullBooleanField()),
                ('offer_sent_ts', models.DateTimeField(blank=True, null=True)),
                ('offer_accepted_ts', models.DateTimeField(blank=True, null=True)),
                ('offer_exp_date', models.DateField(blank=True, null=True)),
                ('first_payment_date', models.DateField()),
                ('first_installment_amount', models.BigIntegerField()),
                ('last_installment_amount', models.BigIntegerField(blank=True, null=True)),
                ('is_approved', models.NullBooleanField()),
                ('special_first_payment_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'offer',
            },
        ),
        migrations.CreateModel(
            name='OpsTeamLeadStatusChange',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='ops_team_lead_status_change_id', primary_key=True, serialize=False)),
                ('change_reason', models.CharField(default='system_triggered', max_length=100)),
                ('change_reason_detail', models.CharField(default='system_triggered', max_length=255)),
            ],
            options={
                'db_table': 'ops_team_lead_status_change',
            },
        ),
        migrations.CreateModel(
            name='OriginalPassword',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('original_password', models.CharField(max_length=128)),
                ('temporary_password', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'db_table': 'original_password',
            },
        ),
        migrations.CreateModel(
            name='OtpRequest',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='otp_request_id', primary_key=True, serialize=False)),
                ('request_id', models.CharField(max_length=50)),
                ('otp_token', models.CharField(max_length=6)),
                ('is_used', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'otp_request',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True)),
                ('token', models.CharField(blank=True, max_length=256, null=True)),
                ('systrace', models.CharField(blank=True, max_length=256, null=True)),
                ('type', models.CharField(blank=True, choices=[('referrer', 'referrer'), ('receiver', 'receiver'), ('lender', 'lender')], max_length=50, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('npwp', models.CharField(blank=True, max_length=20, null=True)),
                ('poc_name', models.CharField(blank=True, max_length=100, null=True)),
                ('poc_email', models.CharField(blank=True, max_length=100, null=True)),
                ('poc_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True)),
                ('source_of_fund', models.CharField(blank=True, max_length=256, null=True)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('company_address', models.CharField(blank=True, max_length=512, null=True)),
                ('business_type', models.CharField(blank=True, max_length=100, null=True)),
                ('agreement_letter_number', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'partner',
            },
        ),
        migrations.CreateModel(
            name='PartnerAccountAttribution',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_account_attribution_id', primary_key=True, serialize=False)),
                ('partner_account_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'partner_account_attribution',
            },
        ),
        migrations.CreateModel(
            name='PartnerAccountAttributionSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_account_attribution_setting_id', primary_key=True, serialize=False)),
                ('is_uniqe', models.BooleanField(default=True)),
                ('is_blank', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'partner_account_attribution_setting',
            },
        ),
        migrations.CreateModel(
            name='PartnerAddress',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_address_id', primary_key=True, serialize=False)),
                ('address_type', models.CharField(blank=True, choices=[('home_1', 'home_1'), ('home_2', 'home_2'), ('work_1', 'work_1'), ('work_2', 'work_2')], max_length=50, null=True)),
                ('address_street_num', models.CharField(blank=True, max_length=100, null=True)),
                ('address_provinsi', models.CharField(blank=True, max_length=100, null=True)),
                ('address_kabupaten', models.CharField(blank=True, max_length=100, null=True)),
                ('address_kecamatan', models.CharField(blank=True, max_length=100, null=True)),
                ('address_kelurahan', models.CharField(blank=True, max_length=100, null=True)),
                ('address_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
            ],
            options={
                'db_table': 'partner_address',
            },
        ),
        migrations.CreateModel(
            name='PartnerBankAccount',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_bank_account_id', primary_key=True, serialize=False)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('name_in_bank', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('phone_number', juloserver.julo.models.NoValidatePhoneNumberField(max_length=128)),
                ('distribution', models.FloatField(blank=True, null=True)),
                ('name_bank_validation_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'partner_bank_account',
            },
        ),
        migrations.CreateModel(
            name='PartnerEmailSetting',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_email_setting_id', primary_key=True, serialize=False)),
                ('send_to_partner_customer', models.BooleanField(default=False)),
                ('send_to_partner', models.BooleanField(default=False)),
                ('partner_email_list', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, null=True, size=None)),
                ('attach_sphp_partner_customer', models.BooleanField(default=False)),
                ('attach_sphp_partner', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'partner_email_setting',
            },
        ),
        migrations.CreateModel(
            name='PartnerLoan',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_loan_id', primary_key=True, serialize=False)),
                ('agreement_number', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('approval_status', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('loan_amount', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'partner_loan',
            },
        ),
        migrations.CreateModel(
            name='PartnerOriginationData',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.IntegerField(db_column='partner_origination_data_id', primary_key=True, serialize=False, verbose_name='distributor')),
                ('distributor_name', models.CharField(default='-', max_length=100)),
                ('origination_fee', models.FloatField(default=0.01)),
            ],
            options={
                'db_table': 'partner_origination_data',
            },
        ),
        migrations.CreateModel(
            name='PartnerPurchaseItem',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_bank_account_id', primary_key=True, serialize=False)),
                ('application_xid', models.BigIntegerField(blank=True, null=True)),
                ('device_name', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('device_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('device_trade', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('down_payment', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('admin_fee', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('agent_id', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('store_id', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('invoices', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('package_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('package_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('insurance_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('insurance_price', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('e_policy_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('imei_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('contract_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
            ],
            options={
                'db_table': 'partner_purchase_item',
            },
        ),
        migrations.CreateModel(
            name='PartnerReferral',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_referral_id', primary_key=True, serialize=False)),
                ('cust_fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('cust_dob', models.DateField(blank=True, null=True)),
                ('cust_nik', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('cust_npwp', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='NPWP has to be 15 numeric digits', regex='^[0-9]{15}$')])),
                ('cust_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True)),
                ('account_tenure_mth', models.PositiveIntegerField(blank=True, null=True)),
                ('past_gmv', models.BigIntegerField(blank=True, null=True)),
                ('past_purchase_count', models.PositiveIntegerField(blank=True, null=True)),
                ('partner_account_id', models.CharField(blank=True, max_length=50, null=True)),
                ('kyc_indicator', models.NullBooleanField()),
                ('is_android_user', models.NullBooleanField()),
                ('pre_exist', models.NullBooleanField()),
                ('loan_amount_request', models.BigIntegerField(blank=True, null=True)),
                ('loan_duration_request', models.IntegerField(blank=True, null=True)),
                ('loan_purpose', models.CharField(blank=True, max_length=100, null=True, verbose_name='Tujuan pinjaman')),
                ('loan_purpose_desc', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marketing_source', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Dari mana tahu')),
                ('payday', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(28)])),
                ('referral_code', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_own_phone', models.NullBooleanField()),
                ('gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin')),
                ('occupied_since', models.DateField(blank=True, null=True)),
                ('home_status', models.CharField(blank=True, choices=[('Kontrak', 'Kontrak'), ('Kos', 'Kos'), ('Milik orang tua', 'Milik orang tua'), ('Milik keluarga', 'Milik keluarga'), ('Milik sendiri, lunas', 'Milik sendiri, lunas'), ('Milik sendiri, mencicil', 'Milik sendiri, mencicil'), ('Lainnya', 'Lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status domisili')),
                ('landlord_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('mobile_phone_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('has_whatsapp_1', models.NullBooleanField()),
                ('mobile_phone_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('has_whatsapp_2', models.NullBooleanField()),
                ('bbm_pin', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('twitter_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('instagram_username', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('marital_status', models.CharField(blank=True, choices=[('Lajang', 'Lajang'), ('Menikah', 'Menikah'), ('Cerai', 'Cerai'), ('Janda / duda', 'Janda / duda')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Status sipil')),
                ('dependent', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Jumlah tanggungan')),
                ('spouse_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('spouse_dob', models.DateField(blank=True, null=True)),
                ('spouse_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('spouse_has_whatsapp', models.NullBooleanField()),
                ('kin_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('kin_dob', models.DateField(blank=True, null=True)),
                ('kin_gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin kerabat')),
                ('kin_mobile_phone', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('kin_relationship', models.CharField(blank=True, choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Hubungan kerabat')),
                ('job_type', models.CharField(blank=True, choices=[('Pegawai swasta', 'Pegawai swasta'), ('Pegawai negeri', 'Pegawai negeri'), ('Pengusaha', 'Pengusaha'), ('Freelance', 'Freelance'), ('Pekerja rumah tangga', 'Pekerja rumah tangga'), ('Lainnya', 'Lainnya'), ('Staf rumah tangga', 'Staf rumah tangga'), ('Ibu rumah tangga', 'Ibu rumah tangga'), ('Mahasiswa', 'Mahasiswa'), ('Tidak bekerja', 'Tidak bekerja')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Tipe pekerjaan')),
                ('job_industry', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_function', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_description', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('work_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('job_start', models.DateField(blank=True, null=True)),
                ('monthly_income', models.BigIntegerField(blank=True, null=True)),
                ('last_education', models.CharField(blank=True, choices=[('SD', 'SD'), ('SLTP', 'SLTP'), ('SLTA', 'SLTA'), ('Diploma', 'Diploma'), ('S1', 'S1'), ('S2', 'S2'), ('S3', 'S3')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Pendidikan terakhir')),
                ('college', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('major', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('has_other_income', models.BooleanField(default=False)),
                ('other_income_amount', models.BigIntegerField(blank=True, null=True)),
                ('other_income_source', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('monthly_housing_cost', models.BigIntegerField(blank=True, null=True)),
                ('monthly_expenses', models.BigIntegerField(blank=True, null=True)),
                ('total_current_debt', models.BigIntegerField(blank=True, null=True)),
                ('vehicle_type_1', models.CharField(blank=True, choices=[('Sepeda motor', 'Sepeda motor'), ('Mobil', 'Mobil'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kendaraan pribadi 1')),
                ('vehicle_ownership_1', models.CharField(blank=True, choices=[('Lunas', 'Lunas'), ('Mencicil', 'Mencicil'), ('Diagunkan', 'Diagunkan'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Kepemilikan 1')),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_branch', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('name_in_bank', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('application_xid', models.BigIntegerField(blank=True, null=True)),
                ('reminder_email_sent', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'partner_referral',
            },
        ),
        migrations.CreateModel(
            name='PartnerReportEmail',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_report_email_id', primary_key=True, serialize=False)),
                ('sql_query', models.TextField(blank=True, null=True)),
                ('email_subject', models.TextField(blank=True, null=True)),
                ('email_content', models.TextField(blank=True, null=True)),
                ('email_recipients', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'partner_report_email',
            },
        ),
        migrations.CreateModel(
            name='PartnerTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_transaction_id', primary_key=True, serialize=False)),
                ('transaction_date', models.DateField(blank=True, null=True)),
                ('transaction_amount', models.BigIntegerField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('is_current', models.NullBooleanField()),
            ],
            options={
                'db_table': 'partner_transaction',
            },
        ),
        migrations.CreateModel(
            name='PartnerTransactionItem',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='partner_transaction_item_id', primary_key=True, serialize=False)),
                ('item_name', models.CharField(blank=True, max_length=250, null=True)),
                ('item_price', models.BigIntegerField(blank=True, null=True)),
                ('item_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('product_category', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'partner_transaction_item',
            },
        ),
        migrations.CreateModel(
            name='PaybackTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payback_transaction_id', primary_key=True, serialize=False)),
                ('transaction_id', models.CharField(blank=True, max_length=36, null=True, unique=True)),
                ('payback_service', models.CharField(blank=True, choices=[('faspay', 'Faspay'), ('gopay', 'GoPay')], max_length=10, null=True)),
                ('amount', models.BigIntegerField(blank=True, null=True)),
                ('is_processed', models.NullBooleanField(default=False)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('status_desc', models.CharField(blank=True, max_length=60, null=True)),
                ('transaction_date', models.DateTimeField(blank=True, null=True)),
                ('virtual_account', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Virtual account has to be numeric digits', regex='^[0-9]+$')])),
            ],
            options={
                'db_table': 'payback_transaction',
            },
        ),
        migrations.CreateModel(
            name='PaybackTransactionStatusHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payback_transaction_status_history_id', primary_key=True, serialize=False)),
                ('old_status_code', models.IntegerField(blank=True, null=True)),
                ('new_status_code', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payback_transaction_status_history',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_id', primary_key=True, serialize=False)),
                ('payment_number', models.IntegerField()),
                ('due_date', models.DateField(null=True)),
                ('ptp_date', models.DateField(blank=True, null=True)),
                ('ptp_robocall_phone_number', models.CharField(blank=True, max_length=18, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_ptp_robocall_active', models.NullBooleanField()),
                ('due_amount', models.BigIntegerField()),
                ('installment_principal', models.BigIntegerField(default=0)),
                ('installment_interest', models.BigIntegerField(default=0)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('paid_amount', models.BigIntegerField(blank=True, default=0)),
                ('redeemed_cashback', models.BigIntegerField(default=0)),
                ('cashback_earned', models.BigIntegerField(blank=True, default=0)),
                ('late_fee_amount', models.BigIntegerField(blank=True, default=0)),
                ('late_fee_applied', models.IntegerField(blank=True, default=0)),
                ('discretionary_adjustment', models.BigIntegerField(blank=True, default=0)),
                ('is_robocall_active', models.NullBooleanField()),
                ('is_success_robocall', models.NullBooleanField()),
                ('is_collection_called', models.BooleanField(default=False)),
                ('uncalled_date', models.DateField(null=True)),
                ('reminder_call_date', models.DateTimeField(blank=True, null=True)),
                ('is_reminder_called', models.BooleanField(default=False)),
                ('is_whatsapp', models.BooleanField(default=False)),
                ('is_whatsapp_blasted', models.NullBooleanField(default=False)),
                ('paid_interest', models.BigIntegerField(blank=True, default=0)),
                ('paid_principal', models.BigIntegerField(blank=True, default=0)),
                ('paid_late_fee', models.BigIntegerField(blank=True, default=0)),
                ('ptp_amount', models.BigIntegerField(blank=True, default=0)),
                ('change_due_date_interest', models.BigIntegerField(blank=True, default=0)),
                ('is_restructured', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'payment',
            },
        ),
        migrations.CreateModel(
            name='PaymentAutodialerActivity',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_autodialer_activity_id', primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'payment_autodialer_activity',
            },
        ),
        migrations.CreateModel(
            name='PaymentAutodialerSession',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_autodialer_session_id', primary_key=True, serialize=False)),
                ('failed_count', models.IntegerField(default=0)),
                ('next_session_ts', models.DateTimeField(blank=True, null=True)),
                ('dpd_code', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_autodialer_session',
            },
        ),
        migrations.CreateModel(
            name='PaymentEvent',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_event_id', primary_key=True, serialize=False)),
                ('event_payment', models.BigIntegerField()),
                ('event_due_amount', models.BigIntegerField()),
                ('event_date', models.DateField()),
                ('event_type', models.CharField(default='payment', max_length=50)),
                ('payment_receipt', models.CharField(blank=True, max_length=36, null=True)),
                ('can_reverse', models.BooleanField(default=True)),
                ('accounting_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_event',
            },
        ),
        migrations.CreateModel(
            name='PaymentExperiment',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_experiment_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
            ],
            options={
                'db_table': 'payment_experiment',
            },
        ),
        migrations.CreateModel(
            name='PaymentHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('payment_number', models.IntegerField(blank=True, null=True)),
                ('loan_old_status_code', models.IntegerField(blank=True, null=True)),
                ('loan_new_status_code', models.IntegerField(blank=True, null=True)),
                ('payment_old_status_code', models.IntegerField(blank=True, null=True)),
                ('payment_new_status_code', models.IntegerField(blank=True, null=True)),
                ('paid_amount', models.BigIntegerField(blank=True, null=True)),
                ('due_amount', models.BigIntegerField(blank=True, null=True)),
                ('paid_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'payment_history',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_method_id', primary_key=True, serialize=False)),
                ('payment_method_code', models.CharField(max_length=10)),
                ('payment_method_name', models.CharField(max_length=150)),
                ('bank_code', models.CharField(blank=True, max_length=4, null=True)),
                ('virtual_account', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(message='Virtual account has to be numeric digits', regex='^[0-9]+$')])),
                ('is_primary', models.NullBooleanField()),
                ('is_shown', models.NullBooleanField(default=True)),
                ('is_preferred', models.NullBooleanField(default=False)),
                ('sequence', models.IntegerField(blank=True, null=True)),
                ('is_affected', models.NullBooleanField()),
            ],
            options={
                'db_table': 'payment_method',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethodLookup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('image_logo_url', models.CharField(blank=True, max_length=500, null=True)),
                ('image_background_url', models.CharField(blank=True, max_length=500, null=True)),
                ('bank_virtual_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'payment_method_lookup',
            },
        ),
        migrations.CreateModel(
            name='PaymentNote',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_note_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
            ],
            options={
                'db_table': 'payment_note',
            },
        ),
        migrations.CreateModel(
            name='PaymentPreRefinancing',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_pre_refinancing_id', primary_key=True, serialize=False)),
                ('payment_number', models.IntegerField()),
                ('due_date', models.DateField(null=True)),
                ('ptp_date', models.DateField(blank=True, null=True)),
                ('ptp_robocall_phone_number', models.CharField(blank=True, max_length=18, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('is_ptp_robocall_active', models.NullBooleanField()),
                ('due_amount', models.BigIntegerField()),
                ('installment_principal', models.BigIntegerField(default=0)),
                ('installment_interest', models.BigIntegerField(default=0)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('paid_amount', models.BigIntegerField(blank=True, default=0)),
                ('redeemed_cashback', models.BigIntegerField(default=0)),
                ('cashback_earned', models.BigIntegerField(blank=True, default=0)),
                ('late_fee_amount', models.BigIntegerField(blank=True, default=0)),
                ('late_fee_applied', models.IntegerField(blank=True, default=0)),
                ('discretionary_adjustment', models.BigIntegerField(blank=True, default=0)),
                ('is_robocall_active', models.NullBooleanField()),
                ('is_success_robocall', models.NullBooleanField()),
                ('is_collection_called', models.BooleanField(default=False)),
                ('uncalled_date', models.DateField(null=True)),
                ('reminder_call_date', models.DateTimeField(blank=True, null=True)),
                ('is_reminder_called', models.BooleanField(default=False)),
                ('is_whatsapp', models.BooleanField(default=False)),
                ('is_whatsapp_blasted', models.NullBooleanField(default=False)),
                ('paid_interest', models.BigIntegerField(blank=True, default=0)),
                ('paid_principal', models.BigIntegerField(blank=True, default=0)),
                ('paid_late_fee', models.BigIntegerField(blank=True, default=0)),
                ('ptp_amount', models.BigIntegerField(blank=True, default=0)),
                ('change_due_date_interest', models.BigIntegerField(blank=True, default=0)),
                ('is_restructured', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'payment_pre_refinancing',
            },
        ),
        migrations.CreateModel(
            name='PaymentReminderCallLogs',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_reminder_call_log_id', primary_key=True, serialize=False)),
                ('call_id', models.CharField(blank=True, max_length=300, null=True)),
                ('answer', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentStatusChange',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('change_reason', models.CharField(default='system_triggered', max_length=100)),
                ('id', models.AutoField(db_column='payment_status_change_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'payment_status_change',
            },
        ),
        migrations.CreateModel(
            name='PredictiveMissedCall',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='predictive_missed_call_id', primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('auto_call_result_status', models.CharField(blank=True, max_length=50, null=True)),
                ('is_agent_called', models.BooleanField(default=False)),
                ('attempt', models.IntegerField(blank=True, null=True)),
                ('conversation_uuid', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'predictive_missed_call',
            },
        ),
        migrations.CreateModel(
            name='PrimoDialerRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='primo_dialer_record_id', primary_key=True, serialize=False)),
                ('call_status', models.CharField(blank=True, max_length=20, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('agent', models.CharField(blank=True, max_length=20, null=True)),
                ('lead_status', models.CharField(blank=True, max_length=20, null=True)),
                ('lead_id', models.IntegerField(null=True)),
                ('list_id', models.IntegerField(null=True)),
                ('retry_times', models.IntegerField(default=0, null=True)),
            ],
            options={
                'db_table': 'primo_dialer_record',
            },
        ),
        migrations.CreateModel(
            name='ProductCustomerCriteria',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='product_customer_criteria_id', primary_key=True, serialize=False)),
                ('min_age', models.IntegerField(blank=True, null=True)),
                ('max_age', models.IntegerField(blank=True, null=True)),
                ('min_income', models.BigIntegerField(blank=True, null=True)),
                ('max_income', models.BigIntegerField(blank=True, null=True)),
                ('job_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('job_industry', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('job_description', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('location', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, null=True, size=None)),
                ('credit_score', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), blank=True, null=True, size=None)),
            ],
            options={
                'db_table': 'product_customer_criteria',
            },
        ),
        migrations.CreateModel(
            name='ProductivityCenterixSummary',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='productivity_centerix_summary_id', primary_key=True, serialize=False)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('agent_name', models.TextField(blank=True, null=True)),
                ('leader_name', models.TextField(blank=True, null=True)),
                ('outbond_calls_initiated', models.IntegerField(blank=True, null=True)),
                ('outbond_calls_connected', models.IntegerField(blank=True, null=True)),
                ('outbond_calls_not_connected', models.IntegerField(blank=True, null=True)),
                ('outbond_talk_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_acw_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_handling_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_logged_in_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_available_in_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_busy_in_time_duration', models.TimeField(blank=True, null=True)),
                ('outbond_aux_in_time_duration', models.TimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'productivity_centerix_summary',
            },
        ),
        migrations.CreateModel(
            name='ProductLine',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('product_line_code', models.BigIntegerField(primary_key=True, serialize=False)),
                ('product_line_type', models.CharField(max_length=50)),
                ('min_amount', models.BigIntegerField()),
                ('max_amount', models.BigIntegerField()),
                ('min_duration', models.IntegerField()),
                ('max_duration', models.IntegerField()),
                ('min_interest_rate', models.FloatField()),
                ('max_interest_rate', models.FloatField()),
                ('payment_frequency', models.CharField(max_length=50)),
                ('handler', models.CharField(blank=True, max_length=100, null=True)),
                ('non_premium_area_min_amount', models.BigIntegerField(blank=True, default=None, null=True)),
                ('non_premium_area_max_amount', models.BigIntegerField(blank=True, default=None, null=True)),
                ('amount_increment', models.BigIntegerField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'product_line',
            },
        ),
        migrations.CreateModel(
            name='ProductLineLoanPurpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'product_line_loan_purpose',
            },
        ),
        migrations.CreateModel(
            name='ProductLookup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('product_code', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=100)),
                ('interest_rate', models.FloatField()),
                ('origination_fee_pct', models.FloatField()),
                ('late_fee_pct', models.FloatField()),
                ('cashback_initial_pct', models.FloatField()),
                ('cashback_payment_pct', models.FloatField()),
                ('eligible_amount', models.BigIntegerField(blank=True, null=True)),
                ('eligible_duration', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'product_lookup',
            },
        ),
        migrations.CreateModel(
            name='ProductProfile',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='product_profile_id', primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=250)),
                ('min_amount', models.BigIntegerField(default=0)),
                ('max_amount', models.BigIntegerField(default=0)),
                ('min_duration', models.IntegerField(default=0)),
                ('max_duration', models.IntegerField(default=0)),
                ('min_interest_rate', models.FloatField()),
                ('max_interest_rate', models.FloatField()),
                ('interest_rate_increment', models.FloatField(default=0.0)),
                ('payment_frequency', models.CharField(choices=[('Monthly', 'Monthly'), ('Yearly', 'Yearly'), ('Daily', 'Daily'), ('Weekly', 'Weekly')], max_length=50)),
                ('min_origination_fee', models.FloatField()),
                ('max_origination_fee', models.FloatField()),
                ('origination_fee_increment', models.FloatField(default=0.0)),
                ('late_fee', models.FloatField(default=0.0)),
                ('cashback_initial', models.FloatField(default=0.0)),
                ('cashback_payment', models.FloatField(default=0.0)),
                ('debt_income_ratio', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_product_exclusive', models.BooleanField(default=False)),
                ('is_initial', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'product_profile',
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.AutoField(db_column='promo_code_id', primary_key=True, serialize=False)),
                ('promo_name', models.CharField(blank=True, max_length=80, null=True)),
                ('promo_code', models.CharField(blank=True, max_length=80, null=True)),
                ('partner', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('product_line', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('credit_score', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=False)),
                ('promo_benefit', models.CharField(blank=True, choices=[('0% INTEREST', '0% Interest on first installment'), ('cashback', 'Cashback')], max_length=30, null=True)),
                ('cashback_amount', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'promo_code',
            },
        ),
        migrations.CreateModel(
            name='PromoHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='promo_history_id', primary_key=True, serialize=False)),
                ('promo_type', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'promo_history',
            },
        ),
        migrations.CreateModel(
            name='PTP',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='ptp_id', primary_key=True, serialize=False)),
                ('ptp_status', models.CharField(blank=True, choices=[('Paid', 'Paid'), ('Paid after ptp date', 'Paid after ptp date'), ('Partial', 'Partial'), ('Not Paid', 'Not Paid')], max_length=50, null=True)),
                ('ptp_date', models.DateField(blank=True, null=True)),
                ('ptp_amount', models.BigIntegerField(blank=True, default=0)),
            ],
            options={
                'db_table': 'ptp',
            },
        ),
        migrations.CreateModel(
            name='QuirosCallRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='quiros_call_record_id', primary_key=True, serialize=False)),
                ('call_id', models.CharField(db_index=True, max_length=100)),
                ('phone_number', juloserver.julo.models.NoValidatePhoneNumberField(max_length=128)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('extension', models.CharField(blank=True, max_length=10, null=True)),
                ('created_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'quiros_call_record',
            },
        ),
        migrations.CreateModel(
            name='QuirosProfile',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='quiros_profile_id', primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=100)),
                ('current_token', models.TextField(blank=True, null=True)),
                ('last_login_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'quiros_profile',
            },
        ),
        migrations.CreateModel(
            name='RefereeMapping',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='referee_mapping_id', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'referee_mapping',
            },
        ),
        migrations.CreateModel(
            name='ReferralCampaign',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='referral_campaign_id', primary_key=True, serialize=False)),
                ('referral_code', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'referral_campaign',
            },
        ),
        migrations.CreateModel(
            name='ReferralSystem',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='referral_system_id', primary_key=True, serialize=False)),
                ('product_code', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('creditscore', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, null=True, size=None)),
                ('partners', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('caskback_amount', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('activate_referee_benefit', models.BooleanField(default=False)),
                ('application_status_code', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('loan_status_code', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, null=True, size=None)),
                ('reapply_eligibility', models.BooleanField(default=False)),
                ('payment_dpd', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'referral_system',
            },
        ),
        migrations.CreateModel(
            name='RepaymentTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='repayment_transaction_id', primary_key=True, serialize=False)),
                ('event_date', models.DateField(blank=True, null=True)),
                ('repayment_source', models.CharField(blank=True, choices=[('borrower_bank', 'borrower_bank'), ('borrower_wallet', 'borrower_wallet')], max_length=50, null=True)),
                ('borrower_repaid', models.BigIntegerField(default=0)),
                ('borrower_repaid_principal', models.BigIntegerField(default=0)),
                ('borrower_repaid_interest', models.BigIntegerField(default=0)),
                ('borrower_repaid_late_fee', models.BigIntegerField(default=0)),
                ('lender_received', models.BigIntegerField(default=0)),
                ('lender_received_principal', models.BigIntegerField(default=0)),
                ('lender_received_interest', models.BigIntegerField(default=0)),
                ('lender_received_late_fee', models.BigIntegerField(default=0)),
                ('julo_fee_received', models.BigIntegerField(default=0)),
                ('julo_fee_received_principal', models.BigIntegerField(default=0)),
                ('julo_fee_received_interest', models.BigIntegerField(default=0)),
                ('julo_fee_received_late_fee', models.BigIntegerField(default=0)),
                ('due_amount_before', models.BigIntegerField(default=0)),
                ('due_amount_after', models.BigIntegerField(default=0)),
                ('lender_balance_before', models.BigIntegerField(default=0)),
                ('lender_balance_after', models.BigIntegerField(default=0)),
                ('payment_receipt', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'repayment_transaction',
            },
        ),
        migrations.CreateModel(
            name='RobocallTemplate',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='robocall_template_id', primary_key=True, serialize=False)),
                ('template_name', models.CharField(max_length=150, unique=True)),
                ('text', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('template_category', models.CharField(choices=[('PTP', 'PTP'), ('DEFAULT', 'Default'), ('PROMO', 'Promos'), ('ANNOUCE', 'Announce'), ('MISC', 'Misc'), ('EXPERIMENT', 'EXPERIMENT')], default='DEFAULT', max_length=7)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'robocall_template',
            },
        ),
        migrations.CreateModel(
            name='ScrapingButton',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='scraping_button_id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('tag', models.IntegerField(null=True)),
                ('is_shown', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'scraping_buttons',
            },
        ),
        migrations.CreateModel(
            name='SepulsaProduct',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='sepulsa_product_id', primary_key=True, serialize=False)),
                ('product_id', models.CharField(blank=True, max_length=100, null=True)),
                ('product_name', models.CharField(blank=True, max_length=200, null=True)),
                ('product_nominal', models.BigIntegerField(blank=True, null=True)),
                ('product_label', models.CharField(blank=True, max_length=200, null=True)),
                ('product_desc', models.CharField(blank=True, max_length=500, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('partner_price', models.BigIntegerField(blank=True, null=True)),
                ('customer_price', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sepulsa_product',
            },
        ),
        migrations.CreateModel(
            name='SepulsaTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='sepulsa_transaction_id', primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('transaction_code', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_status', models.CharField(blank=True, choices=[('success', 'Success'), ('pending', 'Pending'), ('failed', 'Failed')], max_length=50, null=True)),
                ('is_order_created', models.NullBooleanField()),
                ('transaction_success_date', models.DateTimeField(blank=True, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('response_code', models.CharField(blank=True, max_length=50, null=True)),
                ('meter_number', models.CharField(blank=True, max_length=100, null=True)),
                ('account_name', models.CharField(blank=True, max_length=50, null=True)),
                ('transaction_token', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'sepulsa_transaction',
            },
        ),
        migrations.CreateModel(
            name='SepulsaTransactionHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='sepulsa_transaction_history_id', primary_key=True, serialize=False)),
                ('before_transaction_status', models.NullBooleanField()),
                ('before_transaction_success_date', models.DateTimeField(blank=True, null=True)),
                ('before_response_code', models.CharField(blank=True, max_length=50, null=True)),
                ('after_transaction_status', models.NullBooleanField()),
                ('after_transaction_success_date', models.DateTimeField(blank=True, null=True)),
                ('after_response_code', models.CharField(blank=True, max_length=50, null=True)),
                ('transaction_type', models.CharField(blank=True, max_length=50, null=True)),
                ('request_payload', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sepulsa_transaction_history',
            },
        ),
        migrations.CreateModel(
            name='SignatureMethodHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='signature_method_history_id', primary_key=True, serialize=False)),
                ('signature_method', models.CharField(choices=[('-', '-'), ('JULO', 'JULO'), ('Digisign', 'Digisign')], default='-', max_length=50)),
                ('is_used', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'signature_method_history',
            },
        ),
        migrations.CreateModel(
            name='SignatureVendorLog',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='signature_vendor_log_id', primary_key=True, serialize=False)),
                ('vendor', models.CharField(max_length=100)),
                ('event', models.CharField(max_length=200)),
                ('response_code', models.IntegerField()),
                ('response_string', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('request_string', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'signature_vendor_log',
            },
        ),
        migrations.CreateModel(
            name='Skiptrace',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='skiptrace_id', primary_key=True, serialize=False)),
                ('contact_name', models.TextField(blank=True, null=True)),
                ('contact_source', models.TextField(blank=True, null=True)),
                ('phone_number', juloserver.julo.models.NoValidatePhoneNumberField(blank=True, max_length=128, null=True)),
                ('phone_operator', models.TextField(blank=True, null=True)),
                ('effectiveness', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('recency', models.DateTimeField(blank=True, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True)),
                ('is_guarantor', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'skiptrace',
            },
        ),
        migrations.CreateModel(
            name='SkiptraceHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='skiptrace_history_id', primary_key=True, serialize=False)),
                ('start_ts', models.DateTimeField()),
                ('end_ts', models.DateTimeField(blank=True, null=True)),
                ('agent_name', models.TextField(blank=True, null=True)),
                ('spoke_with', models.TextField(blank=True, null=True)),
                ('application_status', models.IntegerField(blank=True, null=True)),
                ('old_application_status', models.IntegerField(blank=True, null=True)),
                ('loan_status', models.IntegerField(blank=True, null=True)),
                ('payment_status', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('callback_time', models.CharField(blank=True, max_length=12, null=True)),
                ('excluded_from_bucket', models.NullBooleanField()),
                ('non_payment_reason', models.TextField(blank=True, null=True)),
                ('status_group', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'skiptrace_history',
            },
        ),
        migrations.CreateModel(
            name='SkiptraceHistoryCentereix',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='skiptrace_history_centereix_id', primary_key=True, serialize=False)),
                ('campaign_name', models.TextField(blank=True, null=True)),
                ('statement', models.BigIntegerField(blank=True, null=True)),
                ('loan_status', models.IntegerField(blank=True, db_column='loan_status_code', null=True)),
                ('payment_status', models.IntegerField(blank=True, db_column='payment_status_code', null=True)),
                ('contact_source', models.TextField(blank=True, null=True)),
                ('phone_number', juloserver.julo.models.NoValidatePhoneNumberField(blank=True, max_length=128, null=True)),
                ('status_group', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('start_ts', models.DateTimeField()),
                ('end_ts', models.DateTimeField(blank=True, null=True)),
                ('agent_name', models.TextField(blank=True, null=True)),
                ('spoke_with', models.TextField(blank=True, null=True)),
                ('callback_time', models.CharField(blank=True, max_length=12, null=True)),
                ('application_status', models.IntegerField(blank=True, db_column='application_status_code', null=True)),
                ('non_payment_reason', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'skiptrace_history_centereix',
            },
        ),
        migrations.CreateModel(
            name='SkiptraceResultChoice',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='skiptrace_result_choice_id', primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('weight', models.IntegerField()),
                ('customer_reliability_score', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'skiptrace_result_choice',
            },
        ),
        migrations.CreateModel(
            name='SmsHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='sms_history_id', primary_key=True, serialize=False)),
                ('status', models.CharField(default='sent_to_provider', max_length=20)),
                ('delivery_error_code', models.IntegerField(blank=True, null=True)),
                ('message_id', models.CharField(max_length=50)),
                ('message_content', models.TextField()),
                ('template_code', models.CharField(blank=True, max_length=50, null=True)),
                ('to_mobile_phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('phone_number_type', models.CharField(blank=True, max_length=20, null=True)),
                ('is_otp', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sms_history',
            },
        ),
        migrations.CreateModel(
            name='SphpTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('sphp_template', models.TextField(blank=True, null=True)),
                ('product_name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StatusLabel',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='status_label_id', primary_key=True, serialize=False)),
                ('status', models.IntegerField()),
                ('label_name', models.CharField(max_length=100)),
                ('label_colour', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'status_label',
            },
        ),
        migrations.CreateModel(
            name='StatusLookup',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('status_code', models.IntegerField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50)),
                ('handler', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'status_lookup',
            },
        ),
        migrations.CreateModel(
            name='ThirdPartyData',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='third_party_data_id', primary_key=True, serialize=False)),
                ('lenddo', models.CharField(blank=True, max_length=50, null=True)),
                ('emailage', models.CharField(blank=True, max_length=50, null=True)),
                ('trulioo', models.CharField(blank=True, max_length=50, null=True)),
                ('trustev', models.CharField(blank=True, max_length=50, null=True)),
                ('creditcheck', models.CharField(blank=True, max_length=50, null=True)),
                ('efl', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'third_party_data',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='transaction_id', primary_key=True, serialize=False)),
                ('julo_bank_name', models.CharField(blank=True, max_length=250)),
                ('julo_bank_branch', models.CharField(blank=True, max_length=100)),
                ('julo_bank_account_number', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(message='Bank account number has to be numeric digits', regex='^[0-9]+$')])),
                ('transaction_ts', models.DateTimeField()),
                ('transaction_type', models.CharField(max_length=50)),
                ('transaction_amount', models.BigIntegerField()),
                ('transaction_note', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'transaction',
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='user_feedback_id', primary_key=True, serialize=False)),
                ('rating', models.IntegerField()),
                ('feedback', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_feedback',
            },
        ),
        migrations.CreateModel(
            name='VendorDataHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='comms_data_id', primary_key=True, serialize=False)),
                ('loan_status_code', models.IntegerField(blank=True, null=True)),
                ('reminder_type', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status_code', models.IntegerField(blank=True, null=True)),
                ('template_code', models.CharField(blank=True, max_length=200, null=True)),
                ('vendor', models.CharField(blank=True, db_column='provider', max_length=100, null=True)),
                ('called_at', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'comms_data_history',
            },
        ),
        migrations.CreateModel(
            name='VirtualAccountSuffix',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='virtual_account_suffix_id', primary_key=True, serialize=False)),
                ('virtual_account_suffix', models.CharField(blank=True, max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Virtual account suffix has to be numeric digits', regex='^[0-9]+$')])),
            ],
            options={
                'db_table': 'virtual_account_suffix',
            },
        ),
        migrations.CreateModel(
            name='VoiceCallRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='voice_call_id', primary_key=True, serialize=False)),
                ('event_type', models.TextField(blank=True, null=True)),
                ('voice_identifier', models.BigIntegerField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('direction', models.TextField(blank=True, null=True)),
                ('uuid', models.TextField()),
                ('conversation_uuid', models.TextField(db_index=True)),
                ('call_from', models.TextField(blank=True, null=True)),
                ('call_to', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.TextField(blank=True, null=True)),
                ('call_rate', models.TextField(blank=True, null=True)),
                ('call_price', models.TextField(blank=True, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
                ('is_experiment', models.NullBooleanField(default=False)),
                ('experiment_id', models.IntegerField(null=True)),
                ('success_threshold', models.CharField(blank=True, max_length=10, null=True)),
                ('template_code', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'db_table': 'voice_call_record',
            },
        ),
        migrations.CreateModel(
            name='VoiceRecord',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='voice_record_id', primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, choices=[(-1, 'Deleted'), (0, 'Current'), (1, 'Resubmission Required')], default=0, null=True)),
                ('service', models.CharField(choices=[('s3', 's3'), ('oss', 'oss')], default='oss', max_length=50)),
                ('url', models.TextField(blank=True, null=True)),
                ('tmp_path', models.FileField(blank=True, db_column='internal_path', null=True, upload_to=b'')),
                ('application', models.ForeignKey(db_column='application_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Application')),
            ],
            options={
                'db_table': 'voice_record',
            },
        ),
        migrations.CreateModel(
            name='WaivePromo',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='waive_promo_id', primary_key=True, serialize=False)),
                ('remaining_installment_principal', models.BigIntegerField(blank=True, default=0)),
                ('remaining_installment_interest', models.BigIntegerField(blank=True, default=0)),
                ('remaining_late_fee', models.BigIntegerField(blank=True, default=0)),
                ('promo_event_type', models.CharField(blank=True, max_length=100, null=True)),
                ('loan', models.ForeignKey(blank=True, db_column='loan_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Loan')),
                ('payment', models.ForeignKey(blank=True, db_column='payment_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Payment')),
            ],
            options={
                'db_table': 'waive_promo',
            },
        ),
        migrations.CreateModel(
            name='WarningLetterHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('warning_number', models.IntegerField(blank=True, null=True)),
                ('loan_status_code', models.IntegerField(blank=True, null=True)),
                ('payment_status_code', models.IntegerField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('total_due_amount', models.BigIntegerField(blank=True, null=True)),
                ('event_type', models.CharField(blank=True, max_length=5, null=True)),
                ('customer', models.ForeignKey(blank=True, db_column='customer_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
                ('loan', models.ForeignKey(blank=True, db_column='loan_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Loan')),
                ('payment', models.ForeignKey(blank=True, db_column='payment_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Payment')),
            ],
            options={
                'db_table': 'warning_letter_history',
            },
        ),
        migrations.CreateModel(
            name='WarningUrl',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='warning_url_id', primary_key=True, serialize=False)),
                ('url', models.CharField(blank=True, max_length=300, null=True)),
                ('warning_method', models.IntegerField(default=1)),
                ('is_enabled', models.BooleanField(default=True)),
                ('url_type', models.CharField(choices=[('email', 'email'), ('sms', 'sms')], default='email', max_length=10)),
                ('customer', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WhatsappHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='whatsapp_history_id', primary_key=True, serialize=False)),
                ('xid', models.TextField(db_column='whatsapp_history_xid', default=uuid.uuid4, unique=True)),
                ('umid', models.TextField(blank=True, db_column='whatsapp_history_umid', null=True)),
                ('status', models.CharField(default='SENT', max_length=25)),
                ('error', models.TextField(blank=True, null=True)),
                ('message_content', models.TextField()),
                ('template_code', models.CharField(blank=True, max_length=50, null=True)),
                ('to_mobile_phone', models.TextField()),
                ('application', models.ForeignKey(blank=True, db_column='application_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Application')),
                ('customer', models.ForeignKey(blank=True, db_column='customer_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
                ('payment', models.ForeignKey(blank=True, db_column='payment_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Payment')),
            ],
            options={
                'db_table': 'whatsapp_history',
            },
        ),
        migrations.CreateModel(
            name='WlLevelConfig',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('late_installment_count', models.IntegerField()),
                ('wl_level', models.IntegerField()),
            ],
            options={
                'db_table': 'wl_level_config',
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='workflow_id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('desc', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('handler', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'workflow',
            },
        ),
        migrations.CreateModel(
            name='WorkflowFailureAction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='workflow_failure_action_id', primary_key=True, serialize=False)),
                ('action_name', models.CharField(max_length=200)),
                ('action_type', models.CharField(max_length=100)),
                ('arguments', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=300), size=None)),
                ('task_id', models.CharField(max_length=200, null=True)),
                ('error_message', models.TextField(null=True)),
                ('is_recalled_succeed', models.NullBooleanField()),
                ('recalled_counter', models.IntegerField(default=0, null=True)),
                ('application', models.ForeignKey(db_column='application_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Application')),
            ],
            options={
                'db_table': 'workflow_failure_action',
            },
        ),
        migrations.CreateModel(
            name='WorkflowStatusNode',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='workflow_status_node_id', primary_key=True, serialize=False)),
                ('status_node', models.IntegerField()),
                ('handler', models.CharField(blank=True, max_length=100, null=True)),
                ('workflow', models.ForeignKey(db_column='workflow_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Workflow')),
            ],
            options={
                'db_table': 'workflow_status_node',
            },
        ),
        migrations.CreateModel(
            name='WorkflowStatusPath',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='workflow_status_path_id', primary_key=True, serialize=False)),
                ('status_previous', models.IntegerField(db_column='status_previous_code')),
                ('status_next', models.IntegerField(db_column='status_next_code')),
                ('type', models.CharField(blank=True, choices=[('happy', 'happy'), ('detour', 'detour'), ('graveyard', 'graveyard')], max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('customer_accessible', models.BooleanField(default=False)),
                ('agent_accessible', models.BooleanField(default=True)),
                ('workflow', models.ForeignKey(db_column='workflow_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Workflow')),
            ],
            options={
                'db_table': 'workflow_status_path',
            },
        ),
        migrations.CreateModel(
            name='XidLookup',
            fields=[
                ('xid', models.BigIntegerField(db_column='xid', db_index=True, primary_key=True, serialize=False, unique=True)),
                ('is_used_application', models.BooleanField(db_column='is_used_application', default=False)),
            ],
            options={
                'db_table': 'xid_lookup',
            },
        ),
    ]
