# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2020-09-02 08:34
from __future__ import unicode_literals

import cuser.fields
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountCreditHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='account_credit_history_id', primary_key=True, serialize=False)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('change_reason', models.TextField(default='system_triggered')),
            ],
            options={
                'db_table': 'account_credit_history',
            },
        ),
        migrations.CreateModel(
            name='AccountCreditLimit',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='account_credit_limit_id', primary_key=True, serialize=False)),
                ('account_credit_limit', models.BigIntegerField(default=0)),
                ('available_credit_limit', models.BigIntegerField(default=0)),
                ('account_credit_active_date', models.DateTimeField(blank=True, null=True)),
                ('callback_url', models.CharField(blank=True, max_length=500, null=True)),
                ('agreement_accepted_ts', models.DateTimeField(blank=True, null=True)),
                ('callback_response', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('scrap_data_uploaded', models.BooleanField(default=False)),
                ('account_credit_status', models.ForeignKey(db_column='status_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup')),
            ],
            options={
                'db_table': 'account_credit_limit',
            },
        ),
        migrations.CreateModel(
            name='BukalapakCustomerData',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bukalapak_customer_data_id', primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('nik', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$'), django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('confirmed_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('fullname', models.CharField(blank=True, max_length=100, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')], verbose_name='Jenis kelamin')),
                ('account_opening_date', models.DateField(blank=True, null=True)),
                ('birthplace', models.CharField(blank=True, max_length=100, null=True)),
                ('seller_flag', models.CharField(blank=True, max_length=100, null=True)),
                ('identity_type', models.CharField(default='ktp', max_length=100)),
                ('job', models.CharField(blank=True, max_length=100, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=100, null=True)),
                ('reference_date', models.DateField(blank=True, null=True)),
                ('application', models.OneToOneField(blank=True, db_column='application_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Application')),
                ('customer', models.OneToOneField(blank=True, db_column='customer_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
            ],
            options={
                'db_table': 'bukalapak_customer_data',
            },
        ),
        migrations.CreateModel(
            name='BukalapakInterest',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bukalapak_interest_id', primary_key=True, serialize=False)),
                ('last_digit_min', models.IntegerField(default=0)),
                ('last_digit_max', models.IntegerField(default=0)),
                ('interest_rate', models.FloatField()),
            ],
            options={
                'db_table': 'bukalapak_interest',
            },
        ),
        migrations.CreateModel(
            name='BukalapakWhitelist',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='bukalapak_whitelist_id', primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('credit_limit', models.BigIntegerField(default=0)),
                ('probability_fpd', models.FloatField()),
                ('group', models.CharField(blank=True, max_length=100, null=True)),
                ('version', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'bukalapak_whitelist',
            },
        ),
        migrations.CreateModel(
            name='CustomerCreditLimit',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='customer_credit_limit_id', primary_key=True, serialize=False)),
                ('customer_credit_limit', models.BigIntegerField(default=0)),
                ('customer_credit_active_date', models.DateTimeField(blank=True, null=True)),
                ('credit_score', models.OneToOneField(db_column='credit_score_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.CreditScore')),
                ('customer', models.OneToOneField(db_column='customer_id', on_delete=django.db.models.deletion.CASCADE, to='julo.Customer')),
                ('customer_credit_status', models.ForeignKey(db_column='status_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup')),
            ],
            options={
                'db_table': 'customer_credit_limit',
            },
        ),
        migrations.CreateModel(
            name='DisbursementSummary',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='disbursement_summary_id', primary_key=True, serialize=False)),
                ('transaction_date', models.DateField()),
                ('transaction_count', models.IntegerField(default=0)),
                ('transaction_ids', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True)),
                ('transaction_amount', models.BigIntegerField(default=0)),
                ('disburse_xid', models.BigIntegerField(blank=True, null=True)),
                ('disburse_by', models.ForeignKey(blank=True, db_column='disburse_by', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('disbursement', models.OneToOneField(blank=True, db_column='disbursement_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='disbursement.Disbursement')),
                ('partner', models.ForeignKey(blank=True, db_column='partner_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
                ('product_line', models.ForeignKey(blank=True, db_column='product_line_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.ProductLine')),
            ],
            options={
                'db_table': 'disbursement_summary',
            },
        ),
        migrations.CreateModel(
            name='InitialCreditLimit',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='initial_credit_limit_id', primary_key=True, serialize=False)),
                ('cluster_type', models.CharField(choices=[('Default', 'Default'), ('MVP', 'MVP'), ('Potential MVP', 'Potential MVP'), ('Opportunistic', 'Opportunistic'), ('Churned', 'Churned')], max_length=50, validators=[django.core.validators.RegexValidator(message='characters not allowed', regex='^[ -~]+$')])),
                ('score_first', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('score_last', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('initial_credit_limit', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(10000), django.core.validators.MaxValueValidator(3000000)])),
            ],
            options={
                'db_table': 'initial_credit_limit',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='invoice_id', primary_key=True, serialize=False)),
                ('customer_xid', models.BigIntegerField()),
                ('invoice_number', models.CharField(db_index=True, max_length=100)),
                ('invoice_date', models.DateTimeField(blank=True, null=True)),
                ('invoice_amount', models.BigIntegerField()),
                ('invoice_due_date', models.DateField(blank=True, null=True)),
                ('transaction_fee_amount', models.BigIntegerField()),
                ('invoice_status', models.CharField(max_length=100)),
                ('account_credit_limit', models.ForeignKey(db_column='account_credit_limit_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.AccountCreditLimit')),
                ('customer_credit_limit', models.ForeignKey(db_column='customer_credit_limit_id', on_delete=django.db.models.deletion.CASCADE, to='paylater.CustomerCreditLimit')),
            ],
            options={
                'db_table': 'invoice',
            },
        ),
        migrations.CreateModel(
            name='InvoiceDetail',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='invoice_detail_id', primary_key=True, serialize=False)),
                ('partner_transaction_id', models.CharField(db_index=True, max_length=100)),
                ('shipping_address', models.TextField()),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True)),
                ('partner_transaction_status', models.CharField(max_length=100)),
                ('invoice', models.ForeignKey(db_column='invoice_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='transactions', to='paylater.Invoice')),
            ],
            options={
                'db_table': 'invoice_detail',
            },
        ),
        migrations.CreateModel(
            name='LoanOne',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_one_id', primary_key=True, serialize=False)),
                ('loan_amount', models.BigIntegerField(default=0)),
                ('loan_duration', models.IntegerField(default=1)),
                ('installment_amount', models.BigIntegerField(default=0)),
                ('fund_transfer_ts', models.DateTimeField(blank=True, null=True)),
                ('refund_amount', models.BigIntegerField(default=0)),
                ('customer', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.CASCADE, to='julo.Customer')),
                ('loan_one_status', models.ForeignKey(db_column='status_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup')),
                ('partner', models.ForeignKey(blank=True, db_column='partner_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
            ],
            options={
                'db_table': 'loan_one',
            },
        ),
        migrations.CreateModel(
            name='PaymentSchedule',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='payment_schedule_id', primary_key=True, serialize=False)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('due_amount', models.BigIntegerField()),
                ('interest_amount', models.BigIntegerField()),
                ('principal_amount', models.BigIntegerField()),
                ('transaction_fee_amount', models.BigIntegerField()),
                ('late_fee_amount', models.BigIntegerField(default=0)),
                ('late_fee_applied', models.IntegerField(default=0)),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('paid_interest', models.BigIntegerField(default=0)),
                ('paid_principal', models.BigIntegerField(default=0)),
                ('paid_late_fee', models.BigIntegerField(default=0)),
                ('paid_transaction_fee', models.BigIntegerField(default=0)),
                ('paid_amount', models.BigIntegerField(default=0)),
                ('loan_one', models.ForeignKey(db_column='loan_one_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.LoanOne')),
            ],
            options={
                'db_table': 'payment_schedule',
            },
        ),
        migrations.CreateModel(
            name='SkipTraceHistoryBl',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='skiptrace_history_bl_id', primary_key=True, serialize=False)),
                ('account_credit_limit', models.ForeignKey(db_column='account_credit_limit_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.AccountCreditLimit')),
                ('agent', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('call_result', models.ForeignKey(db_column='skiptrace_result_choice_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.SkiptraceResultChoice')),
                ('skiptrace', models.ForeignKey(db_column='skiptrace_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Skiptrace')),
            ],
            options={
                'db_table': 'skiptrace_history_bl',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='statement_id', primary_key=True, serialize=False)),
                ('statement_due_date', models.DateField(blank=True, null=True)),
                ('statement_due_amount', models.BigIntegerField()),
                ('statement_interest_amount', models.BigIntegerField()),
                ('statement_principal_amount', models.BigIntegerField()),
                ('statement_transaction_fee_amount', models.BigIntegerField()),
                ('statement_late_fee_amount', models.BigIntegerField(default=0)),
                ('statement_late_fee_applied', models.IntegerField(default=0)),
                ('statement_paid_date', models.DateField(blank=True, null=True)),
                ('statement_paid_interest', models.BigIntegerField(default=0)),
                ('statement_paid_principal', models.BigIntegerField(default=0)),
                ('statement_paid_late_fee', models.BigIntegerField(default=0)),
                ('statement_paid_transaction_fee', models.BigIntegerField(default=0)),
                ('statement_paid_amount', models.BigIntegerField(default=0)),
                ('is_collection_called', models.BooleanField(default=False)),
                ('account_credit_limit', models.ForeignKey(db_column='account_credit_limit_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.AccountCreditLimit')),
                ('customer_credit_limit', models.ForeignKey(db_column='customer_credit_limit_id', on_delete=django.db.models.deletion.CASCADE, to='paylater.CustomerCreditLimit')),
                ('statement_status', models.ForeignKey(db_column='statement_status_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup')),
            ],
            options={
                'db_table': 'statement',
            },
        ),
        migrations.CreateModel(
            name='StatementEvent',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='statement_event_id', primary_key=True, serialize=False)),
                ('event_amount', models.BigIntegerField()),
                ('event_due_amount', models.BigIntegerField()),
                ('event_date', models.DateField()),
                ('event_type', models.CharField(max_length=50)),
                ('can_reverse', models.BooleanField(default=True)),
                ('added_by', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statement_event', to=settings.AUTH_USER_MODEL)),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
            ],
            options={
                'db_table': 'statement_event',
            },
        ),
        migrations.CreateModel(
            name='StatementHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='statement_history_id', primary_key=True, serialize=False)),
                ('status_old', models.IntegerField()),
                ('status_new', models.IntegerField()),
                ('change_reason', models.TextField(default='system_triggered')),
                ('changed_by', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statement_status_changes', to=settings.AUTH_USER_MODEL)),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
            ],
            options={
                'db_table': 'statement_history',
            },
        ),
        migrations.CreateModel(
            name='StatementLock',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('agent', models.ForeignKey(db_column='agent_id', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('statement', models.OneToOneField(blank=True, db_column='statement_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='paylater.Statement')),
            ],
            options={
                'db_table': 'statement_lock',
            },
        ),
        migrations.CreateModel(
            name='StatementLockHistory',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('agent', models.ForeignKey(db_column='agent_id', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('statement', models.ForeignKey(blank=True, db_column='statement_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
            ],
            options={
                'db_table': 'statement_lock_history',
            },
        ),
        migrations.CreateModel(
            name='StatementNote',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='statement_note_id', primary_key=True, serialize=False)),
                ('note_text', models.TextField()),
                ('added_by', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
            ],
            options={
                'db_table': 'statement_note',
            },
        ),
        migrations.CreateModel(
            name='StatementPtp',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='statement_ptp_id', primary_key=True, serialize=False)),
                ('ptp_date', models.DateField()),
                ('ptp_amount', models.BigIntegerField()),
                ('statement', models.OneToOneField(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
                ('updated_by', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'statement_ptp',
            },
        ),
        migrations.CreateModel(
            name='TransactionOne',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='transaction_one_id', primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('Debit', 'debit'), ('Credit', 'credit')], max_length=100)),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('transaction_amount', models.FloatField()),
                ('transaction_status', models.CharField(max_length=100)),
                ('transaction_description', models.TextField(blank=True, null=True)),
                ('disbursement_amount', models.BigIntegerField(default=0)),
                ('account_credit_limit', models.ForeignKey(db_column='account_credit_limit_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.AccountCreditLimit')),
                ('customer_credit_limit', models.ForeignKey(db_column='customer_credit_limit_id', on_delete=django.db.models.deletion.CASCADE, to='paylater.CustomerCreditLimit')),
                ('disbursement', models.ForeignKey(blank=True, db_column='disbursement_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='disbursement.Disbursement')),
                ('invoice', models.ForeignKey(blank=True, db_column='invoice_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Invoice')),
                ('invoice_detail', models.ForeignKey(blank=True, db_column='invoice_detail_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.InvoiceDetail')),
                ('statement', models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement')),
            ],
            options={
                'db_table': 'transaction_one',
            },
        ),
        migrations.CreateModel(
            name='TransactionPaymentDetail',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='transaction_payment_id', primary_key=True, serialize=False)),
                ('payment_method_type', models.CharField(max_length=100)),
                ('payment_method_name', models.CharField(max_length=100)),
                ('payment_account_number', models.CharField(max_length=50)),
                ('payment_amount', models.BigIntegerField()),
                ('payment_date', models.DateField()),
                ('payment_ref', models.CharField(max_length=100)),
                ('transaction', models.OneToOneField(db_column='transaction_one_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.TransactionOne')),
            ],
            options={
                'db_table': 'transaction_payment_detail',
            },
        ),
        migrations.CreateModel(
            name='TransactionRefundDetail',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='transaction_refund_id', primary_key=True, serialize=False)),
                ('refund_amount', models.BigIntegerField(default=0)),
                ('disbursement', models.ForeignKey(blank=True, db_column='disbursement_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='disbursement.Disbursement')),
                ('invoice', models.ForeignKey(db_column='invoice_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Invoice')),
                ('invoice_detail', models.ForeignKey(db_column='invoice_detail_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.InvoiceDetail')),
                ('loan_one', models.ForeignKey(db_column='loan_one_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.LoanOne')),
                ('transaction', models.OneToOneField(db_column='transaction_one_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.TransactionOne')),
            ],
            options={
                'db_table': 'transaction_refund_detail',
            },
        ),
        migrations.AddField(
            model_name='skiptracehistorybl',
            name='statement',
            field=models.ForeignKey(blank=True, db_column='statement_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement'),
        ),
        migrations.AddField(
            model_name='paymentschedule',
            name='statement',
            field=models.ForeignKey(db_column='statement_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.Statement'),
        ),
        migrations.AddField(
            model_name='paymentschedule',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_code', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup'),
        ),
        migrations.AddField(
            model_name='loanone',
            name='transaction',
            field=models.OneToOneField(db_column='transaction_one_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.TransactionOne'),
        ),
        migrations.AlterIndexTogether(
            name='bukalapakwhitelist',
            index_together=set([('email',)]),
        ),
        migrations.AddField(
            model_name='accountcreditlimit',
            name='customer_credit_limit',
            field=models.ForeignKey(db_column='customer_credit_limit_id', on_delete=django.db.models.deletion.CASCADE, to='paylater.CustomerCreditLimit'),
        ),
        migrations.AddField(
            model_name='accountcreditlimit',
            name='partner',
            field=models.ForeignKey(blank=True, db_column='partner_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner'),
        ),
        migrations.AddField(
            model_name='accountcredithistory',
            name='account_credit',
            field=models.ForeignKey(db_column='account_credit_limit_id', on_delete=django.db.models.deletion.DO_NOTHING, to='paylater.AccountCreditLimit'),
        ),
        migrations.AddField(
            model_name='accountcredithistory',
            name='changed_by',
            field=cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='account_credit_status_changes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='disbursementsummary',
            unique_together=set([('transaction_date', 'partner', 'product_line')]),
        ),
    ]
