# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-11-10 02:48
from __future__ import unicode_literals

from django.db import (
    migrations,
    connection,
)


def drop_materialized_views(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("""
        DROP MATERIALIZED VIEW IF EXISTS ops.sales_ops_r_score;
        DROP MATERIALIZED VIEW IF EXISTS ops.sales_ops_m_score
        """)


def create_sales_ops_r_score_view(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("""
                CREATE MATERIALIZED VIEW sales_ops_r_score AS
                    with core as (
                        select
                            datas.account_id
                            , case
                                when datas.latest_disbursed_date is not null then datas.latest_disbursed_date
                                when datas.latest_disbursed_date is null and datas.latest_paid_date is not null then datas.latest_paid_date
                                when datas.latest_disbursed_date is null and datas.latest_paid_date is null then datas.latest_x190_date
                            end as active_dates
                        from (
                            select
                                a.account_id
                                , max(case when l.loan_status_code in (220, 230, 231, 232, 233, 234, 235, 236, 237) then l.fund_transfer_ts else null end) as latest_disbursed_date
                                , max(case when l.loan_status_code in (250) then ap.paid_date else null end) as latest_paid_date
                                , max(ah.cdate) as latest_x190_date
                            from ops.application a
                            join (
                                select
                                    ah.application_id
                                    , max(ah.cdate) as cdate
                                from ops.application_history ah 
                                where ah.status_new = 190
                                and ah.application_id in (select application_id from ops.application where product_line_code = 1)
                                group by 1
                            ) ah on a.application_id = ah.application_id
                            left join ops.loan l on l.application_id2 = a.application_id and a.product_line_code in (1) -- J1 only
                            left join ops.account_payment ap on ap.account_id = a.account_id
                            group by 1
                        ) as datas
                    )
                    , summary as (
                        select
                            a.account_id
                            , a.active_dates::date as latest_active_dates
                            , row_number() over(order by active_dates desc) as ranking
                        from core a
                        join ops.sales_ops_lineup b on a.account_id = b.account_id
                        where a.active_dates is not null and b.is_active = true
                    )
                    select * from summary
        """)


def create_sales_ops_m_score_view(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("""
                CREATE MATERIALIZED VIEW sales_ops_m_score AS
                    select
                        datas.account_id
                        , datas.latest_account_limit_id
                        , datas.available_limit
                        , datas.ranking
                    from (
                        select
                            al.account_id
                            , sol.latest_account_limit_id
                            , al.available_limit
                            , row_number() over(order by al.available_limit desc) as ranking
                            -- , (PERCENT_RANK() OVER(ORDER BY al.available_limit desc)*100) AS Percent_Rank
                        from ops.sales_ops_lineup sol
                        join ops.account_limit al on sol.latest_account_limit_id = al.account_limit_id
                        join ops.application a on al.account_id = a.account_id and a.product_line_code in (1) -- J1 only
                        where sol.is_active = true 
                        order by available_limit desc
                    ) datas
        """)


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(drop_materialized_views, migrations.RunPython.noop),
        migrations.RunPython(create_sales_ops_r_score_view, migrations.RunPython.noop),
        migrations.RunPython(create_sales_ops_m_score_view, migrations.RunPython.noop),
    ]
