# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2018-01-26 03:36
from __future__ import unicode_literals

import cuser.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from ..partners import PartnerConstant
from ..product_lines import ProductLineCodes
from ..statuses import ApplicationStatusCodes
from django.contrib.auth.hashers import make_password
from django.utils import timezone

def update_bri_partner(apps, schema_editor):
    Partner = apps.get_model("julo", "Partner")
    partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    if partner:
        partner.type = 'lender'
        partner.save()

def update_grab_partner(apps, schema_editor):
    Partner = apps.get_model("julo", "Partner")
    partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)
    if partner:
        partner.type = 'lender'
        partner.save()

def load_jtp_partner(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    group = Group.objects.get(name="julo_partners")

    User = apps.get_model("auth", "User")
    hash_password = make_password('jtptest')
    user = User.objects.create(username=PartnerConstant.JTP_PARTNER,
        email='cs@jtp.com', password=hash_password)
    user.groups.add(group)

    Partner = apps.get_model("julo", "Partner")
    Partner.objects.create(
        user=user, name=PartnerConstant.JTP_PARTNER, email='cs@jtp.com',
        phone='+628111111111', type='lender')
            
def create_balance_lender(apps, schema_editor):
    Partner = apps.get_model("julo", "Partner")
    LenderBalance = apps.get_model("julo", "LenderBalance")
    partners = Partner.objects.all()
    
    for partner in partners:
        if partner.name in PartnerConstant.lender_partners():
            LenderBalance.objects.create(partner=partner)

def create_service_rate(apps, schema_editor):

    Partner = apps.get_model("julo", "Partner")
    jtp_partner = Partner.objects.get(name=PartnerConstant.JTP_PARTNER)
    bri_partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    grab_partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)

    service_rates = [
        (1,  0.00, 0.98, 0.98, 0.00, jtp_partner),
        (2,  0.00, 1.00, 0.00, 0.00, bri_partner),
        (3,  0.65, 1.00, 0.65, 0.65, grab_partner),
    ]

    LenderServiceRate = apps.get_model("julo", "LenderServiceRate")
    for sr in service_rates:
        kwargs = {
            'id': sr[0],
            'provision_rate': sr[1],
            'principal_rate': sr[2],
            'interest_rate': sr[3],
            'late_fee_rate': sr[4],
            'partner': sr[5],
            'cdate': timezone.localtime(timezone.now()),
            'udate': timezone.localtime(timezone.now())
        }
        lender_service_rate = LenderServiceRate(**kwargs)
        lender_service_rate.save()

def load_partner_in_loan(apps, schema_editor):
    Partner = apps.get_model("julo", "Partner")
    Loan = apps.get_model("julo", "Loan")
    jtp_partner = Partner.objects.get(name=PartnerConstant.JTP_PARTNER)
    bri_partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    grab_partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)
    loans = Loan.objects.all()
    loans = loans.exclude(application_email__icontains='julofinance.com')
    for loan in loans:
        if loan.application.product_line.product_line_code in ProductLineCodes.lended_by_bri():
            loan.partner = bri_partner
        elif loan.application.product_line.product_line_code in ProductLineCodes.lended_by_grab():
            loan.partner = grab_partner
        else:
            loan.partner = jtp_partner
        loan.save()


class Migration(migrations.Migration):

    dependencies = [
        ('julo', '0186_auto_20180213_1731'),
    ]

    operations = [
        migrations.CreateModel(
            name='DisbursementTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='loan_transaction_id', primary_key=True, serialize=False)),
                ('lender_disbursed', models.BigIntegerField(default=0)),
                ('borrower_received', models.BigIntegerField(default=0)),
                ('total_provision_received', models.BigIntegerField(default=0)),
                ('julo_provision_received', models.BigIntegerField(default=0)),
                ('lender_provision_received', models.BigIntegerField(default=0)),
                ('lender_balance_before', models.BigIntegerField(default=0)),
                ('lender_balance_after', models.BigIntegerField(default=0)),
                ('customer', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
                ('loan', models.ForeignKey(db_column='loan_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Loan')),
                ('partner', models.ForeignKey(db_column='partner_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
            ],
            options={
                'db_table': 'disbursement_transaction',
            },
        ),
        migrations.CreateModel(
            name='LenderBalance',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_balance_id', primary_key=True, serialize=False)),
                ('total_deposit', models.BigIntegerField(default=0)),
                ('total_withdrawal', models.BigIntegerField(default=0)),
                ('total_disbursed_principal', models.BigIntegerField(default=0)),
                ('total_received', models.BigIntegerField(default=0)),
                ('total_received_principal', models.BigIntegerField(default=0)),
                ('total_received_interest', models.BigIntegerField(default=0)),
                ('total_received_late_fee', models.BigIntegerField(default=0)),
                ('total_received_provision', models.BigIntegerField(default=0)),
                ('total_paidout', models.BigIntegerField(default=0)),
                ('total_paidout_principal', models.BigIntegerField(default=0)),
                ('total_paidout_interest', models.BigIntegerField(default=0)),
                ('total_paidout_late_fee', models.BigIntegerField(default=0)),
                ('total_paidout_provision', models.BigIntegerField(default=0)),
                ('available_balance', models.BigIntegerField(default=0)),
                ('outstanding_principal', models.BigIntegerField(default=0)),
                ('partner', models.OneToOneField(db_column='partner_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
            ],
            options={
                'db_table': 'lender_balance',
            },
        ),
        migrations.CreateModel(
            name='LenderBalanceEvent',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_balance_event_id', primary_key=True, serialize=False)),
                ('amount', models.BigIntegerField()),
                ('before_amount', models.BigIntegerField()),
                ('after_amount', models.BigIntegerField()),
                ('type', models.CharField(choices=[('deposit', 'deposit '), ('withdraw', 'withdraw')], max_length=50)),
                ('lender_balance', models.ForeignKey(db_column='lender_balance_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.LenderBalance')),
            ],
            options={
                'db_table': 'lender_balance_event',
            },
        ),
        migrations.CreateModel(
            name='RepaymentTransaction',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='repayment_transaction_id', primary_key=True, serialize=False)),
                ('event_date', models.DateField(blank=True, null=True)),
                ('repayment_source', models.CharField(blank=True, choices=[('borrower_bank', 'borrower_bank'), ('borrower_wallet', 'borrower_wallet')], max_length=50, null=True)),
                ('borrower_repaid', models.BigIntegerField(default=0)),
                ('borrower_repaid_principal', models.BigIntegerField(default=0)),
                ('borrower_repaid_interest', models.BigIntegerField(default=0)),
                ('borrower_repaid_late_fee', models.BigIntegerField(default=0)),
                ('lender_received', models.BigIntegerField(default=0)),
                ('lender_received_principal', models.BigIntegerField(default=0)),
                ('lender_received_interest', models.BigIntegerField(default=0)),
                ('lender_received_late_fee', models.BigIntegerField(default=0)),
                ('julo_fee_received', models.BigIntegerField(default=0)),
                ('julo_fee_received_principal', models.BigIntegerField(default=0)),
                ('julo_fee_received_interest', models.BigIntegerField(default=0)),
                ('julo_fee_received_late_fee', models.BigIntegerField(default=0)),
                ('due_amount_before', models.BigIntegerField(default=0)),
                ('due_amount_after', models.BigIntegerField(default=0)),
                ('lender_balance_before', models.BigIntegerField(default=0)),
                ('lender_balance_after', models.BigIntegerField(default=0)),
                ('payment_receipt', models.CharField(blank=True, max_length=50, null=True)),
                ('added_by', cuser.fields.CurrentUserField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
                ('loan', models.ForeignKey(db_column='loan_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Loan')),
                ('partner', models.ForeignKey(db_column='partner_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
                ('payment', models.ForeignKey(db_column='payment_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Payment')),
                ('payment_method', models.ForeignKey(blank=True, db_column='payment_method_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.PaymentMethod')),
            ],
            options={
                'db_table': 'payment_transaction',
            },
        ),
        migrations.CreateModel(
            name='LenderServiceRate',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='lender_service_rate_id', primary_key=True, serialize=False)),
                ('provision_rate', models.FloatField()),
                ('principal_rate', models.FloatField()),
                ('interest_rate', models.FloatField()),
                ('late_fee_rate', models.FloatField()),
                ('partner', models.ForeignKey(db_column='partner_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner')),
            ],
            options={
                'db_table': 'lender_service_rate',
            },
        ),
        migrations.AddField(
            model_name='partner',
            name='is_active',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
             model_name='payment',
             name='paid_interest',
             field=models.BigIntegerField(blank=True, default=0),
        ),
        migrations.AddField(
             model_name='payment',
             name='paid_late_fee',
             field=models.BigIntegerField(blank=True, default=0),
        ),
        migrations.AddField(
             model_name='payment',
             name='paid_principal',
             field=models.BigIntegerField(blank=True, default=0),
        ),
        migrations.AddField(
            model_name='loan',
            name='partner',
            field=models.ForeignKey(blank=True, db_column='partner', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Partner'),
        ),
        migrations.AlterField(
            model_name='partner',
            name='type',
            field=models.CharField(blank=True, choices=[('referrer', 'referrer'), ('receiver', 'receiver'), ('lender', 'lender')], max_length=50, null=True),
        ),
        migrations.DeleteModel(
            name='Lender',
        ),
        migrations.RunSQL(
            "ALTER TABLE disbursement_transaction ALTER COLUMN customer_id TYPE bigint;"
        ),
        migrations.RunSQL(
            "ALTER TABLE disbursement_transaction ALTER COLUMN loan_id TYPE bigint;"
        ),
        migrations.RunSQL(
            "ALTER TABLE payment_transaction ALTER COLUMN customer_id TYPE bigint;"
        ),
        migrations.RunSQL(
            "ALTER TABLE payment_transaction ALTER COLUMN loan_id TYPE bigint;"
        ),
        migrations.RunSQL(
            "ALTER TABLE payment_transaction ALTER COLUMN payment_id TYPE bigint;"
        ),
        migrations.RunPython(update_bri_partner, migrations.RunPython.noop),
        migrations.RunPython(update_grab_partner, migrations.RunPython.noop),
        migrations.RunPython(load_jtp_partner, migrations.RunPython.noop),
        migrations.RunPython(create_balance_lender, migrations.RunPython.noop),
        migrations.RunPython(create_service_rate, migrations.RunPython.noop),
    ]
