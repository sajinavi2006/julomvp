# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-05-15 11:43
from __future__ import unicode_literals
from __future__ import print_function

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from juloserver.apiv1.serializers import ApplicationOriginalSerializer
from django.forms.models import model_to_dict


def backup_applications(apps, shema_editor):
    Application = apps.get_model("julo", "Application")
    for application in Application.objects.all():
        data = model_to_dict(application)
        serializer = ApplicationOriginalSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
        else:
            print("Application {} backup failed ".format(application.id), serializer.errors)


class Migration(migrations.Migration):

    dependencies = [
        ('julo', '0067_load_stl_product_lookup'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationOriginal',
            fields=[
                ('cdate', models.DateTimeField(auto_now_add=True)),
                ('udate', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(db_column='application_id', primary_key=True, serialize=False)),
                ('loan_amount_request', models.BigIntegerField()),
                ('loan_duration_request', models.IntegerField()),
                ('loan_purpose', models.CharField(choices=[('Biaya pendidikan', 'Biaya pendidikan'), ('Biaya kesehatan', 'Biaya kesehatan'), ('Kebutuhan sehari-hari', 'Kebutuhan sehari-hari'), ('Modal usaha', 'Modal usaha'), ('Biaya liburan / umroh', 'Biaya liburan / umroh'), ('Membeli kendaraan', 'Membeli kendaraan'), ('Membeli elektronik', 'Membeli elektronik'), ('Lainnya', 'Lainnya')], max_length=100, verbose_name='Tujuan pinjaman')),
                ('loan_purpose_desc', models.TextField(blank=True)),
                ('marketing_source', models.CharField(choices=[('Teman / saudara', 'Teman / saudara'), ('Facebook', 'Facebook'), ('Artikel online', 'Artikel online'), ('Iklan online', 'Iklan online'), ('Televisi', 'Televisi'), ('Radio', 'Radio'), ('Billboard / spanduk', 'Billboard / spanduk'), ('Google Play Store', 'Google Play Store'), ('Tokopedia', 'Tokopedia'), ('Flyer', 'Flyer'), ('Lainnya', 'Lainnya')], max_length=100, verbose_name='Dari mana tahu')),
                ('payday', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(28)])),
                ('referral_code', models.CharField(blank=True, max_length=20)),
                ('is_own_phone', models.BooleanField()),
                ('fullname', models.CharField(max_length=100)),
                ('dob', models.DateField()),
                ('gender', models.CharField(choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, verbose_name='Jenis kelamin')),
                ('ktp', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(message='KTP has to be 16 numeric digits', regex='^[0-9]{16}$')])),
                ('address_street_num', models.CharField(max_length=100)),
                ('address_provinsi', models.CharField(max_length=100)),
                ('address_kabupaten', models.CharField(max_length=100)),
                ('address_kecamatan', models.CharField(max_length=100)),
                ('address_kelurahan', models.CharField(max_length=100)),
                ('address_kodepos', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('occupied_since', models.DateField()),
                ('home_status', models.CharField(choices=[('Kontrak', 'Kontrak'), ('Kos', 'Kos'), ('Milik orang tua', 'Milik orang tua'), ('Milik keluarga', 'Milik keluarga'), ('Milik sendiri, lunas', 'Milik sendiri, lunas'), ('Milik sendiri, mencicil', 'Milik sendiri, mencicil'), ('Lainnya', 'Lainnya')], max_length=50, verbose_name='Status domisili')),
                ('landlord_mobile_phone', models.CharField(blank=True, max_length=50)),
                ('mobile_phone_1', models.CharField(max_length=50)),
                ('has_whatsapp_1', models.NullBooleanField()),
                ('mobile_phone_2', models.CharField(blank=True, max_length=50, null=True)),
                ('has_whatsapp_2', models.NullBooleanField()),
                ('email', models.EmailField(max_length=254)),
                ('bbm_pin', models.CharField(blank=True, max_length=50, null=True)),
                ('twitter_username', models.CharField(blank=True, max_length=50, null=True)),
                ('instagram_username', models.CharField(blank=True, max_length=50, null=True)),
                ('marital_status', models.CharField(choices=[('Lajang', 'Lajang'), ('Menikah', 'Menikah'), ('Cerai', 'Cerai'), ('Janda / duda', 'Janda / duda')], max_length=50, verbose_name='Status sipil')),
                ('dependent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Jumlah tanggungan')),
                ('spouse_name', models.CharField(blank=True, max_length=100, null=True)),
                ('spouse_dob', models.DateField(blank=True, null=True)),
                ('spouse_mobile_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('spouse_has_whatsapp', models.NullBooleanField()),
                ('kin_name', models.CharField(max_length=100)),
                ('kin_dob', models.DateField(blank=True, null=True)),
                ('kin_gender', models.CharField(choices=[('Pria', 'Pria'), ('Wanita', 'Wanita')], max_length=10, verbose_name='Jenis kelamin kerabat')),
                ('kin_mobile_phone', models.CharField(max_length=50)),
                ('kin_relationship', models.CharField(choices=[('Orang tua', 'Orang tua'), ('Saudara kandung', 'Saudara kandung'), ('Famili lainnya', 'Famili lainnya')], max_length=50, verbose_name='Hubungan kerabat')),
                ('job_type', models.CharField(choices=[('Pegawai swasta', 'Pegawai swasta'), ('Pegawai negeri', 'Pegawai negeri'), ('Pengusaha', 'Pengusaha'), ('Freelance', 'Freelance'), ('Pekerja rumah tangga', 'Pekerja rumah tangga'), ('Lainnya', 'Lainnya'), ('Staf rumah tangga', 'Staf rumah tangga'), ('Ibu rumah tangga', 'Ibu rumah tangga'), ('Mahasiswa', 'Mahasiswa'), ('Tidak bekerja', 'Tidak bekerja')], max_length=50, verbose_name='Tipe pekerjaan')),
                ('job_industry', models.CharField(blank=True, max_length=100)),
                ('job_function', models.CharField(blank=True, max_length=100)),
                ('job_description', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('company_phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('work_kodepos', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Kode pos has to be 5 numeric digits', regex='^[0-9]{5}$')])),
                ('job_start', models.DateField(blank=True, null=True)),
                ('monthly_income', models.BigIntegerField()),
                ('income_1', models.BigIntegerField(blank=True, null=True)),
                ('income_2', models.BigIntegerField(blank=True, null=True)),
                ('income_3', models.BigIntegerField(blank=True, null=True)),
                ('last_education', models.CharField(choices=[('SD', 'SD'), ('SLTP', 'SLTP'), ('SLTA', 'SLTA'), ('Diploma', 'Diploma'), ('S1', 'S1'), ('S2', 'S2'), ('S3', 'S3')], max_length=50, verbose_name='Pendidikan terakhir')),
                ('college', models.CharField(blank=True, max_length=100, null=True)),
                ('major', models.CharField(blank=True, max_length=100, null=True)),
                ('graduation_year', models.IntegerField()),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('has_other_income', models.BooleanField(default=False)),
                ('other_income_amount', models.BigIntegerField(blank=True, null=True)),
                ('other_income_source', models.CharField(blank=True, max_length=250, null=True)),
                ('monthly_housing_cost', models.BigIntegerField()),
                ('monthly_expenses', models.BigIntegerField()),
                ('total_current_debt', models.BigIntegerField()),
                ('vehicle_type_1', models.CharField(choices=[('Sepeda motor', 'Sepeda motor'), ('Mobil', 'Mobil'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, verbose_name='Kendaraan pribadi 1')),
                ('vehicle_ownership_1', models.CharField(blank=True, choices=[('Lunas', 'Lunas'), ('Mencicil', 'Mencicil'), ('Diagunkan', 'Diagunkan'), ('Lainnya', 'Lainnya'), ('Tidak punya', 'Tidak punya')], max_length=50, null=True, verbose_name='Kepemilikan 1')),
                ('bank_name', models.CharField(max_length=250)),
                ('bank_branch', models.CharField(max_length=100)),
                ('bank_account_number', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Bank account number has to be numeric digits', regex='^[0-9]+$')])),
                ('is_term_accepted', models.BooleanField(default=False)),
                ('is_verification_agreed', models.BooleanField(default=False)),
                ('is_document_submitted', models.NullBooleanField()),
                ('is_sphp_signed', models.NullBooleanField()),
                ('sphp_exp_date', models.DateField(blank=True, null=True)),
                ('application_xid', models.BigIntegerField(blank=True, null=True)),
                ('app_version', models.CharField(blank=True, max_length=10, null=True)),
                ('application_number', models.IntegerField(blank=True, null=True)),
                ('gmail_scraped_status', models.CharField(choices=[('Not scraped', 'Not scraped'), ('Working', 'Working'), ('Done', 'Done')], default='Not scraped', max_length=15)),
                ('application_status', models.ForeignKey(db_column='application_status_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.StatusLookup')),
                ('customer', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Customer')),
                ('device', models.ForeignKey(db_column='device_id', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.Device')),
                ('product_line_code', models.ForeignKey(db_column='product_line_code', on_delete=django.db.models.deletion.DO_NOTHING, to='julo.ProductLine')),
            ],
            options={
                'db_table': 'application_original',
            },
        ), migrations.RunPython(backup_applications, migrations.RunPython.noop)
    ]
