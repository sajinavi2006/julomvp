# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-03-15 06:33
from __future__ import unicode_literals

import logging

from django.db import migrations

from juloserver.julo.statuses import ApplicationStatusCodes


logger = logging.getLogger(__name__)


from juloserver.julo.models import ApplicationHistory



from juloserver.julo.models import Application



def remove_duplicate_application_history(apps, schema_editor):

    
    

    ignored_old_statuses = [
        ApplicationStatusCodes.NOT_YET_CREATED,
        ApplicationStatusCodes.FORM_SUBMITTED,
        ApplicationStatusCodes.OFFER_MADE_TO_CUSTOMER,
        ApplicationStatusCodes.ACTIVATION_CALL_SUCCESSFUL
    ]

    applications = Application.objects.all()
    for application in applications:
        ah_list = list(
            ApplicationHistory.objects.filter(application=application)
        )

        for ah_to_delete in ah_list:

            # Customer triggered, so skip it
            if ah_to_delete.status_old in ignored_old_statuses:
                continue

            # Not triggered by the signal, so skip it
            if ah_to_delete.change_reason != "system_triggered":
                continue

            duplicated = False
            ah_list_to_check = [
                ah for ah in ah_list if ah.id != ah_to_delete.id
            ]
            for ah in ah_list_to_check:

                # Check if there is a duplicate, which means the same status
                # change but with a different change reason

                if ah.status_old != ah_to_delete.status_old:
                    continue
                if ah.status_new != ah_to_delete.status_new:
                    continue
                if ah.change_reason != "system_triggered":
                    duplicated = True

            if duplicated:
                logger.info({
                    'action': 'deleting',
                    'application_id': application.id,
                    'application_history_id': ah_to_delete.id,
                    'status_old': ah_to_delete.status_old,
                    'change_reason': ah_to_delete.change_reason
                })
                ah_to_delete.delete()


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(
            remove_duplicate_application_history
        ),
    ]
