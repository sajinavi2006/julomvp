# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-05-09 10:21
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.models import WorkflowStatusPath, Workflow
from juloserver.julo.constants import WorkflowConst

def create_new_workflow_path(apps, _schema_editor):
    workflow = Workflow.objects.get(
        name=WorkflowConst.LEGACY
    )
    entries = []
    entries.append({"status_previous":210,"status_next":211,"type":"happy"})
    entries.append({"status_previous":211,"status_next":212,"type":"happy"})
    entries.append({"status_previous":212,"status_next":220,"type":"happy"})
    entries.append({"status_previous":213,"status_next":220,"type":None})
    entries.append({"status_previous":210,"status_next":216,"type":"graveyard"})
    entries.append({"status_previous":212,"status_next":218,"type":"graveyard"})
    entries.append({"status_previous":212,"status_next":216,"type":"force","agent_accessible":False})
    entries.append({"status_previous":212,"status_next":219,"type":"graveyard"})
    entries.append({"status_previous":218,"status_next":215,"type":"graveyard"})
    entries.append({"status_previous":220,"status_next":216,"type":"force","agent_accessible":False})
    entries.append({"status_previous":213,"status_next":216,"type":"graveyard"})
    entries.append({"status_previous":218,"status_next":213,"type":"detour"})
    entries.append({"status_previous":218,"status_next":212,"type":"detour"})
    entries.append({"status_previous":212,"status_next":214,"type":"detour"})
    entries.append({"status_previous":212,"status_next":213,"type":"force","agent_accessible":False})
    entries.append({"status_previous":211,"status_next":216,"type":"happy"})
    entries.append({"status_previous":211,"status_next":219,"type":"graveyard"})
    bulk_create = []

    for entry in entries:
        workflow_status_path = WorkflowStatusPath.objects.filter(
            status_previous=entry['status_previous'],
            status_next=entry['status_next'],
            workflow__name=workflow,
        ).exists()

        if not workflow_status_path:
            bulk_create.append(WorkflowStatusPath(
                status_previous=entry['status_previous'],
                status_next=entry['status_next'],
                workflow=workflow,
                type=entry['type'],
                agent_accessible=entry['agent_accessible'] if 'agent_accessible' in entry else True
            ))

    if bulk_create:
        WorkflowStatusPath.objects.bulk_create(bulk_create)

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_new_workflow_path, migrations.RunPython.noop),
    ]
