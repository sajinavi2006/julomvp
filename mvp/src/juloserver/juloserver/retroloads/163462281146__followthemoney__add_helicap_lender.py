# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-10-19 05:53
from __future__ import unicode_literals
from builtins import range
import random
import string

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.models import User
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.followthemoney.constants import BankAccountType
from juloserver.julo.models import (
    ProductProfile,
    LenderDisburseCounter,
    LenderCustomerCriteria,
    LenderProductCriteria,
    Partner,
    FeatureSetting,
)
from juloserver.julo.constants import ProductLineCodes


def create_helicap_lender(apps, schema_editor):
    jtp = LenderCurrent.objects.filter(lender_name="jtp").last()
    if not jtp:
        return
    jtp_partner = jtp.user.partner

    user = User.objects.filter(username='helicap').first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(random.choice(alphabet) for i in range(8))
        user = User.objects.create_user("helicap", "zq@heli-cap.com", password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner = Partner.objects.create(
            user=user,
            name="helicap",
            type="lender",
            email=user.email,
            is_active=False,
            poc_name="Zhang Quan Gan",
            poc_email=user.email,
            poc_phone="+6591700873",
            source_of_fund="dana_investasi",
            company_name="HELICAP FUND I PTE. LTD",
            company_address="Singapore",
            business_type="perusahaan_umum",
            agreement_letter_number=jtp_partner.agreement_letter_number,
        )
        lender = LenderCurrent.objects.create(
            user=user,
            lender_name="helicap",
            lender_address="Singapore",
            business_type="perusahaan_umum",
            poc_email=user.email,
            poc_name="Zhang Quan Gan",
            poc_phone="+6591700873",
            poc_position="Finance",
            source_of_fund="dana_investasi",
            lender_display_name='HELICAP FUND I PTE. LTD',
            service_fee=0,
            lender_status="inactive",
            addendum_number=jtp.addendum_number,
            insurance=jtp.insurance,
            pks_number=jtp.pks_number,
            xfers_token=jtp.xfers_token,
        )
        LenderDisburseCounter.objects.create(lender=lender, partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderCustomerCriteria.objects.create(lender=lender, partner=partner)
        product_profiles = ProductProfile.objects.filter(
            code=ProductLineCodes.J1).values_list('id', flat=True)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=list(product_profiles),
        )

        jtp_bank_accounts = jtp.lenderbankaccount_set.filter(bank_account_status="active")
        banks = []
        for bank_account in jtp_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            bank_account.bank_name = "BANK SAHABAT SAMPOERNA"
            bank_account.account_name = "HELICAP FUND I PTE. LTD"
            if bank_account.bank_account_type == BankAccountType.RDL:
                bank_account.accouont_number = "1022002232"

            elif bank_account.bank_account_type == BankAccountType.DEPOSIT_VA:
                bank_account.accouont_number = " 1030002000000"

            elif bank_account.bank_account_type == BankAccountType.DISBURSEMENT_VA:
                bank_account.accouont_number = "6010003000010300"

            elif bank_account.bank_account_type == BankAccountType.REPAYMENT_VA:
                bank_account.accouont_number = "1030007000000"

            elif bank_account.bank_account_type == BankAccountType.WITHDRAWAL:
                bank_account.accouont_number = "1030002000000"

            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_template in jtp.loanagreementtemplate_set.all():
            is_agreement_exists = LoanAgreementTemplate.objects.filter(
                lender=lender, agreement_type=agreement_template.agreement_type
            ).exists()
            if not is_agreement_exists:
                agreement_template.pk = None
                agreement_template.lender = lender
                agreement_templates.append(agreement_template)
        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        LenderApproval.objects.create(
            partner=partner,
            is_auto=jtp_partner.lenderapproval.is_auto,
            start_date=timezone.localtime(timezone.now()),
            end_date=None,
            delay=jtp_partner.lenderapproval.delay,
            expired_in=jtp_partner.lenderapproval.expired_in,
            is_endless=jtp_partner.lenderapproval.is_endless,
        )


def bypass_lender_matchmaking_process(apps, schema_editor):
    feature_setting, _ = FeatureSetting.objects.get_or_create(
        feature_name="bypass_lender_matchmaking_process",
        description='Bypass lender matchmaking process',
        category='followthemoney'
    )
    feature_setting.parameters = {
        "application_ids": [],
        "lender_name": "helicap",
    }
    feature_setting.save()

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_helicap_lender, migrations.RunPython.noop),
        migrations.RunPython(bypass_lender_matchmaking_process, migrations.RunPython.noop),
    ]
