# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2022-11-30 04:03
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.auth.models import Group, User

from juloserver.account.models import AccountLookup
from juloserver.application_flow.constants import PartnerNameConstant
from juloserver.merchant_financing.web_app.constants import PARTNERSHIP_MF_AXIATA_BANK_NAME
from juloserver.disbursement.constants import NameBankValidationStatus
from juloserver.disbursement.models import NameBankValidation
from juloserver.julo.models import (
    Workflow, WorkflowStatusPath, WorkflowStatusNode,
    Partner, ProductLine, ProductProfile, ProductLookup
)
from juloserver.julo.constants import WorkflowConst
from juloserver.julo.product_lines import ProductLineCodes
from juloserver.portal.object.product_profile.services import generate_product_lookup
from juloserver.partnership.constants import PartnershipAccountLookup


def add_partnership_data_requirements(apps, _schema_editor):
    group = Group.objects.get(name="julo_partners")

    user, created = User.objects.get_or_create(
        username=PartnerNameConstant.AXIATA_WEB,
        email='axiata_web@axiata.co.id',
    )
    user.groups.add(group)

    partner = Partner.objects.create(
        user=user,
        poc_email='axiata_web@axiata.co.id',
        poc_phone='Axiata Web merchant financing',
        name=PartnerNameConstant.AXIATA_WEB,
        email='axiata_web@axiata.co.id',
        phone='',   
        type='referrer',
        company_name='',
        company_address='',
        business_type='',
        is_active=True
    )

    # Create Workflow
    workflow = Workflow.objects.create(
        name=WorkflowConst.MF_STANDARD_PRODUCT_WORKFLOW,
        desc="this is a workflow for merchant_financing web app",
        is_active=True,
        handler="PartnershipMfWebAppWorkflowHandler"
    )

    # Create Workflow Status Path
    WorkflowStatusPath.objects.get_or_create(
        status_previous=121,
        status_next=135,
        type='graveyard',
        workflow=workflow
    )

    WorkflowStatusPath.objects.get_or_create(
        status_previous=100,
        status_next=105,
        type='happy',
        workflow=workflow
    )

    WorkflowStatusPath.objects.get_or_create(
        status_previous=105,
        status_next=120,
        type='happy',
        workflow=workflow
    )

    WorkflowStatusPath.objects.get_or_create(
        status_previous=120,
        status_next=121,
        type='happy',
        workflow=workflow
    )

    WorkflowStatusPath.objects.get_or_create(
        status_previous=121,
        status_next=130,
        type='happy',
        workflow=workflow
    )

    WorkflowStatusPath.objects.get_or_create(
        status_previous=130,
        status_next=190,
        type='happy',
        workflow=workflow
    )

    # Create Workflow Status node
    WorkflowStatusNode.objects.get_or_create(
        status_node=100,
        handler='PartnershipMF100Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=105,
        handler='PartnershipMF105Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=120,
        handler='PartnershipMF120Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=121,
        handler='PartnershipMF121Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=130,
        handler='PartnershipMF130Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=135,
        handler='PartnershipMF135Handler',
        workflow=workflow
    )

    WorkflowStatusNode.objects.get_or_create(
        status_node=190,
        handler='PartnershipMF190Handler',
        workflow=workflow
    )

    product_profile = ProductProfile.objects.create(
        name="AXIATA WEB",
        min_amount=1_000_000,
        max_amount=2_000_000_000,
        min_duration=30,
        max_duration=360,
        min_interest_rate=0.012,
        max_interest_rate=0.012,
        interest_rate_increment=0,
        payment_frequency="Monthly",
        min_origination_fee=0,
        max_origination_fee=0,
        origination_fee_increment=0,
        late_fee=0.06,
        cashback_initial=0,
        cashback_payment=0,
        is_active=True,
        debt_income_ratio=0,
        is_product_exclusive=True,
        is_initial=True,
        code=ProductLineCodes.AXIATA_WEB
    )

    product_line = ProductLine.objects.create(
        product_line_code=ProductLineCodes.AXIATA_WEB,
        product_line_type='AXIATA WEB',
        min_amount=1_000_000,
        max_amount=2_000_000_000,
        min_duration=30,
        max_duration=360,
        min_interest_rate=0.012,
        max_interest_rate=0.012,
        payment_frequency='Monthly',
        product_profile=product_profile
    )

    # product lookup
    product_lookup_list = generate_product_lookup(product_profile, product_line)
    for product_lookup_data in product_lookup_list:
        product_lookup = ProductLookup(**product_lookup_data)
        product_lookup.save()

    AccountLookup.objects.get_or_create(
        name=PartnershipAccountLookup.MERCHANT_FINANCING,
        workflow=workflow,
        payment_frequency='monthly',
        partner=partner,
        moengage_mapping_number=1
    )

    # Create Axiata Web Retroload: First retroload will be dummy data
    # But in the next can change by script
    NameBankValidation.objects.create(
        bank_code='BCA',
        account_number='9999999999999',
        name_in_bank=PARTNERSHIP_MF_AXIATA_BANK_NAME,
        mobile_phone='087790909090',
        method='xfers',
        validation_status=NameBankValidationStatus.SUCCESS
    )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(add_partnership_data_requirements, migrations.RunPython.noop),
    ]
