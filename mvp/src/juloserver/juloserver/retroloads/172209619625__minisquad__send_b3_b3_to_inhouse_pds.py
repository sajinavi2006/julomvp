# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-07-27 16:03
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.tasks2.dialer_system_task import (
    process_delete_account_payment_b3_b4_from_vendor,
)
from juloserver.minisquad.constants import (
    FeatureNameConst,
    DialerSystemConst,
)


def setup_send_b3_b4_to_inhouse_pds(apps, schema_editor):
    # define all bucker name for B3 and B4
    bucket_3 = DialerSystemConst.DIALER_BUCKET_3
    bucket_3_nc = DialerSystemConst.DIALER_BUCKET_3_NC
    bucket_3_cohort = 'cohort_campaign_{}'.format(DialerSystemConst.DIALER_BUCKET_3)
    bucket_3_nc_cohort = 'cohort_campaign_{}'.format(DialerSystemConst.DIALER_BUCKET_3_NC)
    bucket_3_special = DialerSystemConst.DIALER_SPECIAL_COHORT.format(
        DialerSystemConst.DIALER_BUCKET_3
    )
    bucket_3_nc_special = DialerSystemConst.DIALER_SPECIAL_COHORT.format(
        DialerSystemConst.DIALER_BUCKET_3_NC
    )

    bucket_4 = DialerSystemConst.DIALER_BUCKET_4
    bucket_4_nc = DialerSystemConst.DIALER_BUCKET_4_NC
    bucket_4_cohort = 'cohort_campaign_{}'.format(DialerSystemConst.DIALER_BUCKET_4)
    bucket_4_nc_cohort = 'cohort_campaign_{}'.format(DialerSystemConst.DIALER_BUCKET_4_NC)
    bucket_4_special = DialerSystemConst.DIALER_SPECIAL_COHORT.format(
        DialerSystemConst.DIALER_BUCKET_4
    )
    bucket_4_nc_special = DialerSystemConst.DIALER_SPECIAL_COHORT.format(
        DialerSystemConst.DIALER_BUCKET_4_NC
    )

    # inactive feature setting for split B3 inhouse/vendor
    FeatureSetting.objects.filter(feature_name=FeatureNameConst.BLOCK_TRAFFIC_INTELIX).update(
        is_active=False
    )

    # create new airudder configuration for bucket related
    feature_group_mapping_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_TASKS_STRATEGY_CONFIG
    ).last()
    if not feature_group_mapping_config:
        return
    params = feature_group_mapping_config.parameters
    params_dict = {
        "autoQA": "N",
        "acwTime": "20",
        "end_time": "20:00",
        "ringLimit": "0",
        "rest_times": [["12:00", "13:00"]],
        "slotFactor": "",
        "start_time": "08:00",
        "dialingMode": "0",
        "maxLostRate": "5",
        "qaLimitRate": "100",
        "repeatTimes": "3",
        "callInterval": "0",
        "dialingOrder": [
            # 'mobile_phone_1',
            'mobile_phone_2',
            'no_telp_pasangan',
            'no_telp_kerabat',
            'telp_perusahaan',
        ],
        "qaLimitLength": "0",
        "autoSlotFactor": "1",
        "bulkCallInterval": "300",
        "resultStrategies": "on",
        "contactNumberInterval": "300",
        "resultStrategiesConfig": [],
    }
    list_of_bucket_name = [
        bucket_3,
        bucket_3_nc,
        bucket_3_cohort,
        bucket_3_nc_cohort,
        bucket_3_special,
        bucket_3_nc_special,
        bucket_4,
        bucket_4_nc,
        bucket_4_cohort,
        bucket_4_nc_cohort,
        bucket_4_special,
        bucket_4_nc_special,
    ]
    for bucket_name in list_of_bucket_name:
        params.update({bucket_name: params_dict})
    feature_group_mapping_config.parameters = params
    feature_group_mapping_config.save()

    feature_agent_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_GROUP_NAME_CONFIG
    ).last()
    if not feature_agent_group_config:
        return

    agent_params = feature_agent_group_config.parameters
    for bucket_name in list_of_bucket_name:
        agent_params[bucket_name] = "Group_Bucket3&4"
    feature_agent_group_config.parameters = agent_params
    feature_agent_group_config.save()

    # set Bucket 4 J1 as eligilble bucket send to inhouse
    feature_setting_rollout = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_FULL_ROLLOUT, is_active=True
    ).last()
    if not feature_setting_rollout:
        return
    rollout_params = feature_setting_rollout.parameters
    rollout_params["eligible_bucket_number"] = [4, 3, 2, 0, 1, -1, -3, -5]
    feature_setting_rollout.parameters = rollout_params
    feature_setting_rollout.save()

    # set batch threshold upload to AiRudder
    feature_batching_threshold_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_SEND_BATCHING_THRESHOLD
    ).last()
    if not feature_batching_threshold_group_config:
        return

    params_threshold = feature_batching_threshold_group_config.parameters
    for bucket_name in list_of_bucket_name:
        params_threshold[bucket_name] = 5000
    feature_batching_threshold_group_config.parameters = params_threshold
    feature_batching_threshold_group_config.save()

    # deleting account payment data from vendor
    # run in the background
    process_delete_account_payment_b3_b4_from_vendor.apply_async(countdown=3600)


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(setup_send_b3_b4_to_inhouse_pds, migrations.RunPython.noop),
    ]
