# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-03-27 08:10
from __future__ import unicode_literals
from builtins import range
import random
import string

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.models import User
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.followthemoney.constants import (
    BankAccountType,
    LoanAgreementType,
)
from juloserver.julo.models import (
    ProductProfile,
    LenderDisburseCounter,
    LenderCustomerCriteria,
    LenderProductCriteria,
    Partner,
)
from juloserver.julo.constants import ProductLineCodes

def create_vospay_lender(apps, schema_editor):
    base_lender = LenderCurrent.objects.filter(lender_name="jh").last()
    if not base_lender:
        return
    base_partner = base_lender.user.partner

    user = User.objects.filter(username='vospay_lender').first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(random.choice(alphabet) for i in range(8))
        user = User.objects.create_user("vospay_lender", "tito.tambayong@gmail.com", password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner = Partner.objects.create(
            user=user,
            name="vospay_lender",
            type="lender",
            email=user.email,
            is_active=False,
            poc_name="Tito Gamaliel Tambayong",
            poc_email=user.email,
            poc_phone="+628129529009",
            source_of_fund="pinjaman",
            company_name="PT VOSTROPAY PARAMARTA NUSANTARA",
            company_address=("Puri Indah Finansial Tower 09/06 Jalan Puri Lingkar Dalam "
                             "Blok T Kembangan Jakarta Barat"),
            business_type="Financing Agent",
            agreement_letter_number=base_partner.agreement_letter_number,
            is_csv_upload_applicable=base_partner.is_csv_upload_applicable,
            is_disbursement_to_partner_bank_account=(
                base_partner.is_disbursement_to_partner_bank_account
            ),
            is_disbursement_to_distributor_bank_account=(
                base_partner.is_disbursement_to_distributor_bank_account
            ),
        )
        lender = LenderCurrent.objects.create(
            user=user,
            lender_name="vospay_lender",
            lender_address=("Puri Indah Finansial Tower 09/06 Jalan Puri Lingkar Dalam "
                             "Blok T Kembangan Jakarta Barat"),
            business_type="Financing Agent",
            poc_email=user.email,
            poc_name="Tito Gamaliel Tambayong",
            poc_phone="+628129529009",
            poc_position="Direktur",
            source_of_fund="lainnya",
            lender_display_name='PT VOSTROPAY PARAMARTA NUSANTARA',
            service_fee=0,
            lender_status="inactive",
            addendum_number=base_lender.addendum_number,
            insurance=base_lender.insurance,
            pks_number=base_lender.pks_number,
            xfers_token=base_lender.xfers_token,
            is_master_lender=base_lender.is_master_lender,
            is_manual_lender_balance=base_lender.is_manual_lender_balance,
            is_low_balance_notification=base_lender.is_low_balance_notification,
            is_xfers_lender_flow=base_lender.is_xfers_lender_flow,
            is_bss_balance_include=base_lender.is_bss_balance_include,
            is_only_escrow_balance=base_lender.is_only_escrow_balance,
            minimum_balance=base_lender.minimum_balance,
        )
        LenderDisburseCounter.objects.create(lender=lender,partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderCustomerCriteria.objects.create(
            lender=lender, partner=partner, credit_score=["A-", "B+", "B-"])
        product_profiles = ProductProfile.objects.filter(
            code=ProductLineCodes.J1).values_list('id', flat=True)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=list(product_profiles),
        )

        jtp_bank_accounts = base_lender.lenderbankaccount_set.filter(bank_account_status="active")
        banks = []
        for bank_account in jtp_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            if bank_account.bank_account_type == BankAccountType.RDL:
                bank_account.bank_name = "BANK NEGARA INDONESIA (PERSERO), Tbk (BNI)"
                bank_account.account_name = "JULO HOLDINGS PTE LTD"
                bank_account.accouont_number = "2000555447"
            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_type in LoanAgreementType.LIST:
            filter = {"agreement_type": agreement_type}
            if agreement_type == LoanAgreementType.SKRTP:
                filter["lender"] = None
            base_agreement_template = LoanAgreementTemplate.objects.filter(**filter).last()
            if base_agreement_template:
                agreement_templates.append(
                    LoanAgreementTemplate(
                        lender=lender,
                        body=base_agreement_template.body,
                        is_active=True,
                        agreement_type=agreement_type,
                    )
                )

        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        LenderApproval.objects.create(
            partner=partner,
            is_auto=base_partner.lenderapproval.is_auto,
            start_date=timezone.localtime(timezone.now()),
            end_date=None,
            delay=base_partner.lenderapproval.delay,
            expired_in=base_partner.lenderapproval.expired_in,
            is_endless=base_partner.lenderapproval.is_endless,
        )

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_vospay_lender, migrations.RunPython.noop)
    ]
