# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2018-04-06 13:53
from __future__ import unicode_literals

from django.db import migrations, models
from juloserver.julo.product_lines import ProductLineCodes
from juloserver.julo.partners import PartnerConstant


credit_score = {
    ProductLineCodes.MTL1: ['A-', 'B+'],
    ProductLineCodes.MTL2: ['A-', 'B+'],
    ProductLineCodes.CTL1: ['C'],
    ProductLineCodes.CTL2: ['C'],
    ProductLineCodes.STL1: ['B+', 'A-', 'B-'],
    ProductLineCodes.STL2: ['B+', 'A-', 'B-'],
    ProductLineCodes.BRI1: ['A-', "B+"],
    ProductLineCodes.BRI2: ['A-', "B+"],
    ProductLineCodes.GRAB1: ['A-', 'B+', 'B-', 'C'],
    ProductLineCodes.GRAB2: ['A-', 'B+', 'B-', 'C']
}

product_type = {
    ProductLineCodes.MTL1: {
        "is_product_exclusive": False,
        "is_initial": True,
    },
    ProductLineCodes.MTL2: {
        "is_product_exclusive": False,
        "is_initial": False,
    },
    ProductLineCodes.CTL1: {
        "is_product_exclusive": False,
        "is_initial": True,
    },
    ProductLineCodes.CTL2: {
        "is_product_exclusive": False,
        "is_initial": False,
    },
    ProductLineCodes.STL1: {
        "is_product_exclusive": False,
        "is_initial": True,
    },
    ProductLineCodes.STL2: {
        "is_product_exclusive": False,
        "is_initial": False,
    },
    ProductLineCodes.BRI1: {
        "is_product_exclusive": True,
        "is_initial": True,
    },
    ProductLineCodes.BRI2: {
        "is_product_exclusive": True,
        "is_initial": False,
    },
    ProductLineCodes.GRAB1: {
        "is_product_exclusive": True,
        "is_initial": True,
    },
    ProductLineCodes.GRAB2: {
        "is_product_exclusive": True,
        "is_initial": False,
    },
}

dti_multiplier = {
    ProductLineCodes.MTL1: 0.3,
    ProductLineCodes.MTL2: 0.3,
    ProductLineCodes.CTL1: None,
    ProductLineCodes.CTL2: None,
    ProductLineCodes.STL1: 0.4,
    ProductLineCodes.STL2: 0.4,
    ProductLineCodes.BRI1: 0.3,
    ProductLineCodes.BRI2: 0.3,
    ProductLineCodes.GRAB1: 0.4,
    ProductLineCodes.GRAB2: 0.4
}

from juloserver.julo.models import ProductCustomerCriteria


from juloserver.julo.models import ProductProfile


from juloserver.julo.models import ProductLookup


from juloserver.julo.models import ProductLine


def get_values_from_productlookup(product_lookup_list, product_line_code):
    min_origination_fee = 0.00
    max_origination_fee = 0.00
    late_fee = 0.00
    cashback_initial = 0.00
    cashback_payment = 0.00
    interest_rate_increment = 0.00
    origination_fee_increment = 0.00

    if len(product_lookup_list) > 0:
        min_origination_fee = product_lookup_list.first().origination_fee_pct
        max_origination_fee = product_lookup_list.last().origination_fee_pct
        late_fee = product_lookup_list.first().late_fee_pct
        cashback_initial =product_lookup_list.first().cashback_initial_pct
        cashback_payment = product_lookup_list.first().cashback_payment_pct

        if product_line_code not in ProductLineCodes.grab():
            if len(product_lookup_list) > 1:
                interest_rate1 = product_lookup_list[0].interest_rate
                interest_rate2 = product_lookup_list[1].interest_rate
                origination_fee1 = product_lookup_list[0].origination_fee_pct
                origination_fee2 = product_lookup_list[1].origination_fee_pct
                interest_rate_increment = interest_rate2 - interest_rate1
                origination_fee_increment = origination_fee2 - origination_fee1

    return {'min_origination_fee': min_origination_fee,
            'max_origination_fee': max_origination_fee,
            'late_fee': late_fee,
            'cashback_initial': cashback_initial,
            'cashback_payment': cashback_payment,
            'interest_rate_increment': interest_rate_increment,
            'origination_fee_increment': origination_fee_increment}


from juloserver.julo.models import ProductCustomerCriteria


from juloserver.julo.models import ProductProfile


from juloserver.julo.models import ProductLookup


from juloserver.julo.models import ProductLine


def retroload_product_profile(apps, schema_editor):
    
    
    
    

    product_line_list = ProductLine.objects.filter(product_profile=None)
    for product_line in product_line_list:
        product_line_code = product_line.product_line_code
        is_initial = product_type[int(product_line_code)]['is_initial']
        is_product_exclusive = product_type[int(product_line_code)]['is_product_exclusive']
        product_lookup_list = ProductLookup.objects.filter(
            product_line=product_line).order_by('interest_rate')
        pl_values = get_values_from_productlookup(product_lookup_list, product_line_code)

        product_profile = ProductProfile.objects.create(
            code=product_line.product_line_code,
            name=product_line.product_line_type,
            min_amount=product_line.min_amount,
            max_amount=product_line.max_amount,
            min_duration=product_line.min_duration,
            max_duration=product_line.max_duration,
            min_interest_rate=product_line.min_interest_rate,
            max_interest_rate=product_line.max_interest_rate,
            payment_frequency=product_line.payment_frequency,
            min_origination_fee=pl_values['min_origination_fee'],
            max_origination_fee=pl_values['max_origination_fee'],
            interest_rate_increment=pl_values['interest_rate_increment'],
            origination_fee_increment=pl_values['origination_fee_increment'],
            cashback_initial=pl_values['cashback_initial'],
            cashback_payment=pl_values['cashback_payment'],
            debt_income_ratio=dti_multiplier[int(product_line.product_line_code)],
            is_initial=is_initial,
            is_product_exclusive=is_product_exclusive
        )
        product_customer_criteria = ProductCustomerCriteria.objects.create(
            product_profile=product_profile,
            credit_score=credit_score[int(product_line.product_line_code)])
        product_line.product_profile = product_profile
        product_line.save()
        product_lookup_list = ProductLookup.objects.filter(product_line=product_line)

        for product_lookup in product_lookup_list:
            product_lookup.product_profile = product_profile
            product_lookup.save()


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(retroload_product_profile, migrations.RunPython.noop),
    ]
