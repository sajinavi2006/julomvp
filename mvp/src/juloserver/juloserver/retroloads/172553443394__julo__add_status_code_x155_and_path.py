# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-09-05 11:07
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.constants import WorkflowConst, FeatureNameConst
from juloserver.julo.models import (
    WorkflowStatusPath,
    Workflow,
    WorkflowStatusNode,
    StatusLookup,
    FeatureSetting,
)
from juloserver.julo.statuses import ApplicationStatusCodes


def run(apps, _schema_editor):
    if not StatusLookup.objects.filter(status_code=ApplicationStatusCodes.WAITING_LIST).exists():
        StatusLookup.objects.create(
            status_code=ApplicationStatusCodes.WAITING_LIST,
            status="Waiting List",
        )

    workflow = Workflow.objects.filter(name=WorkflowConst.JULO_ONE).last()

    if not WorkflowStatusNode.objects.filter(
        status_node=ApplicationStatusCodes.WAITING_LIST,
        handler="JuloOne155Handler",
        workflow=workflow,
    ).exists():
        WorkflowStatusNode.objects.create(
            status_node=ApplicationStatusCodes.WAITING_LIST,
            handler="JuloOne155Handler",
            workflow=workflow,
        )

    paths = [
        (ApplicationStatusCodes.FORM_PARTIAL, ApplicationStatusCodes.WAITING_LIST, "detour"),
        (ApplicationStatusCodes.WAITING_LIST, ApplicationStatusCodes.DOCUMENTS_SUBMITTED, "happy"),
        (
            ApplicationStatusCodes.WAITING_LIST,
            ApplicationStatusCodes.CUSTOMER_ON_DELETION,
            "detour",
        ),
        (
            ApplicationStatusCodes.CUSTOMER_ON_DELETION,
            ApplicationStatusCodes.WAITING_LIST,
            "detour",
        ),
    ]
    for path in paths:
        is_exist = WorkflowStatusPath.objects.filter(
            status_previous=path[0], status_next=path[1], workflow=workflow
        ).exists()

        if is_exist:
            continue

        WorkflowStatusPath.objects.create(
            workflow=workflow,
            status_previous=path[0],
            status_next=path[1],
            type=path[2],
            is_active=True,
            customer_accessible=False,
            agent_accessible=True,
        )

    if not FeatureSetting.objects.filter(feature_name=FeatureNameConst.WAITING_LIST).exists():
        FeatureSetting.objects.create(
            feature_name=FeatureNameConst.WAITING_LIST,
            parameters={"FTC achieved": False},
            is_active=True,
            category='onboarding',
            description="feature setting for waiting list",
        )


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(run, migrations.RunPython.noop),
    ]
