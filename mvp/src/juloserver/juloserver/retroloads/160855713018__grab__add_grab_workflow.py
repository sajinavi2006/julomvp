# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2020-09-22 09:24
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.models import (
    Workflow,
    ProductLine,
    Partner,
    ProductProfile,
    ProductLookup
)
from django.contrib.auth.hashers import make_password
from juloserver.julo.constants import WorkflowConst
from django.contrib.auth.models import User, Group
from juloserver.julo.partners import PartnerConstant


def add_workflow_grab(apps, _schema_editor):

    workflow = Workflow.objects.create(
        name=WorkflowConst.GRAB,
        desc="this is a workflow for Grab",
        is_active=True,
        handler="GrabWorkflowHandler"
    )

    product_list = [52]
    product_names = [
        'I.720-O.000-L.000-C1.000-C2.000-D', 'I.720-O.000-L.000-C1.000-C2.000-D',
        'I.600-O.000-L.000-C1.000-C2.000-D', 'I.600-O.000-L.000-C1.000-C2.000-D'
    ]
    product_profile = None
    origination_fee_pct_list = [0] * 4
    interest_rate = [0.72] * 2 + [0.6] * 2
    eligible_amount_list = [1000000] * 3 + [2000000]
    eligible_duration = [60] * 4
    admin_fee = [40000, 50000] * 2

    # product lookup
    for product in product_list:
        product_profile = ProductProfile.objects.get_or_none(code=product)
        if product_profile:
            product_profile.update_safely(
                name="GRAB",
                min_amount=500000,
                max_amount=1000000,
                min_duration=60,
                max_duration=60,
                min_interest_rate=0.6,
                max_interest_rate=0.72,
                interest_rate_increment=0,
                payment_frequency="Daily",
                min_origination_fee=0,
                max_origination_fee=0.08,
                origination_fee_increment=0,
                late_fee=0,
                cashback_initial=0,
                cashback_payment=0,
                is_active=True,
                debt_income_ratio=0,
                is_product_exclusive=True,
                is_initial=True,
                code=product
            )
        else:
            product_profile = ProductProfile.objects.create(
                name="GRAB",
                min_amount=500000,
                max_amount=1000000,
                min_duration=60,
                max_duration=60,
                min_interest_rate=0.6,
                max_interest_rate=0.72,
                interest_rate_increment=0,
                payment_frequency="Daily",
                min_origination_fee=0,
                max_origination_fee=0.08,
                origination_fee_increment=0,
                late_fee=0,
                cashback_initial=0,
                cashback_payment=0,
                is_active=True,
                debt_income_ratio=0,
                is_product_exclusive=True,
                is_initial=True,
                code=product
            )

    product_line = ProductLine.objects.filter(
        product_line_code=52,
        product_line_type='GRAB').last()
    if product_line and product_profile:
        product_line.update_safely(
            product_line_type='GRAB',
            min_amount=0,
            max_amount=0,
            min_duration=0,
            max_duration=0,
            min_interest_rate=0,
            max_interest_rate=0,
            payment_frequency='Daily',
            amount_increment=100000,
            product_profile=product_profile
        )
    else:
        product_line = ProductLine.objects.create(
            product_line_code=52,
            product_line_type='GRAB',
            min_amount=0,
            max_amount=0,
            min_duration=0,
            max_duration=0,
            min_interest_rate=0,
            max_interest_rate=0,
            payment_frequency='Daily',
            amount_increment=100000,
            product_profile=product_profile
        )
    product_profile.refresh_from_db()
    product_line.refresh_from_db()
    for idx, product_name in enumerate(product_names):
        ProductLookup.objects.create(
            product_name=product_name,
            interest_rate=interest_rate[idx],
            origination_fee_pct=origination_fee_pct_list[idx],
            late_fee_pct=0,
            cashback_initial_pct=0,
            cashback_payment_pct=0,
            product_line=product_line,
            product_profile=product_profile,
            is_active=True,
            eligible_amount=eligible_amount_list[idx],
            eligible_duration=eligible_duration[idx],
            admin_fee=admin_fee[idx]
        )

    partner = Partner.objects.get_or_none(name='grab')
    if not partner:
        group = Group.objects.get(name="julo_partners")

        hash_password = make_password('grabtest')
        user = User.objects.create(username=PartnerConstant.GRAB_PARTNER,
                                   email='cs@grab.com', password=hash_password)
        user.groups.add(group)

        Partner.objects.create(
            user=user, name=PartnerConstant.GRAB_PARTNER, email='cs@grab.com',
            phone='+628111111111')


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(add_workflow_grab, migrations.RunPython.noop),
    ]
