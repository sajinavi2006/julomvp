# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2019-01-07 09:04
from __future__ import unicode_literals

from builtins import range
from django.db import migrations
from django.contrib.auth.hashers import make_password


from juloserver.julo.models import Agent



from django.contrib.auth.models import User



from django.contrib.auth.models import Group



def load_collection_vendor_partner(apps, schema_editor):
    telmark_vendors = [
        {'username': 'telmark2',
         'password': 'colltelmark123',
         'group': ['bo_sd_verifier', 'collection_agent_2'],
         'user_extension': 'telmark'
        },
        {'username': 'telmark3',
         'password': 'colltelmark123',
         'group': ['bo_sd_verifier', 'collection_agent_3'],
         'user_extension': 'telmark'
        },
        {'username': 'telmark4',
         'password': 'colltelmark123',
         'group': ['bo_sd_verifier', 'collection_agent_4'],
         'user_extension': 'telmark'
        },
        {'username': 'telmark5',
         'password': 'colltelmark123',
         'group': ['bo_sd_verifier', 'collection_agent_5'],
         'user_extension': 'telmark'
        },
    ]

    asiacollect_vendors = [
        {'username': 'asiacollect2',
         'password': 'collasia123',
         'group': ['bo_sd_verifier', 'collection_agent_2'],
         'user_extension': 'asiacollect'
        },
        {'username': 'asiacollect3',
         'password': 'collasia123',
         'group': ['bo_sd_verifier', 'collection_agent_3'],
         'user_extension': 'asiacollect'
        },
        {'username': 'asiacollect4',
         'password': 'collasia123',
         'group': ['bo_sd_verifier', 'collection_agent_4'],
         'user_extension': 'asiacollect'
        },
        {'username': 'asiacollect5',
         'password': 'collasia123',
         'group': ['bo_sd_verifier', 'collection_agent_5'],
         'user_extension': 'asiacollect'
        },
    ]

    mbacollection_vendors = [
        {'username': 'mbacollection2',
         'password': 'collmba123',
         'group': ['bo_sd_verifier', 'collection_agent_2'],
         'user_extension': 'mbacollection'
        },
        {'username': 'mbacollection3',
         'password': 'collmba123',
         'group': ['bo_sd_verifier', 'collection_agent_3'],
         'user_extension': 'mbacollection'
        },
        {'username': 'mbacollection4',
         'password': 'collmba123',
         'group': ['bo_sd_verifier', 'collection_agent_4'],
         'user_extension': 'mbacollection'
        },
        {'username': 'mbacollection5',
         'password': 'collmba123',
         'group': ['bo_sd_verifier', 'collection_agent_5'],
         'user_extension': 'mbacollection'
        },
    ]

    
    
    

    old_telmark_agents = User.objects.filter(username__startswith='telmark')
    old_asiacollects_agents = User.objects.filter(username__startswith='asiacollect')
    old_mbacollection_agents = User.objects.filter(username__startswith='mbacollection')

    for idx in range(len(telmark_vendors)):
        telmark_vendor = telmark_vendors[idx]
        if idx < len(old_telmark_agents):
            user = old_telmark_agents[idx]
            hash_password = make_password(telmark_vendor['password'])
            user.username = telmark_vendor['username']
            user.password = hash_password
            user.save()
            for group in user.groups.all():
                if group.name not in telmark_vendor['group']:
                    user.groups.remove(group)
            if hasattr(user, 'agent'):
                agent = user.agent
                agent.user_extension = telmark_vendor['user_extension']
            else:
                agent = Agent.objects.create(user=user, user_extension=telmark_vendor['user_extension'])
        else:
            hash_password = make_password(telmark_vendor['password'])
            user = User.objects.create(username=telmark_vendor['username'], password=hash_password)
            agent = Agent.objects.create(user=user, user_extension=telmark_vendor['user_extension'])

        groups = Group.objects.filter(name__in=telmark_vendor['group'])
        for proper_group in groups:
            user.groups.add(proper_group)

    for idx in range(len(asiacollect_vendors)):
        asiacollect_vendor = asiacollect_vendors[idx]
        if idx < len(old_asiacollects_agents):
            user = old_asiacollects_agents[idx]
            hash_password = make_password(asiacollect_vendor['password'])
            user.username = asiacollect_vendor['username']
            user.password = hash_password
            user.save()
            for group in user.groups.all():
                if group.name not in asiacollect_vendor['group']:
                    user.groups.remove(group)
            if hasattr(user, 'agent'):
                agent = user.agent
                agent.user_extension = asiacollect_vendor['user_extension']
            else:
                agent = Agent.objects.create(user=user, user_extension=asiacollect_vendor['user_extension'])
        else:
            hash_password = make_password(asiacollect_vendor['password'])
            user = User.objects.create(username=asiacollect_vendor['username'], password=hash_password)
            agent = Agent.objects.create(user=user, user_extension=asiacollect_vendor['user_extension'])

        groups = Group.objects.filter(name__in=asiacollect_vendor['group'])
        for proper_group in groups:
            user.groups.add(proper_group)

    for idx in range(len(mbacollection_vendors)):
        mbacollection_vendor = mbacollection_vendors[idx]
        if idx < len(old_mbacollection_agents):
            user = old_mbacollection_agents[idx]
            hash_password = make_password(mbacollection_vendor['password'])
            user.username = mbacollection_vendor['username']
            user.password = hash_password
            user.save()
            for group in user.groups.all():
                if group.name not in mbacollection_vendor['group']:
                    user.groups.remove(group)
            if hasattr(user, 'agent'):
                agent = user.agent
                agent.user_extension = mbacollection_vendor['user_extension']
            else:
                agent = Agent.objects.create(user=user, user_extension=mbacollection_vendor['user_extension'])
        else:
            hash_password = make_password(mbacollection_vendor['password'])
            user = User.objects.create(username=mbacollection_vendor['username'], password=hash_password)
            agent = Agent.objects.create(user=user, user_extension=mbacollection_vendor['user_extension'])

        groups = Group.objects.filter(name__in=mbacollection_vendor['group'])
        for proper_group in groups:
            user.groups.add(proper_group)

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(load_collection_vendor_partner, migrations.RunPython.noop)
    ]
