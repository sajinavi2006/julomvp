# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-12-19 03:51
from __future__ import unicode_literals

from django.db import migrations
import csv

from juloserver.julo.models import (
    Workflow,
    WorkflowStatusPath,
    WorkflowStatusNode,
)
from juloserver.julo.constants import WorkflowConst


def insert_workflow(apps, schema_editor):

    is_exist = Workflow.objects.filter(name=WorkflowConst.JULO_ONE_IOS).exists()
    if not is_exist:
        Workflow.objects.create(
            name=WorkflowConst.JULO_ONE_IOS,
            desc='this is a workflow for J1 iOS user',
            is_active=True,
            handler='JuloOneIOSWorkflowHandler',
        )


def insert_workflow_status_path(apps, schema_editor):

    workflow = Workflow.objects.filter(name=WorkflowConst.JULO_ONE_IOS).last()
    if workflow:
        csv_file_name = 'misc_files/csv/workflow_status_path_for_julo_ios.csv'
        try:
            with open(csv_file_name, 'r') as csvfile:
                csv_rows = csv.DictReader(csvfile, delimiter=',')
                for row in csv_rows:
                    dict_data = {
                        'status_previous': row['status_previous_code'],
                        'status_next': row['status_next_code'],
                        'type': row['type'],
                        'is_active': row['is_active'],
                        'customer_accessible': row['customer_accessible'],
                        'agent_accessible': row['agent_accessible'],
                        'workflow_id': workflow.id,
                    }
                    WorkflowStatusPath.objects.create(**dict_data)

        except Exception as error:
            return


def insert_workflow_status_node(apps, schema_editor):

    workflow = Workflow.objects.filter(name=WorkflowConst.JULO_ONE_IOS).last()
    if workflow:
        handler_prefix = 'JuloOneIOS{}Handler'
        status_nodes = [
            128,
            130,
            131,
            132,
            133,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            150,
            155,
            162,
            172,
            179,
            186,
            188,
            190,
            105,
            115,
            120,
            121,
            122,
            124,
            127,
        ]
        for node in status_nodes:
            data_node = {
                'status_node': node,
                'workflow_id': workflow.id,
                'handler': handler_prefix.format(node),
            }
            WorkflowStatusNode.objects.create(**data_node)


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(insert_workflow, migrations.RunPython.noop),
        migrations.RunPython(insert_workflow_status_path, migrations.RunPython.noop),
        migrations.RunPython(insert_workflow_status_node, migrations.RunPython.noop),
    ]
