# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2018-01-26 03:36
from __future__ import unicode_literals

import cuser.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from juloserver.julo.partners import PartnerConstant
from juloserver.julo.product_lines import ProductLineCodes
from juloserver.julo.statuses import ApplicationStatusCodes
from django.contrib.auth.hashers import make_password
from django.utils import timezone

from juloserver.julo.models import Loan


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderServiceRate


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderBalance


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


from django.contrib.auth.models import User


from django.contrib.auth.models import Group


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


def update_bri_partner(apps, schema_editor):
    
    partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    if partner:
        partner.type = 'lender'
        partner.save()

from juloserver.julo.models import Loan


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderServiceRate


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderBalance


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


from django.contrib.auth.models import User


from django.contrib.auth.models import Group


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


def update_grab_partner(apps, schema_editor):
    
    partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)
    if partner:
        partner.type = 'lender'
        partner.save()

from juloserver.julo.models import Loan


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderServiceRate


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderBalance


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


from django.contrib.auth.models import User


from django.contrib.auth.models import Group


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


def load_jtp_partner(apps, schema_editor):
    
    group = Group.objects.get(name="julo_partners")

    
    hash_password = make_password('jtptest')
    user = User.objects.create(username=PartnerConstant.JTP_PARTNER,
        email='cs@jtp.com', password=hash_password)
    user.groups.add(group)

    
    Partner.objects.create(
        user=user, name=PartnerConstant.JTP_PARTNER, email='cs@jtp.com',
        phone='+628111111111', type='lender')
            
def create_balance_lender(apps, schema_editor):
    
    
    partners = Partner.objects.all()
    
    for partner in partners:
        if partner.name in PartnerConstant.lender_partners():
            LenderBalance.objects.create(partner=partner)

from juloserver.julo.models import Loan


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderServiceRate


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderBalance


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


from django.contrib.auth.models import User


from django.contrib.auth.models import Group


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


def create_service_rate(apps, schema_editor):

    
    jtp_partner = Partner.objects.get(name=PartnerConstant.JTP_PARTNER)
    bri_partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    grab_partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)

    service_rates = [
        (1,  0.00, 0.98, 0.98, 0.00, jtp_partner),
        (2,  0.00, 1.00, 0.00, 0.00, bri_partner),
        (3,  0.65, 1.00, 0.65, 0.65, grab_partner),
    ]

    
    for sr in service_rates:
        kwargs = {
            'id': sr[0],
            'provision_rate': sr[1],
            'principal_rate': sr[2],
            'interest_rate': sr[3],
            'late_fee_rate': sr[4],
            'partner': sr[5],
            'cdate': timezone.localtime(timezone.now()),
            'udate': timezone.localtime(timezone.now())
        }
        lender_service_rate = LenderServiceRate(**kwargs)
        lender_service_rate.save()

from juloserver.julo.models import Loan


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderServiceRate


from juloserver.julo.models import Partner


from juloserver.julo.models import LenderBalance


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


from django.contrib.auth.models import User


from django.contrib.auth.models import Group


from juloserver.julo.models import Partner


from juloserver.julo.models import Partner


def load_partner_in_loan(apps, schema_editor):
    
    
    jtp_partner = Partner.objects.get(name=PartnerConstant.JTP_PARTNER)
    bri_partner = Partner.objects.get(name=PartnerConstant.BRI_PARTNER)
    grab_partner = Partner.objects.get(name=PartnerConstant.GRAB_PARTNER)
    loans = Loan.objects.all()
    loans = loans.exclude(application_email__icontains='julofinance.com')
    for loan in loans:
        if loan.application.product_line.product_line_code in ProductLineCodes.lended_by_bri():
            loan.partner = bri_partner
        elif loan.application.product_line.product_line_code in ProductLineCodes.lended_by_grab():
            loan.partner = grab_partner
        else:
            loan.partner = jtp_partner
        loan.save()


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunSQL(
            "ALTER TABLE disbursement_transaction ALTER COLUMN customer_id TYPE bigint;"
        ),
        migrations.RunSQL(
            "ALTER TABLE disbursement_transaction ALTER COLUMN loan_id TYPE bigint;"
        ),
        migrations.RunPython(update_bri_partner, migrations.RunPython.noop),
        migrations.RunPython(update_grab_partner, migrations.RunPython.noop),
        migrations.RunPython(load_jtp_partner, migrations.RunPython.noop),
        migrations.RunPython(create_balance_lender, migrations.RunPython.noop),
        migrations.RunPython(create_service_rate, migrations.RunPython.noop),
    ]
