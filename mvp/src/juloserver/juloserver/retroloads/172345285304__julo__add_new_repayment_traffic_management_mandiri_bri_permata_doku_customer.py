# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-08-12 08:54
from __future__ import unicode_literals

import copy

from django.db import migrations
from juloserver.julo.constants import FeatureNameConst


from juloserver.julo.models import FeatureSetting
from django.conf import settings


def update_traffic_management_feature_setting(apps, _schema_editor):
    bank_mapping = {
        "Bank BCA": settings.PREFIX_BCA,
        "Bank BRI": settings.FASPAY_PREFIX_BRI,
        "Bank MANDIRI": settings.FASPAY_PREFIX_MANDIRI,
        "PERMATA Bank": settings.FASPAY_PREFIX_PERMATA,
        "Bank MAYBANK": settings.FASPAY_PREFIX_MAYBANK,
        "Bank BNI": settings.FASPAY_PREFIX_BNI,
        "Bank CIMB Niaga": settings.PREFIX_CIMB_NIAGA,
        "Bank BRI DOKU": settings.PREFIX_BRI_DOKU,
        "Bank MANDIRI DOKU": settings.PREFIX_MANDIRI_DOKU,
        "PERMATA Bank DOKU": settings.PREFIX_PERMATA_DOKU,
    }

    feature_settings = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.REPAYMENT_TRAFFIC_SETTING
    ).first()

    if not feature_settings:
        return

    dokus = {
        settings.PREFIX_MANDIRI_DOKU: "Mandiri DOKU",
        settings.PREFIX_BRI_DOKU: "BRI DOKU",
        settings.PREFIX_PERMATA_DOKU: "Permata DOKU",
    }

    full_backup = {
        settings.PREFIX_MANDIRI_DOKU: "Mandiri DOKU",
        settings.PREFIX_BRI_DOKU: "BRI DOKU",
        settings.PREFIX_BCA: "BCA VA",
        settings.FASPAY_PREFIX_BRI: "BRI VA",
        settings.FASPAY_PREFIX_MANDIRI: "Mandiri VA",
        settings.FASPAY_PREFIX_PERMATA: "Permata VA",
        settings.FASPAY_PREFIX_MAYBANK: "Maybank VA",
        settings.FASPAY_PREFIX_BNI: "BNI VA",
        settings.PREFIX_CIMB_NIAGA: "CIMB VA",
    }

    base_common_settings = {
        "prob": 0,
        "title": "Permata DOKU",
        "selected": list(dokus.keys()) + list(full_backup.keys()),
        "backup": full_backup,
    }

    # Adding DOKU settings to all relevant banks
    relevant_keys = ['cimb', 'bca', 'bri', 'mandiri', 'bni', 'other']
    for key in relevant_keys:
        if key in feature_settings.parameters:
            # Create a deep copy of the common settings for each key to avoid modifying the original
            common_settings = copy.deepcopy(base_common_settings)

            # Remove BNI VA from the selected list if key is not 'bni'
            if key != 'bni' and settings.FASPAY_PREFIX_BNI in common_settings["selected"]:
                common_settings["selected"].remove(settings.FASPAY_PREFIX_BNI)

            feature_settings.parameters[key]['settings'][
                settings.PREFIX_PERMATA_DOKU
            ] = common_settings

    dokus_to_add = {
        'BRI VA': list(dokus.keys()),
        'Mandiri VA': list(dokus.keys()),
        'Permata VA': list(dokus.keys()),
        'CIMB VA': list(dokus.keys()),
        'BCA VA': list(dokus.keys()),
        'BNI VA': list(dokus.keys()),
        'Maybank VA': list(dokus.keys()),
    }

    for customer_type, customer_data in feature_settings.parameters.items():
        updated_settings = {}

        for bank_name, bank_data in customer_data['settings'].items():
            new_key = bank_mapping.get(bank_name, bank_name)
            # Update backup and selected keys using the bank_mapping
            bank_data['backup'] = {
                bank_mapping.get(backup_bank, backup_bank): value
                for backup_bank, value in bank_data['backup'].items()
            }
            bank_data['selected'] = [bank_mapping.get(bank, bank) for bank in bank_data['selected']]

            # Add DOKU backups and selected items where applicable
            if bank_data['title'] in dokus_to_add:
                for doku in dokus_to_add[bank_data['title']]:
                    bank_data['backup'][doku] = dokus[doku]
                    bank_data['selected'].append(doku)

            if customer_type == 'other':
                if bank_data['title'] == "Permata DOKU":
                    bank_data['prob'] = 100
                else:
                    bank_data['prob'] = 0

            updated_settings[new_key] = bank_data

        feature_settings.parameters[customer_type]['settings'] = updated_settings

    feature_settings.save()


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(update_traffic_management_feature_setting, migrations.RunPython.noop)
    ]
