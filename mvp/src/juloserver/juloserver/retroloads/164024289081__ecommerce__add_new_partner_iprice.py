# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-12-23 07:01
from __future__ import unicode_literals

import logging

from django.contrib.auth.models import User

from django.db import migrations
from juloserver.customer_module.constants import BankAccountCategoryConst
from juloserver.disbursement.constants import NameBankValidationStatus

from juloserver.disbursement.models import NameBankValidation
from juloserver.disbursement.services import ValidationProcess
from juloserver.julo.models import Bank, Customer, Partner
from juloserver.julo.partners import PartnerConstant
from juloserver.partnership.constants import PartnershipTypeConstant
from juloserver.partnership.models import PartnershipType
from juloserver.partnership.services.services import process_register_partner
from juloserver.customer_module.models import BankAccountCategory, BankAccountDestination


logger = logging.getLogger(__name__)


def add_new_partner_iprice(apps, scheme_editor):
    iprice_partner = Partner.objects.get_or_none(name=PartnerConstant.IPRICE)
    if not iprice_partner:
        # make a partnership type row
        partnership_type, _ = PartnershipType.objects.get_or_create(
            partner_type_name=PartnershipTypeConstant.IPRICE
        )

        # iPrice info, dummy for now for staging
        email = "finance-payment@ipricegroup.com"
        partner_data = {
            "username": PartnerConstant.IPRICE,
            "email": email,
            "partnership_type": partnership_type.id,
            "callback_url": "",
            "callback_token": "",
        }

        # generate rows in ops.auth_user & ops.partner & ops.partnership_config
        process_register_partner(partner_data)

        # create customer for iPrice
        user = User.objects.get(username=PartnerConstant.IPRICE)
        customer = Customer.objects.create(user=user, email=email, phone='081111111111')

        # IPrice bank account
        iprice_bank_account = {
            'bank_name': 'BCA',
            'name_in_bank': 'Iprice Group',
            'account_number': '886081019209',
            'bank_code': 'MANDIRI',
            'method': 'Xfers',
            'mobile_phone': '081111111111',
        }

        # bank stuff
        name_bank_validation = NameBankValidation.objects.create(
            bank_code=iprice_bank_account['bank_code'],
            account_number=iprice_bank_account['account_number'],
            name_in_bank=iprice_bank_account['name_in_bank'],
            mobile_phone=iprice_bank_account['mobile_phone'],
            method=iprice_bank_account['method']
        )

        bank = Bank.objects.filter(xfers_bank_code=iprice_bank_account['bank_code']).last()
        bank_account_category = BankAccountCategory.objects.get(
            category=BankAccountCategoryConst.ECOMMERCE
        )

        BankAccountDestination.objects.create(
            bank_account_category=bank_account_category,
            customer=customer,
            bank=bank,
            account_number=iprice_bank_account['account_number'],
            name_bank_validation=name_bank_validation,
            description='iPrice bank account',
        )

        validation_process = ValidationProcess(name_bank_validation=name_bank_validation)
        validation_process.validate()

        name_bank_validation.refresh_from_db()
        if name_bank_validation.validation_status != NameBankValidationStatus.SUCCESS:
            logger.error({
                'module': 'ecommerce',
                'action': 'retroloads.ecommerce__add_new_partner_iprice.add_new_partner_iprice',
                'message': 'Failed to validate bank account for iPrice',
                'status': name_bank_validation.validation_status,
                'reason': name_bank_validation.reason,
            })


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(add_new_partner_iprice, migrations.RunPython.noop),
    ]
