# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2022-07-07 14:47
from __future__ import unicode_literals

from django.db import migrations
from django.utils import timezone
from datetime import timedelta

from juloserver.promo.models import (
    PromoCode,
    PromoCodeCriteria,
    PromoCodeBenefit,
)
from juloserver.promo.constants import (
    PromoCodeBenefitConst,
    PromoCodeCriteriaConst,
    PromoCodeTypeConst,
)


def add_promo_cashback_credit_card(apps, schema_editor):
    promo_code_benefit = PromoCodeBenefit.objects.filter(
        type=PromoCodeBenefitConst.CASHBACK_FROM_LOAN_AMOUNT,
        value={"percent": 50, "max_cashback": 250000}
    ).last()
    if not promo_code_benefit:
        promo_code_benefit = PromoCodeBenefit.objects.create(
            type=PromoCodeBenefitConst.CASHBACK_FROM_LOAN_AMOUNT,
            value={"percent": 50, "max_cashback": 250000},
            name="cashback 50% max 250k"
        )
    criteria_credit_card = PromoCodeCriteria.objects.filter(
        type=PromoCodeCriteriaConst.TRANSACTION_METHOD,
        value={"transaction_method_ids": [10]}
    ).last()
    if not criteria_credit_card:
        criteria_credit_card = PromoCodeCriteria.objects.create(
            type=PromoCodeCriteriaConst.TRANSACTION_METHOD,
            value={"transaction_method_ids": [10]},
            name="Julo Card cashback"
        )
    criteria_customer = PromoCodeCriteria.objects.filter(
        type=PromoCodeCriteriaConst.LIMIT_PER_CUSTOMER,
        value={"limit": 1}
    ).last()
    if not criteria_customer:
        criteria_customer = PromoCodeCriteria.objects.create(
            type=PromoCodeCriteriaConst.LIMIT_PER_CUSTOMER,
            value={"limit": 1},
            name="1 attempt"
        )
    start_date = timezone.localtime(timezone.now())
    end_date = start_date + timedelta(days=365)
    PromoCode.objects.create(
        promo_name='JULOCARDCASHBACK',
        promo_code='JULOCARDCASHBACK',
        description="cashback on first time transaction using julo card",
        criteria=[criteria_customer.id, criteria_credit_card.id],
        promo_code_benefit=promo_code_benefit,
        start_date=start_date,
        end_date=end_date,
        is_active=True,
        type=PromoCodeTypeConst.LOAN,
    )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(add_promo_cashback_credit_card,
                             migrations.RunPython.noop)
    ]
