# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-01-06 03:10
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.constants import WorkflowConst
from juloserver.julo.statuses import ApplicationStatusCodes
from juloserver.julo.models import (
	WorkflowStatusPath, Workflow, StatusLookup,
	WorkflowStatusNode)


def create_status_109(apps, schema_editor):
    exists = StatusLookup.objects.filter(
        status_code=StatusLookup.JULO_STARTER_LIMIT_GENERATED
    ).exists()
    if not exists:
        StatusLookup.objects.create(
            status_code=StatusLookup.JULO_STARTER_LIMIT_GENERATED,
            status="Julo Starter Limit Generated",
            handler="JuloStarter109Handler"
        )

    workflow = Workflow.objects.filter(name=WorkflowConst.JULO_STARTER).last()
    is_exist = WorkflowStatusNode.objects.filter(
        status_node=109,
        handler="JuloStarter109Handler",
        workflow=workflow
    ).exists()

    if not is_exist:
        WorkflowStatusNode.objects.create(
            status_node=109,
            handler="JuloStarter109Handler",
            workflow=workflow
        )

def alter_status_108(apps, schema_editor):
    exists = StatusLookup.objects.filter(
        status_code=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK
    ).exists()
    if not exists:
        StatusLookup.objects.create(
            status_code=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK,
            status="Application Julo Starter accepted",
            handler="JuloStarter108Handler"
        )
    else:
    	x108 = StatusLookup.objects.get(
	        status_code=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK
	    )
    	x108.update_safely(handler="JuloStarter108Handler")

    workflow = Workflow.objects.filter(name=WorkflowConst.JULO_STARTER).last()
    is_exist = WorkflowStatusNode.objects.filter(
        status_node=108,
        handler="JuloStarter108Handler",
        workflow=workflow
    ).exists()

    if not is_exist:
	    WorkflowStatusNode.objects.create(
	        status_node=108,
	        handler="JuloStarter108Handler",
	        workflow=workflow
	    )


def pair_workflow_path_108_135_109(apps, schema_editor):
    j_starter = Workflow.objects.get(name=WorkflowConst.JULO_STARTER)

    to_109 = WorkflowStatusPath.objects.filter(
        workflow=j_starter,
        status_previous=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK,
        status_next=StatusLookup.JULO_STARTER_LIMIT_GENERATED
    ).exists()
    if not to_109:
        WorkflowStatusPath.objects.create(
            workflow=j_starter,
        	status_previous=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK,
            status_next=StatusLookup.JULO_STARTER_LIMIT_GENERATED,
            type="happy"
        )

    to_135 = WorkflowStatusPath.objects.filter(
        workflow=j_starter,
        status_previous=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK,
        status_next=StatusLookup.APPLICATION_DENIED_CODE
    ).exists()
    if not to_135:
        WorkflowStatusPath.objects.create(
            workflow=j_starter,
        	status_previous=StatusLookup.JULO_STARTER_AFFORDABILITY_CHECK,
            status_next=StatusLookup.APPLICATION_DENIED_CODE,
            type="graveyard"
        )        


class Migration(migrations.Migration):
    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_status_109, migrations.RunPython.noop),
        migrations.RunPython(alter_status_108, migrations.RunPython.noop),
        migrations.RunPython(pair_workflow_path_108_135_109, migrations.RunPython.noop),

    ]
