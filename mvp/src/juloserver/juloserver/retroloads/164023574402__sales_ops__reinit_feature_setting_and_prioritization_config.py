# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-12-23 05:02
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.constants import FeatureNameConst
from juloserver.julo.models import FeatureSetting
from juloserver.sales_ops.constants import SalesOpsSettingConst, ScoreCriteria
from juloserver.sales_ops.services.sales_ops_services import SalesOpsSetting, set_rm_scoring

from juloserver.sales_ops.models import SalesOpsPrioritizationConfiguration

PRIORITIZATION_CONFIGURATIONS = [
    {'segment_name': 'Segment 1', 'r_score': 5, 'm_score': 5, 'prioritization': 1},
    {'segment_name': 'Segment 2', 'r_score': 5, 'm_score': 4, 'prioritization': 2},
    {'segment_name': 'Segment 2', 'r_score': 5, 'm_score': 2, 'prioritization': 2},
    {'segment_name': 'Segment 2', 'r_score': 1, 'm_score': 5, 'prioritization': 2},
    {'segment_name': 'Segment 2', 'r_score': 5, 'm_score': 3, 'prioritization': 2},
    {'segment_name': 'Segment 2', 'r_score': 4, 'm_score': 5, 'prioritization': 2},
    {'segment_name': 'Segment 3', 'r_score': 4, 'm_score': 3, 'prioritization': 3},
    {'segment_name': 'Segment 3', 'r_score': 4, 'm_score': 4, 'prioritization': 3},
    {'segment_name': 'Segment 3', 'r_score': 4, 'm_score': 1, 'prioritization': 3},
    {'segment_name': 'Segment 3', 'r_score': 3, 'm_score': 1, 'prioritization': 3},
    {'segment_name': 'Segment 4', 'r_score': 3, 'm_score': 5, 'prioritization': 4},
    {'segment_name': 'Segment 4', 'r_score': 4, 'm_score': 2, 'prioritization': 4},
    {'segment_name': 'Segment 4', 'r_score': 3, 'm_score': 4, 'prioritization': 4},
    {'segment_name': 'Segment 5', 'r_score': 2, 'm_score': 5, 'prioritization': 5},
    {'segment_name': 'Segment 5', 'r_score': 3, 'm_score': 3, 'prioritization': 5},
    {'segment_name': 'Segment 5', 'r_score': 1, 'm_score': 4, 'prioritization': 5},
    {'segment_name': 'Segment 6', 'r_score': 1, 'm_score': 3, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 3, 'm_score': 2, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 2, 'm_score': 3, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 2, 'm_score': 2, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 2, 'm_score': 1, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 1, 'm_score': 1, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 2, 'm_score': 4, 'prioritization': 6},
    {'segment_name': 'Segment 6', 'r_score': 1, 'm_score': 2, 'prioritization': 6},
    {'segment_name': 'Segment 2', 'r_score': 5, 'm_score': 1, 'prioritization': 2},
]

SETTING_PARAMETER = {
    SalesOpsSettingConst.MONETARY_PERCENTAGES: '20,20,20,20,20',
    SalesOpsSettingConst.RECENCY_PERCENTAGES: '20,20,20,20,20',
    SalesOpsSettingConst.LINEUP_MIN_AVAILABLE_LIMIT: 500000,
    SalesOpsSettingConst.LINEUP_AND_AUTODIAL_RPC_DELAY_HOUR:
        SalesOpsSettingConst.DEFAULT_LINEUP_AND_AUTODIAL_RPC_DELAY_HOUR,
    SalesOpsSettingConst.AUTODIAL_RPC_ASSIGNMENT_DELAY_HOUR:
        SalesOpsSettingConst.DEFAULT_AUTODIAL_RPC_ASSIGNMENT_DELAY_HOUR,
    SalesOpsSettingConst.LINEUP_AND_AUTODIAL_NON_RPC_DELAY_HOUR:
        SalesOpsSettingConst.DEFAULT_LINEUP_AND_AUTODIAL_NON_RPC_DELAY_HOUR,
    SalesOpsSettingConst.LINEUP_AND_AUTODIAL_NON_RPC_FINAL_DELAY_HOUR:
        SalesOpsSettingConst.DEFAULT_LINEUP_AND_AUTODIAL_NON_RPC_FINAL_DELAY_HOUR,
    SalesOpsSettingConst.LINEUP_AND_AUTODIAL_NON_RPC_ATTEMPT_COUNT:
        SalesOpsSettingConst.DEFAULT_LINEUP_AND_AUTODIAL_NON_RPC_ATTEMPT_COUNT,
}


def init_sales_ops_prioritization_configuration(apps, schema_editor):
    bulk_create_prioritization_configurations = []
    for prioritization_configuration in PRIORITIZATION_CONFIGURATIONS:
        bulk_create_prioritization_configurations.append(
            SalesOpsPrioritizationConfiguration(**prioritization_configuration)
        )
    SalesOpsPrioritizationConfiguration.objects.all().delete()
    SalesOpsPrioritizationConfiguration.objects.bulk_create(
        bulk_create_prioritization_configurations,
    )


def init_sales_ops_feature_setting(app, schema_editor):
    data_create = {
        'feature_name': FeatureNameConst.SALES_OPS,
        'is_active': True,
        'category': 'Sales Ops',
        'parameters': SETTING_PARAMETER,
    }
    feature_setting = FeatureSetting.objects.get_or_none(feature_name=FeatureNameConst.SALES_OPS)
    if feature_setting:
        feature_setting.update_safely(**data_create)
    else:
        FeatureSetting.objects.create(**data_create)
    db_r_percentages = SalesOpsSetting.get_r_percentages()
    db_m_percentages = SalesOpsSetting.get_m_percentages()
    set_rm_scoring(db_m_percentages, ScoreCriteria.MONETARY)
    set_rm_scoring(db_r_percentages, ScoreCriteria.RECENCY)


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(init_sales_ops_feature_setting, migrations.RunPython.noop),
        migrations.RunPython(
            init_sales_ops_prioritization_configuration, migrations.RunPython.noop,
        ),
    ]
