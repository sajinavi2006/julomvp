# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-09-11 06:45
from __future__ import unicode_literals

from django.db import migrations, transaction
from juloserver.loan.services.lender_related import logger
from juloserver.early_limit_release.constants import ExperimentOption
from juloserver.early_limit_release.models import EarlyReleaseLoanMapping, ReleaseTracking
from juloserver.julo.models import Payment


def retro_release_limit_tracking_option_1(apps, schema_editor):
    list_success = []
    list_failure = []

    loan_ids = EarlyReleaseLoanMapping.objects.filter(
        experiment__option=ExperimentOption.OPTION_1
    ).values_list('loan_id', flat=True)

    logger.info({
        'action' : 'retro_release_limit_tracking_option_1',
        'loan_ids': loan_ids,
    })
    for loan_id in loan_ids:
        try:
            # get first release for option 1
            first_release_payment = ReleaseTracking.objects.filter(
                loan_id=loan_id).order_by('payment_id').first()

            # get payment less than or equal first release payment to fill
            payments = Payment.objects.filter(
                loan_id=loan_id, pk__lte=first_release_payment.payment_id)

            with transaction.atomic():
                for payment in payments:
                    ReleaseTracking.objects.update_or_create(
                        loan_id=loan_id,
                        payment_id=payment.pk,
                        type='early_release',
                        account_id=first_release_payment.account_id,
                        defaults={'limit_release_amount': payment.installment_principal}
                    )

            logger.info({
                'action' : 'retro_release_limit_tracking_option_success',
                'loan_ids': loan_id,
            })
            list_success.append(loan_id)

        except Exception as e:
            list_failure.append({loan_id: str(e)})
            logger.info({
                'action' : 'retro_release_limit_tracking_option_1_failed',
                'loan_ids': loan_id,
                'errors': str(e)
            })
            continue

    logger.info({
        'action' : 'retro_release_limit_tracking_option_1',
        'loan_ids': loan_ids,
        'list_success': list_success,
        'list_failure': list_failure
    })


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(retro_release_limit_tracking_option_1, migrations.RunPython.noop)
    ]
