# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-03-25 11:09
from __future__ import unicode_literals

from django.db import migrations
import datetime
from juloserver.julo.constants import FeatureNameConst

from juloserver.julo.models import FeatureSetting


def create_partnership_fdc_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.PARTNERSHIP_FDC_MOCK_RESPONSE_SET,
        defaults=dict(
            is_active=False,
            category="mocking_response",
            description="Config FDC mocking response",
            parameters={
                "latency": 1000,
                "product": [
                    "dana"
                ],
                "response_value": {
                    "status": "Found",
                    "inquiryDate": "2023-10-11 14:01:49",
                    "inquiryReason": "1 - Applying loan via Platform",
                    "pinjaman": [
                        {
                            "dpd_max": 150,
                            "dpd_terakhir": 150,
                            "id": "5dc67af8c3b24fb01e3cc7135b8ffd45",
                            "id_penyelenggara": 63,
                            "jenis_pengguna_ket": "Individual",
                            "kualitas_pinjaman_ket": "Lancar (<30 hari)",
                            "nama_borrower": "Herti Novianti",
                            "nilai_pendanaan": 5000000,
                            "no_identitas": 3275026708810040,
                            "no_npwp": 674718820432000,
                            "pendanaan_syariah": False,
                            "penyelesaian_w_oleh": "Mocking Data",
                            "reference": "",
                            "sisa_pinjaman_berjalan": 41450,
                            "status_pinjaman_ket": "Partial Payment",
                            "sub_tipe_pinjaman": "Onetime Loan / Cash Loan",
                            "tgl_jatuh_tempo_pinjaman": "2023-04-13",
                            "tgl_pelaporan_data": "2022-07-07",
                            "tgl_penyaluran_dana": "2023-10-11",
                            "tgl_perjanjian_borrower": "2022-10-11",
                            "tipe_pinjaman": "Multiguna"
                        },
                    ],
                },
            },
        ),
    )


def create_bpjs_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.BPJS_MOCK_RESPONSE_SET,
        defaults=dict(
            is_active=False,
            category="mocking_response",
            description="Config BPJS mocking response",
            parameters={
                "exception": "",
                "http_status_code": "200",
                "latency": 10000,
                "product": ["j-starter", "j1"],
                "response_value": {
                    "msg": "Sukses",
                    "ret": "0",
                    "score": {
                        "CHECK_ID": "3514142001810001",
                        "blthUpah": "TIDAK SESUAI",
                        "email": "TIDAK SESUAI",
                        "handphone": "TIDAK SESUAI",
                        "jenisKelamin": "SESUAI",
                        "namaLengkap": "SESUAI",
                        "namaPerusahaan": "TIDAK SESUAI",
                        "nomorIdentitas": "SESUAI",
                        "paket": "SESUAI",
                        "tglLahir": "SESUAI",
                        "upahRange": "TIDAK SESUAI"
                    }
                }
            },
        ),
    )


def create_fdc_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.FDC_MOCK_RESPONSE_SET,
        defaults=dict(
            is_active=False,
            category="mocking_response",
            description="Config FDC mocking response",
            parameters={
                "latency": 1000,
                "product": [
                  "j-starter"
                ],
                "response_value": {
                    "status": "Found",
                    "inquiryDate": "2023-04-27 18:26:13",
                    "inquiryReason": "1 - Applying loan via Platform",
                    "pinjaman": [
                        {
                            "dpd_max": 20,
                            "dpd_terakhir": 0,
                            "id": "5dc67af8c3b24fb01e3cc7135b8ffd45",
                            "id_penyelenggara": 63,
                            "jenis_pengguna_ket": "Individual",
                            "kualitas_pinjaman_ket": "Lancar (<30 hari)",
                            "nama_borrower": "Herti Novianti",
                            "nilai_pendanaan": 5000000,
                            "no_identitas": 3144137007973157,
                            "no_npwp": 674718820432000,
                            "pendanaan_syariah": False,
                            "penyelesaian_w_oleh": "Mocking Data",
                            "reference": "",
                            "sisa_pinjaman_berjalan": 0,
                            "status_pinjaman_ket": "Fully Paid",
                            "sub_tipe_pinjaman": "Onetime Loan / Cash Loan",
                            "tgl_jatuh_tempo_pinjaman": "2023-04-28",
                            "tgl_pelaporan_data": "2023-04-28",
                            "tgl_penyaluran_dana": "2023-04-28",
                            "tgl_perjanjian_borrower": "2023-04-28",
                            "tipe_pinjaman": "Multiguna"
                        }
                    ],
                }
            },
        )
    )


def create_dukcapil_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.DUKCAPIL_MOCK_RESPONSE_SET,
        defaults=dict(
            is_active=False,
            category="mocking_response",
            description="Config Dukcapil mocking response",
            parameters={
                "latency": 1000,
                "product": ["j-starter", "j1"],
                "response_value": {
                    "response": {
                        "birthdate": True,
                        "birthplace": True,
                        "name": True
                    },
                    "log": {
                        "content": [
                            {
                                "ALAMAT": "Tidak Sesuai (0)",
                                "JENIS_KLMIN": "Sesuai",
                                "JENIS_PKRJN": "Tidak Sesuai",
                                "KAB_NAME": "Tidak Sesuai",
                                "KEC_NAME": "Tidak Sesuai",
                                "KEL_NAME": "Tidak Sesuai",
                                "NAMA_LGKP": "Sesuai (100)",
                                "NIK": 3173044607870002,
                                "NO_KAB": "Tidak Sesuai",
                                "NO_KEC": "Tidak Sesuai",
                                "NO_KEL": "Tidak Sesuai",
                                "NO_PROP": "Tidak Sesuai",
                                "NO_RT": "Tidak Sesuai",
                                "NO_RW": "Tidak Sesuai",
                                "PROP_NAME": "Tidak Sesuai",
                                "STATUS_KAWIN": "Sesuai",
                                "TGL_LHR": "Sesuai",
                                "TMPT_LHR": "Sesuai (100)"
                            }
                        ],
                        "firstPage": True,
                        "lastPage": True,
                        "number": 0,
                        "numberOfElements": 1,
                        "size": 1,
                        "sort": None,
                        "totalElements": 1
                    },
                }
            },
        ),
    )


def create_heimdall_mock_setting(apps, schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.HEIMDALL_MOCK_RESPONSE_SET,
        defaults=dict(
            is_active=False,
            category="mocking_response",
            description="For testing purpose only in Heimdall",
            parameters={
                "latency": 10000,
                "products": ["j-starter"],
                "response_values": {
                    "j-starter": {
                        "credit_score_type": "A",
                        "has_fdc": False,
                        "model_version": "Heimdall JULO Turbo v1.0.0",
                        "pgood": 0.57,
                        "probability_fpd": 0.57,
                        "product": "non-repeat-fdc",
                        "version": 53
                    }
                }
            },
        ),
    )


def create_binary_check_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.BINARY_CHECK_MOCK,
        defaults={
            'is_active': False,
            'category': 'mocking_response',
            'description': 'This configuration for mocking binary check result',
            'parameters': {
                "product": ["j-starter"],
                "latency": 1000,
                "response_value": True,
            }
        }
    )


def create_app_risky_check_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.APP_RISKY_CHECK_MOCK,
        defaults={
            'is_active': False,
            'category': 'mocking_response',
            'description': 'This configuration for mocking application risky check result',
            'parameters': {
                "product": ["j-starter"],
                "latency": 1000,
                "response_value": False,
            }
        }
    )


def create_emulator_detection_mock_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name=FeatureNameConst.EMULATOR_DETECTION_MOCK,
        defaults={
            'is_active': False,
            'category': 'mocking_response',
            'description': 'This configuration for emulator detection mock result',
            'parameters': {
                "latency": 1000,
                "product": [
                    "j-starter"
                ],
                "response_value": {
                    "decode_error": "",
                    "decoded_response": {
                        "tokenPayloadExternal": {
                            "accountDetails": {
                                "appLicensingVerdict": "LICENSED"
                            },
                            "appIntegrity": {
                                "appRecognitionVerdict": "PLAY_RECOGNIZED",
                                "certificateSha256Digest": [
                                    "YlOH2m2ELWDim2gi6y_BaFkhX0YI1vtQdfNDgK5uABE"
                                ],
                                "packageName": "com.julofinance.juloapp",
                                "versionCode": "2342"
                            },
                            "deviceIntegrity": {
                                "deviceRecognitionVerdict": [
                                    "MEETS_BASIC_INTEGRITY",
                                    "MEETS_DEVICE_INTEGRITY",
                                    "MEETS_STRONG_INTEGRITY"
                                ]
                            },
                            "requestDetails": {
                                "nonce": "UNyBufVRiN9gticiU38WccEQRiIIxSes",
                                "requestPackageName": "com.julofinance.juloapp",
                                "timestampMillis": 1682588242
                            }
                        }
                    }
                }
            }
        },
    )


def create_mock_dukcapil_fr_setting(apps, _schema_editor):
    FeatureSetting.objects.get_or_create(
        feature_name='mock_dukcapil_fr',
        defaults={
            'is_active': False,
            'category': 'mocking_response',
            'description': 'mock configuration for dukcapil face recognition',
            'parameters': {
                "mock_result": {
                    "error": {
                        "errorCode": 6018,
                        "errorMessage": "Sukses"
                    },
                    "httpResponseCode": "200",
                    "matchScore": "7.53",
                    "quotaLimiter": "40",
                    "transactionId": "aajPEzAK73hVsA34mxCon",
                    "transactionSource": "JULOapp",
                    "uid": "3144137007970004",
                    "verificationResult": "true"
                }
            }
        }
    )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_partnership_fdc_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_bpjs_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_fdc_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_dukcapil_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_heimdall_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_binary_check_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_app_risky_check_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_emulator_detection_mock_setting, migrations.RunPython.noop),
        migrations.RunPython(create_mock_dukcapil_fr_setting, migrations.RunPython.noop),
    ]
