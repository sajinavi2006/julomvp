# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2025-04-16 07:31
from __future__ import unicode_literals

from django.db import migrations
from juloserver.streamlined_communication.models import (
    InfoCardButtonProperty,
    CardProperty,
    InfoCardProperty,
    StreamlinedMessage,
    StreamlinedCommunication,
)
from juloserver.julo.constants import FeatureNameConst
from juloserver.julo.models import FeatureSetting
from juloserver.streamlined_communication.constant import CommunicationPlatform
from juloserver.julo.models import Image


class ImageNames(object):
    NEW_INAPP_ICON = 'info-card/ptp_card_icon.png'


def create_or_update_image(image_source_id, image_type, image_url):
    image, _ = Image.objects.get_or_create(
        image_source=image_source_id, image_type=image_type, defaults={'url': image_url}
    )
    image.url = image_url
    image.save()


def run_update_card_for_older_version(apps, schema_editor):
    ptp_card = StreamlinedCommunication.objects.filter(
        communication_platform=CommunicationPlatform.INFO_CARD,
        extra_conditions=CardProperty.INAPP_PTP_BEFORE_SET,
        is_active=True,
    ).last()

    message = ptp_card.message
    if message:
        card_property = message.info_card_property
        if card_property:
            card_property.title = 'Yuk, atur tanggal janji bayar!'
            card_property.title_color = '#008AC0'
            card_property.text_color = '#008AC0'
            card_property.save()

            create_or_update_image(
                card_property.id,
                CardProperty.IMAGE_TYPE.card_optional_image,
                str(ImageNames.NEW_INAPP_ICON),
            )

            message.info_card_property = card_property
        message.message_content = (
            'Kalau pilih tanggal lebih awal, bisa dapet cashback hingga 4%, lho!'
        )
        message.save()

        ptp_card.message = message
        ptp_card.save()


def create_ptp_card_for_new_app_version(apps, schema_editor):
    original_comms = StreamlinedCommunication.objects.filter(
        extra_conditions='INAPP_PTP_BEFORE_SET', communication_platform='INFO_CARD'
    )

    for comm in original_comms:
        old_card = comm.message.info_card_property

        # Clone info card property
        new_card = InfoCardProperty.objects.create(
            card_type=old_card.card_type,
            title='Yuk, atur tanggal janji bayar!',
            title_color='#FFFFFF',
            text_color='#FFFFFF',
            card_order_number=old_card.card_order_number,
            card_action=old_card.card_action,
            card_destination=old_card.card_destination,
        )

        create_or_update_image(
            new_card.id, CardProperty.IMAGE_TYPE.card_optional_image, str(ImageNames.NEW_INAPP_ICON)
        )

        button = InfoCardButtonProperty.objects.get(info_card_property=old_card)
        if button:
            InfoCardButtonProperty.objects.create(
                info_card_property=new_card,
                text=button.text,
                button_name=button.button_name,
                action_type=button.action_type,
                destination=button.destination,
                text_color=button.text_color,
            )

        # Duplicate Message
        new_msg = StreamlinedMessage.objects.create(
            info_card_property=new_card,
            message_content='Kalau pilih tanggal lebih awal, bisa dapet cashback hingga 4%, lho!',
        )

        # Duplicate Communication
        StreamlinedCommunication.objects.create(
            message=new_msg,
            status=comm.status,
            status_code=comm.status_code,
            communication_platform=CommunicationPlatform.INFO_CARD,
            description='for ptp card v2',
            is_active=True,
            extra_conditions=CardProperty.INAPP_PTP_BEFORE_SET_V2,
        )


def update_in_app_ptp_feature_setting(apps, schema_editor):
    fs = FeatureSetting.objects.filter(feature_name=FeatureNameConst.IN_APP_PTP_SETTING).last()

    if not fs:
        return

    parameters = fs.parameters or {}
    parameters["new_card_minimum_version"] = ">=8.48.0"
    parameters["dpd_start_appear"] = -10
    parameters["dpd_stop_appear"] = -1
    fs.parameters = parameters
    fs.save(update_fields=["parameters"])


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(run_update_card_for_older_version),
        migrations.RunPython(create_ptp_card_for_new_app_version),
        migrations.RunPython(update_in_app_ptp_feature_setting),
    ]
