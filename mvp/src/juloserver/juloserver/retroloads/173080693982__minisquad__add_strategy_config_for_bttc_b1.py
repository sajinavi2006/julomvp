# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-11-05 11:42
from __future__ import unicode_literals

from django.db import migrations
import copy
from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.constants import FeatureNameConst


def run_bttc_experiment_pds_configuration(apps, schema_editor):
    bttc_bucket_names_delinquent = []
    experiment_list = ['bttc-B1-experiment1', 'bttc-B1-experiment2', 'bttc-B1-experiment3']
    ranges_exp = ['A', 'B', 'C', 'D']
    range_time_pds = {
        'A': ['08:00', '10:00'],
        'B': ['', '13:00'],
        'C': ['', '16:00'],
        'D': ['', '20:00'],
    }
    for experiment in experiment_list:
        for time_group in ranges_exp:
            bttc_bucket_names_delinquent.append("{}-{}".format(experiment, time_group))

    # create new airudder configuration for bucket related
    feature_group_mapping_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_TASKS_STRATEGY_CONFIG
    ).last()
    if not feature_group_mapping_config:
        return

    params = feature_group_mapping_config.parameters
    base_params_dict = {
        "autoQA": "N",
        "acwTime": "20",
        "ringLimit": "0",
        "slotFactor": "",
        "dialingMode": "0",
        "maxLostRate": "5",
        "qaLimitRate": "100",
        "repeatTimes": "3",
        "callInterval": "0",
        "dialingOrder": [
            'mobile_phone_2',
            'no_telp_pasangan',
            'no_telp_kerabat',
            'telp_perusahaan',
        ],
        "qaLimitLength": "0",
        "autoSlotFactor": "1",
        "bulkCallInterval": "300",
        "resultStrategies": "on",
        "contactNumberInterval": "300",
        "resultStrategiesConfig": [],
    }
    for bucket_name in bttc_bucket_names_delinquent:
        bttc_range = bucket_name[-1]
        params_dict = copy.deepcopy(base_params_dict)
        params_dict['start_time'] = range_time_pds.get(bttc_range)[0]
        params_dict['end_time'] = (
            '20:00'
            if bttc_range == 'A' and 'test1' in bucket_name
            else range_time_pds.get(bttc_range)[1]
        )
        params_dict['rest_times'] = (
            [["12:00", "13:00"]] if bttc_range == 'A' and 'test1' in bucket_name else []
        )
        params.update({bucket_name: params_dict})
    feature_group_mapping_config.parameters = params
    feature_group_mapping_config.save()

    feature_agent_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_GROUP_NAME_CONFIG
    ).last()
    if not feature_agent_group_config:
        return

    agent_params = feature_agent_group_config.parameters
    for bucket_name in bttc_bucket_names_delinquent:
        agent_params[bucket_name] = bucket_name
    feature_agent_group_config.parameters = agent_params
    feature_agent_group_config.save()

    # set batch threshold upload to AiRudder
    feature_batching_threshold_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_SEND_BATCHING_THRESHOLD
    ).last()
    if not feature_batching_threshold_group_config:
        return

    params_threshold = feature_batching_threshold_group_config.parameters
    for bucket_name in bttc_bucket_names_delinquent:
        params_threshold[bucket_name] = 5000
    feature_batching_threshold_group_config.parameters = params_threshold
    feature_batching_threshold_group_config.save()


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(run_bttc_experiment_pds_configuration, migrations.RunPython.noop)
    ]
