# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-12-01 07:43
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.statuses import ApplicationStatusCodes
from juloserver.julo.utils import upload_file_to_oss
from juloserver.streamlined_communication.models import (InfoCardButtonProperty,
                                                         CardProperty,
                                                         InfoCardProperty,
                                                         StreamlinedMessage,
                                                         StreamlinedCommunication)
from juloserver.streamlined_communication.constant import CommunicationPlatform
from juloserver.julo.models import StatusLookup, Image
praying_emoji = '\U0001F64F'
party_popper_emoji = '\U0001F389'
hourglass_emoji = '\U000023F3'
warning_emoji = '\U000026A0'
smile_emoji = '\U0001F642'
L_BUTTON = 'L.BUTTON'
R_BUTTON = 'R.BUTTON'
M_BUTTON = 'M.BUTTON'

class ImageNames(object):
    DESIGNS_REAL = 'info-card/designs_real.png'
    GROUP_3500 = 'info-card/group_3500.png'
    LAYER_3 = 'info-card/layer_3.png'
    LAYER_4 = 'info-card/layer_4.png'
    LAYER_5 = 'info-card/layer_5.png'
    LAYER_6 = 'info-card/layer_6.png'
    RECTANGLE_1489 = 'info-card/rectangle_1489.png'
    RECTANGLE_1489_2 = 'info-card/rectangle_1489_2.png'


def create_image(image_source_id, image_type, image_url):
    image = Image()
    image.image_source = image_source_id
    image.image_type = image_type
    image.url = image_url
    image.save()


def add_overhaul_j1_info_card_c_score_delay():
    button_2_properties = {'card_type': '2',
                           'title': 'Dalam proses verifikasi ' + '\U000023F3',
                           'title_color': '#ffffff',
                           'text_color': '#ffffff',
                           'card_order_number': 1}
    info_card_property = InfoCardProperty.objects.filter(**button_2_properties).last()
    if not info_card_property:
        info_card_property = InfoCardProperty.objects.create(**button_2_properties)
    data_streamlined_message = {
        'info_card_property': info_card_property,
        'message_content': 'Data pengajuan Anda telah diterima dan sedang diverifikasi. '
                   'Silahkan kembali dalam satu hari kerja untuk memeriksa '
                   'status pengajuan Anda.'
    }

    message = StreamlinedMessage.objects.filter(**data_streamlined_message).last()
    if not message:
        message = StreamlinedMessage.objects.create(**data_streamlined_message)

    stl_communication = StreamlinedCommunication.objects.filter(
        communication_platform=CommunicationPlatform.INFO_CARD,
        status_code_id=120,
        extra_conditions=CardProperty.CUSTOMER_HAVE_LOW_SCORE_OR_C_WITH_DElAY,
        is_active=True,
        description='delay for C score',
        message=message
    ).last()
    if not stl_communication:
        StreamlinedCommunication.objects.create(
            communication_platform=CommunicationPlatform.INFO_CARD,
            status_code_id=120,
            extra_conditions=CardProperty.CUSTOMER_HAVE_LOW_SCORE_OR_C_WITH_DElAY,
            is_active=True,
            description='delay for C score',
            message=message
        )


def retroload_overhaul_cards_data_julo_one(_apps, _schema_editor):
    data_to_be_loaded = [
        {
            'status': ApplicationStatusCodes.DOCUMENTS_SUBMITTED,
            'additional_condition': 'CUSTOMER_HAVE_HIGH_SCORE',
            'title': 'Proses Verifikasi telepon ðŸ“ž',
            'content': 'Anda akan segera dihubungi untuk proses verifikasi. '
                       'Pastikan telepon Anda aktif saat dihubungi. ',
            'button': [],
            'click_to': [],
            'template_type': '2',
            'card_number': 1,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.DESIGNS_REAL,
            'additional_images': [],
            'button_url': []
        },
        {
            'status': ApplicationStatusCodes.DOCUMENTS_SUBMITTED,
            'additional_condition': 'CUSTOMER_HAVE_MEDIUM_SCORE',
            'title': 'Selamat! Tinggal sedikit lagi' + party_popper_emoji,
            'content': 'Mohon lengkapi dokumen yang dibutuhkan '
                       'untuk dapat melanjutkan proses pengajuan.',
            'button': ['Lengkapi Dokumen'],
            'button_name': [R_BUTTON],
            'click_to': ['appl_docs'],
            'template_type': '1',
            'card_number': 2,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.LAYER_4,
            'additional_images': [ImageNames.LAYER_6],
            'button_url': [ImageNames.RECTANGLE_1489]
        },
        {
            'status': ApplicationStatusCodes.DOCUMENTS_SUBMITTED,
            'additional_condition': 'CUSTOMER_HAVE_HIGH_C_SCORE',
            'title': 'Selamat! Tinggal sedikit lagi' + party_popper_emoji,
            'content': 'Mohon lengkapi dokumen yang dibutuhkan untuk dapat melanjutkan '
                       'proses pengajuan.',
            'button': ['Lengkapi Dokumen'],
            'button_name': [R_BUTTON],
            'click_to': ['appl_docs'],
            'template_type': '1',
            'card_number': 3,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.LAYER_4,
            'additional_images': [ImageNames.LAYER_6],
            'button_url': [ImageNames.RECTANGLE_1489]
        },
        {
            'status': ApplicationStatusCodes.DOCUMENTS_SUBMITTED,
            'additional_condition': 'CUSTOMER_HAVE_LOW_SCORE_OR_C',
            'title': 'Mohon maaf' + praying_emoji,
            'content': 'Anda belum sesuai kriteria untuk dapat melakukan pinjaman. '
                       'Namun, Anda masih dapat melakukan pinjaman melalui BFI '
                       'atau Kreditpedia.',
            'button': [],
            'click_to': [],
            'template_type': '2',
            'card_number': 1,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.DESIGNS_REAL,
            'additional_images': [],
            'button_url': []
        },
    ]

    for data in data_to_be_loaded:
        button_1_properties = {'card_type': '1',
                               'title': data['title'],
                               'title_color': data['title_colour'],
                               'text_color': data['text_colour'],
                               'card_order_number': data['card_number']}
        button_2_properties = {'card_type': '2',
                               'title': data['title'],
                               'title_color': data['title_colour'],
                               'text_color': data['text_colour'],
                               'card_order_number': data['card_number']}
        button_3a_properties = {'card_type': '3a',
                                'card_destination': data['click_to'],
                                'title': data['title'],
                                'title_color': data['title_colour'],
                                'text_color': data['text_colour'],
                                'card_order_number': data['card_number']}
        button_3b_properties = {'card_type': '3b',
                                'title': data['title'],
                                'title_color': data['title_colour'],
                                'text_color': data['text_colour'],
                                'card_order_number': data['card_number']}
        if data['template_type'] == '1':
            info_card = InfoCardProperty.objects.create(**button_1_properties)
        elif data['template_type'] == '2':
            info_card = InfoCardProperty.objects.create(**button_2_properties)
        elif data['template_type'] == '3':
            info_card = InfoCardProperty.objects.create(**button_3b_properties)
        button_info_card = dict()
        if data['button']:
            for idx, image_url in enumerate(data['button']):
                button_info_card['info_card_property'] = info_card
                button_info_card['text'] = data['button'][idx]
                button_info_card['button_name'] = data['button_name'][idx]
                button_info_card['action_type'] = CardProperty.APP_DEEPLINK
                button_info_card['destination'] = data['click_to'][idx]
                button_info_card['text_color'] = data['text_colour']
                button, _ = InfoCardButtonProperty.objects.get_or_create(**button_info_card)
                create_image(button.id, CardProperty.IMAGE_TYPE.button_background_image, data['button_url'][idx])


        data_streamlined_message = {'message_content': data['content'],
                                    'info_card_property': info_card}
        message = StreamlinedMessage.objects.create(**data_streamlined_message)
        status = StatusLookup.objects.filter(status_code=data['status']).last()
        data_for_streamlined_comms = {'status_code': status,
                                      'status': data['status'],
                                      'communication_platform': CommunicationPlatform.INFO_CARD,
                                      'message': message,
                                      'description': 'retroloaded_card_information',
                                      'is_active': True,
                                      'extra_conditions': data['additional_condition']}
        streamlined_communication = StreamlinedCommunication.objects.create(**data_for_streamlined_comms)
        # create image for background
        if data['background_url']:
            create_image(info_card.id, CardProperty.IMAGE_TYPE.card_background_image, data['background_url'])

        if data['additional_images']:
            additional_image_url = data['additional_images']
            additional_image_url = additional_image_url[0]
            create_image(info_card.id, CardProperty.IMAGE_TYPE.card_optional_image, str(additional_image_url))

    add_overhaul_j1_info_card_c_score_delay()


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(retroload_overhaul_cards_data_julo_one, migrations.RunPython.noop)
    ]
