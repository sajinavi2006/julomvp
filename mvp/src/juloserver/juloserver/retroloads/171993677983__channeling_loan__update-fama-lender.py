# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-07-02 16:12
from __future__ import unicode_literals

from django.db import migrations
from juloserver.followthemoney.models import LenderCurrent
from juloserver.julo.models import (
    FeatureSetting,
    Partner,
)
from juloserver.julo.constants import FeatureNameConst
from juloserver.followthemoney.services import generate_lender_signature

USERNAME = 'fama_channeling'
ADDRESS = (
    "Revenue Tower Lantai 6, District 8 - SCBD Lot 13, "
    "Jl. Jendral Sudirman Kav. 52-53 Jakarta 12190"
)
POC_NAME = 'Sukiwan'
POC_POSITION = 'Chief Business Officer'
SIGNATURE_KEY = 'newlender'


def update_lender_information(apps, schema_editor):
    lender = LenderCurrent.objects.get_or_none(lender_name=USERNAME)
    if lender:
        lender.update_safely(
            company_name="PT Super Bank Indonesia",
            lender_display_name="PT Super Bank Indonesia",
            lender_address=ADDRESS,
            lender_address_city="Jakarta Selatan",
            lender_address_province="DKI Jakarta",
            business_type="Bank",
            poc_name=POC_NAME,
            poc_email="sukiwan.c@superbank.id",
            poc_phone="+62818715535",
            poc_position=POC_POSITION,
            source_of_fund="Lainnya",
        )
    partner = Partner.objects.filter(name=USERNAME).last()
    if partner:
        partner.update_safely(
            poc_name=POC_NAME,
            poc_email="sukiwan.c@superbank.id",
            poc_phone="+62818715535",
            source_of_fund="lainnya",
            company_name="PT Super Bank Indonesia",
            company_address=ADDRESS,
            business_type="Bank",
        )


def update_list_lender_info_fs(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.LIST_LENDER_INFO
    ).last()
    if feature_setting:
        feature_setting.parameters['lenders'][USERNAME] = {
            'address': ADDRESS,
            'license_no': '',
            'poc_name': POC_NAME,
            'poc_position': POC_POSITION,
            'signature': '',
        }
        feature_setting.save()


def create_new_certificate(apps, schema_editor):
    lender = LenderCurrent.objects.get_or_none(lender_name=USERNAME)
    if lender:
        generate_lender_signature(lender=lender, signature_key=SIGNATURE_KEY)


def update_signature_key_configuration(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.SIGNATURE_KEY_CONFIGURATION
    ).last()
    if feature_setting:
        lender = LenderCurrent.objects.get_or_none(lender_name=USERNAME)
        if lender:
            feature_setting.parameters['users'][str(lender.user.id)] = SIGNATURE_KEY
            feature_setting.save()


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(update_lender_information, migrations.RunPython.noop),
        migrations.RunPython(update_list_lender_info_fs, migrations.RunPython.noop),
        migrations.RunPython(create_new_certificate, migrations.RunPython.noop),
        migrations.RunPython(update_signature_key_configuration, migrations.RunPython.noop),
    ]
