# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2022-03-10 06:32
from __future__ import unicode_literals

from django.db import migrations
from juloserver.sdk.services import xls_to_dict
from juloserver.apiv3.models import (
    ProvinceLookup,
    CityLookup,
    DistrictLookup,
    SubDistrictLookup,
)


def update_address_lookup(apps, schema_editor):
    ProvinceLookup.objects.filter(is_active=True).update(is_active=False)
    provinces = xls_to_dict('misc_files/csv/address/provinces.csv')['provinces.csv']
    province_code_mapping = {}
    for province in provinces:
        province_code_mapping[province['code']] = ProvinceLookup.objects.create(
            province=province['name'].title()
        )
    print("")
    print("Provinces: ", len(province_code_mapping))

    CityLookup.objects.filter(is_active=True).update(is_active=False)
    cities = xls_to_dict('misc_files/csv/address/cities.csv')['cities.csv']
    city_code_mapping = {}
    for city in cities:
        city_code_mapping[city['code']] = CityLookup.objects.create(
            city=city['name'].title(),
            is_active=True,
            province=province_code_mapping[city['parent']]
        )
    print("City: ", len(city_code_mapping))

    DistrictLookup.objects.filter(is_active=True).update(is_active=False)
    districts = xls_to_dict('misc_files/csv/address/subDistricts.csv')['subDistricts.csv']
    district_code_mapping = {}
    for district in districts:
        district_code_mapping[district['code']] = DistrictLookup.objects.create(
            district=district['name'].title(),
            is_active=True,
            city=city_code_mapping[district['parent']]
        )
    print("District: ", len(district_code_mapping))

    SubDistrictLookup.objects.filter(is_active=True).update(is_active=False)
    subdistricts = xls_to_dict('misc_files/csv/address/villages.csv')['villages.csv']
    new_subdistricts = []
    for subdistrict in subdistricts:
        if 'postal' in subdistrict.keys():
            postal_codes = subdistrict['postal']
        new_subdistricts.append(
            SubDistrictLookup(
                sub_district=subdistrict['name'].title(),
                is_active=True,
                district=district_code_mapping[subdistrict['parent']],
                zipcode=postal_codes[-5:],
            )
        )
    data = SubDistrictLookup.objects.bulk_create(new_subdistricts)
    print("SubDistrict: ", len(data))


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(update_address_lookup, migrations.RunPython.noop)
    ]
