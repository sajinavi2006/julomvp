# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-06-13 07:32
from __future__ import unicode_literals
import csv
import io

from django.db import migrations

from juloserver.julo.models import SepulsaProduct
from juloserver.payment_point.models import XfersProduct


def fill_xfers_product_table_data(apps, schema_editor):

    data = """s,product_id,product_name,product_nominal,type,category,partner_price,customer_price,is_active,customer_price_regular
        ,2048,DANA 20 RB,20.000,e-wallet,DANA,20.550,20.605,TRUE,20.550
        ,2049,DANA 25 RB,25.000,e-wallet,DANA,25.550,25.605,TRUE,25.550
        ,1570,DANA 50 RB,50.000,e-wallet,DANA,50.550,50.605,TRUE,50.550
        ,1587,DANA 100 RB,100.000,e-wallet,DANA,100.550,100.605,TRUE,100.550
        ,1588,DANA 150 RB,150.000,e-wallet,DANA,150.550,150.605,TRUE,150.550
        ,1589,DANA 200 RB,200.000,e-wallet,DANA,200.550,200.605,TRUE,200.550
        ,1590,DANA 250 RB,250.000,e-wallet,DANA,250.550,250.605,TRUE,250.550
        ,1591,DANA 300 RB,300.000,e-wallet,DANA,300.550,300.605,TRUE,300.550
        ,1592,DANA 350 RB,350.000,e-wallet,DANA,350.550,350.605,TRUE,350.550
        ,1593,DANA 400 RB,400.000,e-wallet,DANA,400.550,400.605,TRUE,400.550
        ,1594,DANA 450 RB,450.000,e-wallet,DANA,450.550,450.605,TRUE,450.550
        ,1595,DANA 500 RB,500.000,e-wallet,DANA,500.550,500.605,TRUE,500.550
        ,2050,DANA 600 RB,600.000,e-wallet,DANA,600.550,600.605,TRUE,600.550
        ,2051,DANA 700 RB,700.000,e-wallet,DANA,700.550,700.605,TRUE,700.550
        ,2052,DANA 800 RB,800.000,e-wallet,DANA,800.550,800.605,TRUE,800.550
        ,2053,DANA 900 RB,900.000,e-wallet,DANA,900.550,900.605,TRUE,900.550"""

    # Use io.StringIO to simulate a file object based on the string data
    csv_file = io.StringIO(data)

    # Read the CSV data
    csv_reader = csv.DictReader(csv_file)

    # Initialize an empty list to store the dictionaries

    data = []
    for row in csv_reader:
        sepulsa_product = SepulsaProduct.objects.filter(product_name=row['product_name']).last()

        product = XfersProduct(
            sepulsa_product=sepulsa_product,
            product_id=str(row['product_id']),
            product_name=row['product_name'],
            product_nominal=row['product_nominal'].replace('.', ''),
            type=row['type'],
            category=row['category'],
            partner_price=row['partner_price'].replace('.', ''),
            customer_price=row['customer_price'].replace('.', ''),
            is_active=row['is_active'],
            customer_price_regular=row['customer_price_regular'].replace('.', ''),
        )
        data.append(product)

    XfersProduct.objects.bulk_create(data)


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(
            code=fill_xfers_product_table_data,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
