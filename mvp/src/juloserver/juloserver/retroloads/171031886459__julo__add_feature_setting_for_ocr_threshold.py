# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-03-13 08:34
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.models import FeatureSetting
from juloserver.julo.constants import FeatureNameConst


def execute(apps, schema_editor):

    is_exists = FeatureSetting.objects.filter(feature_name=FeatureNameConst.KTP_OCR_THRESHOLD_VALUE).exists()
    if not is_exists:
        FeatureSetting.objects.create(
            feature_name=FeatureNameConst.KTP_OCR_THRESHOLD_VALUE,
            is_active=False,
            category="application",
            description="Threshold value for each fields of KTP OCR",
            parameters={
                "nik": {
                    "threshold": 86
                },
                "city": {
                    "threshold": 99
                },
                "rt_rw": {
                    "threshold": 97
                },
                "gender": {
                    "threshold": 98
                },
                "address": {
                    "threshold": 59
                },
                "district": {
                    "threshold": 99
                },
                "religion": {
                    "threshold": 99
                },
                "fullname": {
                    "threshold": 95
                },
                "blood_group": {
                    "threshold": 57
                },
                "nationality": {
                    "threshold": 99
                },
                "date_of_birth": {
                    "threshold": 98
                },
                "marital_status": {
                    "threshold": 99
                },
                "place_of_birth": {
                    "threshold": 99
                },
                "administrative_village": {
                    "threshold": 99
                },
                "valid_until": {
                    "threshold": 99
                },
                "job": {
                    "threshold": 99
                },
                "province": {
                    "threshold": 99
                }
            }
        )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(execute, migrations.RunPython.noop),
    ]
