# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-01-31 06:53
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.constants import WorkflowConst
from juloserver.julo.models import Workflow, WorkflowStatusNode, WorkflowStatusPath

from juloserver.julo.statuses import ApplicationStatusCodes

application_statuses = [
    ApplicationStatusCodes.NOT_YET_CREATED,
    ApplicationStatusCodes.FORM_CREATED,
    ApplicationStatusCodes.FORM_CREATED_PARTNER,
    ApplicationStatusCodes.FORM_PARTIAL,
    ApplicationStatusCodes.MERCHANT_HISTORICAL_TRANSACTION_INVALID,
    ApplicationStatusCodes.FORM_PARTIAL_EXPIRED,
    ApplicationStatusCodes.OFFER_REGULAR,
    ApplicationStatusCodes.JULO_STARTER_AFFORDABILITY_CHECK,
    ApplicationStatusCodes.JULO_STARTER_LIMIT_GENERATED,
    ApplicationStatusCodes.FORM_SUBMITTED,
    ApplicationStatusCodes.FORM_SUBMITTED_PARTNER,
    ApplicationStatusCodes.FORM_SUBMISSION_ABANDONED,
    ApplicationStatusCodes.APPLICATION_FLAGGED_FOR_FRAUD_SUSPICIOUS,
    ApplicationStatusCodes.DOCUMENTS_SUBMITTED,
    ApplicationStatusCodes.SCRAPED_DATA_VERIFIED,
    ApplicationStatusCodes.DOCUMENTS_VERIFIED,
    ApplicationStatusCodes.DOCUMENTS_VERIFIED_BY_THIRD_PARTY,
    ApplicationStatusCodes.PRE_REJECTION,
    ApplicationStatusCodes.CALL_ASSESSMENT,
    ApplicationStatusCodes.PENDING_PARTNER_APPROVAL,
    ApplicationStatusCodes.VERIFICATION_CALLS_SUCCESSFUL,
    ApplicationStatusCodes.VERIFICATION_CALLS_SUCCESSFUL_BY_THIRD_PARTY,
    ApplicationStatusCodes.APPLICANT_CALLS_ONGOING,
    ApplicationStatusCodes.TYPO_CALLS_UNSUCCESSFUL,
    ApplicationStatusCodes.CUSTOMER_IGNORES_CALLS,
    ApplicationStatusCodes.APPLICANT_CALLS_SUCCESSFUL,
    ApplicationStatusCodes.APPLICATION_RESUBMISSION_REQUESTED,
    ApplicationStatusCodes.APPLICATION_RESUBMITTED,
    ApplicationStatusCodes.APPLICATION_FLAGGED_FOR_FRAUD,
    ApplicationStatusCodes.APPLICATION_FLAGGED_FOR_SUPERVISOR,
    ApplicationStatusCodes.APPLICATION_DENIED,
    ApplicationStatusCodes.RESUBMISSION_REQUEST_ABANDONED,
    ApplicationStatusCodes.APPLICATION_CANCELED_BY_CUSTOMER,
    ApplicationStatusCodes.VERIFICATION_CALLS_ONGOING,
    ApplicationStatusCodes.VERIFICATION_CALLS_ONGOING_BY_THIRD_PARTY,
    ApplicationStatusCodes.VERIFICATION_CALLS_EXPIRED,
    ApplicationStatusCodes.OFFER_MADE_TO_CUSTOMER,
    ApplicationStatusCodes.OFFER_ACCEPTED_BY_CUSTOMER,
    ApplicationStatusCodes.OFFER_DECLINED_BY_CUSTOMER,
    ApplicationStatusCodes.OFFER_EXPIRED,
    ApplicationStatusCodes.NAME_BANK_VALIDATION_FAILED,
    ApplicationStatusCodes.DIGISIGN_FAILED,
    ApplicationStatusCodes.DIGISIGN_FACE_FAILED,
    ApplicationStatusCodes.FORM_GENERATED,
    ApplicationStatusCodes.ACTIVATION_CALL_SUCCESS_AND_BANK_VALIDATE_ONGOING,
    ApplicationStatusCodes.ACTIVATION_AUTODEBET,
    ApplicationStatusCodes.ACTIVATION_CALL_SUCCESSFUL,
    ApplicationStatusCodes.ACTIVATION_CALL_FAILED,
    ApplicationStatusCodes.LEGAL_AGREEMENT_RESUBMISSION_REQUESTED,
    ApplicationStatusCodes.LEGAL_AGREEMENT_SUBMITTED,
    ApplicationStatusCodes.NAME_VALIDATE_ONGOING,
    ApplicationStatusCodes.LENDER_APPROVAL,
    ApplicationStatusCodes.LEGAL_AGREEMENT_SIGNED,
    ApplicationStatusCodes.LEGAL_AGREEMENT_EXPIRED,
    ApplicationStatusCodes.LEGAL_AGREEMENT_SIGNED_AND_DP_PENDING,
    ApplicationStatusCodes.DOWN_PAYMENT_PAID,
    ApplicationStatusCodes.DOWN_PAYMENT_EXPIRED,
    ApplicationStatusCodes.NAME_VALIDATE_FAILED,
    ApplicationStatusCodes.KYC_IN_PROGRESS,
    ApplicationStatusCodes.FUND_DISBURSAL_ONGOING,
    ApplicationStatusCodes.BULK_DISBURSAL_ONGOING,
    ApplicationStatusCodes.FUND_DISBURSAL_SUCCESSFUL,
    ApplicationStatusCodes.FUND_DISBURSAL_FAILED,
    ApplicationStatusCodes.PARTNER_APPROVED,
    ApplicationStatusCodes.LOC_APPROVED,
    ApplicationStatusCodes.JULO_STARTER_TURBO_UPGRADE,
    ApplicationStatusCodes.JULO_STARTER_UPGRADE_ACCEPTED,
    ApplicationStatusCodes.FACE_RECOGNITION_AFTER_RESUBMIT,
]

supported_workflows = [
    WorkflowConst.JULO_ONE,
    WorkflowConst.JULO_STARTER,
    WorkflowConst.GRAB,
]

def add_workflow_nodes(apps, _schema_editor):
    nodes = []

    workflows = Workflow.objects.filter(name__in=supported_workflows)
    for workflow in workflows:
        nodes.append(
            WorkflowStatusNode(
                status_node=ApplicationStatusCodes.CUSTOMER_ON_DELETION,
                workflow=workflow,
                handler='JuloOne185Handler',
            ),
        )
        nodes.append(
            WorkflowStatusNode(
                status_node=ApplicationStatusCodes.CUSTOMER_DELETED,
                workflow=workflow,
                handler='JuloOne186Handler',
            ),
        )
    
    WorkflowStatusNode.objects.bulk_create(nodes)

def add_workflow_status_paths(apps, _schema_editor):
    workflow_status_paths = []
    workflows = Workflow.objects.filter(name__in=supported_workflows)

    # populate workflow from all statuses to status x185
    for workflow in workflows:
        for status in application_statuses:
            workflow_status_paths.append(
                WorkflowStatusPath(
                    status_previous=status,
                    status_next=ApplicationStatusCodes.CUSTOMER_ON_DELETION,
                    type=WorkflowStatusPath.TYPE_CHOICES[0][0],
                    workflow=workflow,
                    customer_accessible=True,
                    agent_accessible=False,
                )
            )
    
    # populate workflow from status x185 to all statuses
    for workflow in workflows:
        for status in application_statuses:
            workflow_status_paths.append(
                WorkflowStatusPath(
                    status_previous=ApplicationStatusCodes.CUSTOMER_ON_DELETION,
                    status_next=status,
                    type=WorkflowStatusPath.TYPE_CHOICES[0][0],
                    workflow=workflow,
                    customer_accessible=True,
                    agent_accessible=True,
                )
            )
    
    for workflow in workflows:
        # populate workflow from all statuses + x185 to x186
        workflow_status_paths.append(
            WorkflowStatusPath(
                status_previous=ApplicationStatusCodes.CUSTOMER_ON_DELETION,
                status_next=ApplicationStatusCodes.CUSTOMER_DELETED,
                type=WorkflowStatusPath.TYPE_CHOICES[0][0],
                workflow=workflow,
                customer_accessible=True,
                agent_accessible=True,
            )
        )

    for workflow in workflows:
        for status in application_statuses:
            workflow_status_paths.append(
                WorkflowStatusPath(
                    status_previous=status,
                    status_next=ApplicationStatusCodes.CUSTOMER_DELETED,
                    type=WorkflowStatusPath.TYPE_CHOICES[0][0],
                    workflow=workflow,
                    customer_accessible=True,
                    agent_accessible=True,
                )
            )

    WorkflowStatusPath.objects.bulk_create(workflow_status_paths)


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(add_workflow_nodes, migrations.RunPython.noop),
        migrations.RunPython(add_workflow_status_paths, migrations.RunPython.noop),
    ]
