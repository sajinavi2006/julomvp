# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-08-16 09:58
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.constants import (
    FeatureNameConst,
    DialerSystemConst,
)


def add_bucket_5_to_ai_rudder_feature_setting(apps, schema_editor):
    feature_group_mapping_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_FULL_ROLLOUT
    ).last()
    if not feature_group_mapping_config:
        return
    feature_group_mapping_config.refresh_from_db()
    params = feature_group_mapping_config.parameters
    eligible_buckets = params['eligible_bucket_number']
    eligible_buckets.append(5)
    params['eligible_bucket_number'] = eligible_buckets
    feature_group_mapping_config.parameters = params
    feature_group_mapping_config.save()

    feature_batching_threshold_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_SEND_BATCHING_THRESHOLD
    ).last()
    if not feature_batching_threshold_group_config:
        return

    params_threshold = feature_batching_threshold_group_config.parameters
    params_threshold[DialerSystemConst.DIALER_BUCKET_5] = 5000
    feature_batching_threshold_group_config.parameters = params_threshold
    feature_batching_threshold_group_config.save()

    feature_slack_alert = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_SEND_SLACK_ALERT
    ).last()
    if not feature_slack_alert:
        return

    params_slack_alert = feature_slack_alert.parameters
    bucket_list = params_slack_alert['bucket_list']
    bucket_list.append(DialerSystemConst.DIALER_BUCKET_5)
    params_slack_alert['bucket_list'] = bucket_list
    feature_slack_alert.parameters = params_slack_alert
    feature_slack_alert.save()

    feature_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_GROUP_NAME_CONFIG
    ).last()
    if not feature_group_config:
        return

    params_feature_group_config = feature_group_config.parameters
    params_feature_group_config[DialerSystemConst.DIALER_BUCKET_5] = "Group_Bucket5"
    feature_group_config.parameters = params_feature_group_config
    feature_group_config.save()

    feature_ai_rudder_tasks_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_TASKS_STRATEGY_CONFIG
    ).last()
    if feature_ai_rudder_tasks_config:
        return

    feature_ai_rudder_tasks_config_params = feature_ai_rudder_tasks_config.parameters
    b5_config = {
        "autoQA": "N",
        "acwTime": "20",
        "end_time": "20:00",
        "ringLimit": "0",
        "rest_times": [["12:00", "13:00"]],
        "slotFactor": "",
        "start_time": "08:00",
        "dialingMode": "0",
        "maxLostRate": "5",
        "qaLimitRate": "100",
        "repeatTimes": "3",
        "callInterval": "0",
        "dialingOrder": [
            "mobile_phone_1",
            "mobile_phone_2",
            "no_telp_pasangan",
            "no_telp_kerabat",
            "telp_perusahaan",
        ],
        "qaLimitLength": "0",
        "autoSlotFactor": "1",
        "bulkCallInterval": "300",
        "resultStrategies": "on",
        "contactNumberInterval": "300",
        "resultStrategiesConfig": [
            {"oper": "==", "title": "Level2", "value": "WPC", "action": [1, 2], "dncDay": 1},
            {"oper": "==", "title": "Level2", "value": "ShortCall", "action": [1]},
        ],
        "timeFrames": [
            {"repeatTimes": 4, "contactInfoSource": "bucket_5"},
            {"repeatTimes": 5, "contactInfoSource": "bucket_5"},
            {"repeatTimes": 5, "contactInfoSource": "bucket_5"},
            {"repeatTimes": 5, "contactInfoSource": "bucket_5"},
        ],
        "timeFrameStatus": "on",
    }
    feature_ai_rudder_tasks_config_params[DialerSystemConst.DIALER_BUCKET_5] = b5_config
    feature_ai_rudder_tasks_config.parameters = feature_ai_rudder_tasks_config_params
    feature_ai_rudder_tasks_config.save()

    feature_setting_b5_ptp_additional_filter = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.ADDITIONAL_PTP_FILTER_FOR_B5
    ).last()
    if not feature_setting_b5_ptp_additional_filter:
        parameters = {'latest_paid_date_gt': 30, 'ptp_status_in': ['Paid', 'Paid after ptp date']}
        FeatureSetting.objects.create(
            feature_name=FeatureNameConst.ADDITIONAL_PTP_FILTER_FOR_B5,
            is_active=True,
            parameters=parameters,
        )


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(add_bucket_5_to_ai_rudder_feature_setting, migrations.RunPython.noop)
    ]
