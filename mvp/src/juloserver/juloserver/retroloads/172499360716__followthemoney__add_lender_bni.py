# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-08-30 04:53
# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-08-16 06:19
from __future__ import unicode_literals
from builtins import range
import secrets
import string

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.models import User
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.followthemoney.constants import LoanAgreementType
from juloserver.followthemoney.services import generate_lender_signature
from juloserver.julo.models import (
    ProductProfile,
    LenderDisburseCounter,
    LenderProductCriteria,
    Partner,
    FeatureSetting,
)
from juloserver.julo.constants import (
    FeatureNameConst,
    ProductLineCodes,
)


USERNAME = 'bni_channeling'
ADDRESS = 'Dummy address'
LICENSE_NUMBER = '123456789'
POC_NAME = 'Balthazar Isra'
POC_POSITION = 'Product Manager'
SIGNATURE_KEY = 'lender'


def create_bni_channeling_lender(apps, schema_editor):
    base_lender = LenderCurrent.objects.filter(lender_name="permata_channeling").last()
    if not base_lender:
        return
    base_partner = base_lender.user.partner

    company_name = 'PT Bank Negara Indonesia'
    business_type = 'Bank'
    poc_email = 'israbalthazar@julofinance.com'
    poc_phone = '+628123456'
    pks_number = '1.JTF.201707'
    source_of_fund = '-'
    is_only_escrow_balance = True
    minimum_balance = 500_000_000

    user = User.objects.filter(username=USERNAME).first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(8))
        user = User.objects.create_user(USERNAME, poc_email, password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner = Partner.objects.create(
            user=user,
            name=USERNAME,
            type="lender",
            email=poc_email,
            is_active=False,
            poc_name=POC_NAME,
            poc_email=poc_email,
            poc_phone=poc_phone,
            source_of_fund=source_of_fund,
            company_name=company_name,
            company_address=ADDRESS,
            business_type=business_type,
            agreement_letter_number=pks_number,
            is_csv_upload_applicable=base_partner.is_csv_upload_applicable,
            is_disbursement_to_partner_bank_account=(
                base_partner.is_disbursement_to_partner_bank_account
            ),
            is_disbursement_to_distributor_bank_account=(
                base_partner.is_disbursement_to_distributor_bank_account
            ),
        )

        lender = LenderCurrent.objects.create(
            user=user,
            lender_name=USERNAME,
            lender_address=ADDRESS,
            business_type=business_type,
            poc_email=poc_email,
            poc_name=POC_NAME,
            poc_position=POC_POSITION,
            poc_phone=poc_phone,
            source_of_fund=source_of_fund,
            lender_display_name=company_name,
            service_fee=0,
            lender_status="inactive",
            addendum_number=base_lender.addendum_number,
            company_name=company_name,
            license_number=LICENSE_NUMBER,
            insurance=base_lender.insurance,
            pks_number=pks_number,
            xfers_token=base_lender.xfers_token,
            is_master_lender=base_lender.is_master_lender,
            is_manual_lender_balance=base_lender.is_manual_lender_balance,
            is_low_balance_notification=base_lender.is_low_balance_notification,
            is_xfers_lender_flow=base_lender.is_xfers_lender_flow,
            is_bss_balance_include=base_lender.is_bss_balance_include,
            is_only_escrow_balance=is_only_escrow_balance,
            minimum_balance=minimum_balance,
        )
        LenderDisburseCounter.objects.create(lender=lender, partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=list(
                ProductProfile.objects.filter(
                    code__in=[ProductLineCodes.J1, ProductLineCodes.TURBO]
                ).values_list('id', flat=True)
            ),
        )

        base_lender_bank_accounts = base_lender.lenderbankaccount_set.filter(
            bank_account_status="active"
        )
        banks = []
        for bank_account in base_lender_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_type in LoanAgreementType.LIST:
            base_agreement_template = LoanAgreementTemplate.objects.filter(
                agreement_type=agreement_type,
                lender=base_lender,
            ).last()
            if base_agreement_template:
                body = base_agreement_template.body
                if agreement_type == LoanAgreementType.SKRTP:
                    # currently, hard code poc position is Direktur in SKRTP template
                    body = body.replace('<div>Direktur</div>', '<div>{{ poc_position }}</div>')

                agreement_templates.append(
                    LoanAgreementTemplate(
                        lender=lender,
                        body=body,
                        is_active=True,
                        agreement_type=agreement_type,
                    )
                )
        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        LenderApproval.objects.create(
            partner=partner,
            is_auto=base_partner.lenderapproval.is_auto,
            start_date=timezone.localtime(timezone.now()),
            end_date=None,
            delay=base_partner.lenderapproval.delay,
            expired_in=base_partner.lenderapproval.expired_in,
            expired_start_time=base_partner.lenderapproval.expired_start_time,
            expired_end_time=base_partner.lenderapproval.expired_end_time,
            is_endless=base_partner.lenderapproval.is_endless,
        )


def update_list_lender_info_fs_for_bni_channeling_lender(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.LIST_LENDER_INFO
    ).last()
    feature_setting.parameters['lenders'][USERNAME] = {
        'address': ADDRESS,
        'license_no': LICENSE_NUMBER,
        'poc_name': POC_NAME,
        'poc_position': POC_POSITION,
        'signature': '',
    }
    feature_setting.save()


def create_new_certificate_for_bni_channeling_lender(apps, schema_editor):
    bni_channeling_lender = LenderCurrent.objects.get_or_none(lender_name=USERNAME)
    if bni_channeling_lender:
        generate_lender_signature(lender=bni_channeling_lender, signature_key=SIGNATURE_KEY)


def update_signature_key_configuration_for_bni_channeling_lender(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.SIGNATURE_KEY_CONFIGURATION
    ).last()
    if not feature_setting:
        return

    bni_channeling_lender = LenderCurrent.objects.get_or_none(lender_name=USERNAME)
    if bni_channeling_lender:
        feature_setting.parameters['users'][str(bni_channeling_lender.user.id)] = SIGNATURE_KEY
        feature_setting.save()


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(create_bni_channeling_lender, migrations.RunPython.noop),
        migrations.RunPython(
            update_list_lender_info_fs_for_bni_channeling_lender, migrations.RunPython.noop
        ),
        migrations.RunPython(
            create_new_certificate_for_bni_channeling_lender, migrations.RunPython.noop
        ),
        migrations.RunPython(
            update_signature_key_configuration_for_bni_channeling_lender, migrations.RunPython.noop
        ),
    ]
