# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2025-03-26 08:40
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.constants import FeatureNameConst


def add_query_on_fs_physical_wl_b5_plus(apps, schema_editor):
    raw_query = """
        WITH base_payment AS (
          SELECT DISTINCT 
            a.account_id,
            l.customer_id,
            l.loan_id,
            p.account_payment_id,
            p.payment_id,
            p.due_date,
            p.due_amount,
            p.installment_principal,
            CASE WHEN ap.due_amount <> 0 THEN ap.principal_amount END AS principal_amount,
            ap.due_amount AS ap_due_amount,
            p.paid_date,
            p.paid_amount,
            (current_date AT TIME zone 'Asia/Jakarta') :: DATE - p.due_date AS dpd,
            p.payment_status_code,
            a.application_xid
          FROM 
            ops.payment p
          JOIN 
            ops.account_payment ap ON p.account_payment_id = ap.account_payment_id
          JOIN 
            ops.loan l ON p.loan_id = l.loan_id
          JOIN 
            ops.application a ON l.application_id2 = a.application_id
          JOIN 
            ops.product_line pl ON a.product_line_code = pl.product_line_code
          JOIN 
            ops.account ac ON a.account_id = ac.account_id
          WHERE 
            p.payment_status_code NOT IN (330, 331, 332)
            AND a.product_line_code IN (1, 2)
            AND COALESCE(a.partner_id, 0) NOT IN (9, 93)
            AND ap.status_code NOT IN (330, 331, 332)
            AND p.is_restructured IS FALSE
            AND p.account_payment_id IS NOT NULL
            AND ac.status_code NOT IN (433)
        ),

        base_account_payment AS (
          SELECT 
            account_id,
            customer_id,
            account_payment_id,
            due_date,
            dpd,
            ROW_NUMBER() OVER (PARTITION BY account_id, customer_id ORDER BY due_date, 
            account_payment_id) AS due_date_number,
            MAX(application_xid) AS application_xid,
            SUM(due_amount) AS due_amount,
            SUM(installment_principal) AS installment_principal,
            MAX(principal_amount) AS principal_amount,
            MAX(ap_due_amount) AS ap_due_amount,
            SUM(paid_amount) AS total_paid,
            MAX(paid_date) AS last_paid,
            MIN(loan_id) AS earliest_loan_id
          FROM 
            base_payment
          GROUP BY 
            account_id, customer_id, account_payment_id, due_date, dpd
        ),

        earliest_account_payment AS (
          SELECT 
            account_id,
            customer_id,
            account_payment_id
          FROM (
            SELECT 
              account_id,
              customer_id,
              account_payment_id,
              ROW_NUMBER() OVER (PARTITION BY account_id, customer_id ORDER BY due_date ASC) AS rn
            FROM 
              base_account_payment
          ) sub
          WHERE rn = 1
        ),

        dab_summary AS (
          SELECT 
            bap.account_id,
            bap.customer_id,
            eap.account_payment_id,
            MAX(bap.application_xid) AS application_xid,
            MIN(bap.due_date) AS earliest_due_date,
            MAX(bap.dpd) AS highest_dpd,
            CASE 
              WHEN MAX(bap.dpd) < 1 THEN 'Current'
              WHEN MAX(bap.dpd) BETWEEN 1 AND 10 THEN 'Bucket 1'
              WHEN MAX(bap.dpd) BETWEEN 11 AND 40 THEN 'Bucket 2'
              WHEN MAX(bap.dpd) BETWEEN 41 AND 70 THEN 'Bucket 3'
              WHEN MAX(bap.dpd) BETWEEN 71 AND 90 THEN 'Bucket 4'
              WHEN MAX(bap.dpd) >= 91 THEN 'Bucket 5'
            END AS bucket,
            COALESCE(
              SUM(CASE WHEN bap.due_date <= (current_date AT TIME zone 'Asia/Jakarta') :: DATE 
               THEN bap.due_amount ELSE NULL END),
              SUM(CASE WHEN due_date_number = 1 THEN bap.due_amount ELSE NULL END)
            ) AS due_amount,
            SUM(bap.due_amount) AS all_outstanding_amount,
            SUM(bap.installment_principal) AS principal_amount,
            SUM(bap.principal_amount) AS ap_principal_amount,
            SUM(bap.ap_due_amount) AS ap_due_amount,
            MAX(bap.last_paid) AS last_paid,
            MIN(bap.earliest_loan_id) AS earliest_loan_id
          FROM 
            base_account_payment bap
          LEFT JOIN 
            earliest_account_payment eap 
            ON bap.account_id = eap.account_id AND bap.customer_id = eap.customer_id
          GROUP BY 
            bap.account_id, bap.customer_id, eap.account_payment_id
        )

        SELECT DISTINCT 
          (current_date AT TIME zone 'Asia/Jakarta') :: DATE  AS date_key,
          a.address_kabupaten AS city,
          a.fullname AS full_name,
          dab.account_id,
          dab.customer_id,
          a.address_street_num AS full_address,
          a.address_kodepos,
          a.address_kabupaten,
          a.address_kecamatan,
          a.address_provinsi AS address_province,
          a.address_kelurahan,
          a.mobile_phone_1
        FROM 
          dab_summary dab
        JOIN 
          ops.application a ON dab.application_xid = a.application_xid
        WHERE 
          dab.highest_dpd = {}
          AND LOWER(a.address_kabupaten) ~ 
          'jakarta|bogor|depok|bekasi|tangerang|bandung|surabaya|sidoarjo|gresik|cimahi'
          AND dab.principal_amount >= 4000000;
    """
    FeatureSetting.objects.create(
        feature_name=FeatureNameConst.PHYSICAL_WARNING_LETTER_BUCKET_B5_PLUS,
        is_active=True,
        description='This configuration for physical warning letter bucket B5+',
        category='collection',
        parameters={
            'physical_warning_letter': {
                'folder_id': '1X4A_R6EQ0FLAcAsBTK4yUhDOddwDBYwI',
                'queue': 'collection_high',
                'pdf_folder': 6,
                'raw_query': raw_query,
                'max_retry_hour': 9
            },
        },
    )


class Migration(migrations.Migration):

    dependencies = []

    operations = [migrations.RunPython(add_query_on_fs_physical_wl_b5_plus, migrations.RunPython.noop)]
