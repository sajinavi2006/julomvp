# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2020-09-30 08:56
from __future__ import unicode_literals

from builtins import str
from builtins import object
from django.db import migrations

from juloserver.application_flow.constants import PartnerNameConstant
from juloserver.julo.statuses import ApplicationStatusCodes
from juloserver.julo.utils import upload_file_to_oss
from juloserver.streamlined_communication.models import (InfoCardButtonProperty,
                                                         CardProperty,
                                                         InfoCardProperty,
                                                         StreamlinedMessage,
                                                         StreamlinedCommunication)
from juloserver.streamlined_communication.constant import CommunicationPlatform
from juloserver.julo.models import StatusLookup, Image, Partner
from django.conf import settings
party_popper_emoji = '\U0001F389'


class ImageNames(object):
    BACK_190 = 'info-card/CARD_BACKGROUND_IMAGE_WEB190.png'
    BACK_105 = 'info-card/CARD_BACKGROUND_IMAGE_WEB105.png'
    OPT_190 = 'info-card/CARD_OPTIONAL_IMAGE_WEB190.png'
    BUTTON_190 = 'info-card/R_BUTTON_IMAGE_WEB190.png'


def create_image(image_source_id, image_type, image_url):
    image = Image()
    image.image_source = image_source_id
    image.image_type = image_type
    image.url = image_url
    image.save()


def retroload_infocards_for_webapp(apps, _schema_editor):
    cermati_partner = Partner.objects.filter(name=PartnerNameConstant.CERMATI).last()

    data_to_be_loaded = [
        {
            'status': ApplicationStatusCodes.FORM_PARTIAL,
            'additional_condition': 'CUSTOMER_WAITING_SCORE',
            'title': 'Formulir Anda sedang dalam proses',
            'content': 'Mohon menunggu, '
                       'formulir Anda sedang diproses oleh team JULO',
            'button': [],
            'click_to': [],
            'template_type': '2',
            'card_number': 1,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.BACK_105,
            'additional_images': [],
            'button_url': [],
            'show_in_web': True,
            'show_in_android': False,
            'partner': None
        },
        {
            'status': ApplicationStatusCodes.LOC_APPROVED,
            'additional_condition': 'MSG_TO_STAY_UNTIL_1ST_TRANSACTION',
            'title': 'Horeee! Akun JULO mu sudah aktif ' + party_popper_emoji,
            'content': 'Yuk, lakukan transaksi pertamamu sekarang lewat aplikasi JULO, '
                       'install Sekarang',
            'button': ['Download Aplikasi'],
            'button_name': ['R.BUTTON'],
            'click_to': ['https://play.google.com/store/apps/details?id=com.julofinance.juloapp'],
            'template_type': '1',
            'card_number': 1,
            'text_colour': '#ffffff',
            'title_colour': '#ffffff',
            'background_url': ImageNames.BACK_190,
            'additional_images': [ImageNames.OPT_190],
            'button_url': [ImageNames.BUTTON_190],
            'show_in_web': True,
            'show_in_android': False,
            'partner': cermati_partner
        },
    ]
    for data in data_to_be_loaded:
        card_1_properties = {'card_type': '1',
                             'title': data['title'],
                             'title_color': data['title_colour'],
                             'text_color': data['text_colour'],
                             'card_order_number': data['card_number']}
        card_2_properties = {'card_type': '2',
                             'title': data['title'],
                             'title_color': data['title_colour'],
                             'text_color': data['text_colour'],
                             'card_order_number': data['card_number']}
        if data['template_type'] == '1':
            info_card_property = InfoCardProperty.objects.create(**card_1_properties)
        elif data['template_type'] == '2':
            info_card_property = InfoCardProperty.objects.create(**card_2_properties)
        button_property = dict()
        if data['button']:
            for idx, image_url in enumerate(data['button']):
                button_property['info_card_property'] = info_card_property
                button_property['text'] = data['button'][idx]
                button_property['button_name'] = data['button_name'][idx]
                button_property['action_type'] = CardProperty.WEBPAGE
                button_property['destination'] = data['click_to'][idx]
                button_property['text_color'] = data['text_colour']
                button, _ = InfoCardButtonProperty.objects.get_or_create(**button_property)
                create_image(
                    button.id,
                    CardProperty.IMAGE_TYPE.button_background_image,
                    data['button_url'][idx]
                )

        data_streamlined_message = {'message_content': data['content'],
                                    'info_card_property': info_card_property}

        message = StreamlinedMessage.objects.create(**data_streamlined_message)
        status = StatusLookup.objects.filter(status_code=data['status']).last()

        data_for_streamlined_comms = {'status_code': status,
                                      'status': data['status'],
                                      'communication_platform': CommunicationPlatform.INFO_CARD,
                                      'message': message,
                                      'description': 'retroloaded_infocard_webapp',
                                      'is_active': True,
                                      'extra_conditions': data['additional_condition'],
                                      'partner' : data['partner']
                                      }

        StreamlinedCommunication.objects.create(**data_for_streamlined_comms)

        # create image for background
        if data['background_url']:
            create_image(
                info_card_property.id,
                CardProperty.IMAGE_TYPE.card_background_image,
                data['background_url']
            )

        if data['additional_images']:
            additional_image_url = data['additional_images']
            additional_image_url = additional_image_url[0]
            create_image(
                info_card_property.id,
                CardProperty.IMAGE_TYPE.card_optional_image,
                str(additional_image_url)
            )

    # upload image
    images_list = (
        'CARD_BACKGROUND_IMAGE_WEB190.png',
        'CARD_OPTIONAL_IMAGE_WEB190.png',
        'R_BUTTON_IMAGE_WEB190.png',
        'CARD_BACKGROUND_IMAGE_WEB105.png'
    )

    for image_name in images_list:
        remote_path = 'info-card/{}'.format(image_name)
        upload_file_to_oss(
            settings.OSS_PUBLIC_ASSETS_BUCKET,
            settings.STATICFILES_DIRS[0] + '/images/info_card/{}'.format(image_name),
            remote_path
        )

def deactivated_current_190_infocard_for_webapp(apps, _schema_editor):
    current_info_card_190 = StreamlinedCommunication.objects.filter(
        status_code=ApplicationStatusCodes.LOC_APPROVED)
    current_info_card_190.update(show_in_web=False)

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(deactivated_current_190_infocard_for_webapp,
                             migrations.RunPython.noop),
        migrations.RunPython(retroload_infocards_for_webapp, migrations.RunPython.noop)

    ]
