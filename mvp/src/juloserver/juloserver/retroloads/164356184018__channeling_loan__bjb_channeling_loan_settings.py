# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2022-01-30 16:57
from __future__ import unicode_literals
from builtins import range
import random
import string

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.models import User
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.julo.models import (
    LenderDisburseCounter,
    LenderCustomerCriteria,
    LenderProductCriteria,
    Partner,
    FeatureSetting,
)
from juloserver.julo.constants import FeatureNameConst
from juloserver.channeling_loan.constants import FeatureNameConst as ChannelingFeatureNameConst

def create_bjb_lender(apps, schema_editor):
    jtp = LenderCurrent.objects.filter(lender_name="jtp").last()
    if not jtp:
        return
    jtp_partner = jtp.user.partner

    user = User.objects.filter(username="bjb_channeling").first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(random.choice(alphabet) for i in range(8))
        user = User.objects.create_user(
            "bjb_channeling", "bjb@channeling.default", password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner = Partner.objects.create(
            user=user,
            name="bjb_channeling",
            type="lender",
            email=user.email,
            is_active=False,
            poc_name="BJB Channeling",
            poc_email=user.email,
            poc_phone="+628111111111",
            source_of_fund="lainnya",
            company_name="BJB Channeling",
            company_address="Indonesia",
            business_type="bank",
            agreement_letter_number=jtp_partner.agreement_letter_number,
        )
        lender = LenderCurrent.objects.create(
            user=user,
            lender_name="bjb_channeling",
            lender_address="Indonesia",
            business_type="bank",
            poc_email=user.email,
            poc_name="BJB Channeling",
            poc_phone="+628111111111",
            poc_position="-",
            source_of_fund="lainnya",
            lender_display_name='BJB Channeling',
            service_fee=0,
            lender_status="inactive",
            addendum_number=jtp.addendum_number,
            insurance=jtp.insurance,
            pks_number=jtp.pks_number,
            xfers_token=jtp.xfers_token,
            is_manual_lender_balance=True,
            is_xfers_lender_flow=True,
            is_low_balance_notification=True,
            minimum_balance=500000000,
        )
        LenderDisburseCounter.objects.create(lender=lender,partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderCustomerCriteria.objects.create(lender=lender, partner=partner)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=[],
        )

        jtp_bank_accounts = jtp.lenderbankaccount_set.filter(bank_account_status="active")
        banks = []
        for bank_account in jtp_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_template in jtp.loanagreementtemplate_set.all():
            is_agreement_exists = LoanAgreementTemplate.objects.filter(
                lender=lender, agreement_type=agreement_template.agreement_type
            ).exists()
            if not is_agreement_exists:
                agreement_template.pk = None
                agreement_template.lender = lender
                agreement_templates.append(agreement_template)
        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        LenderApproval.objects.create(
            partner=partner,
            is_auto=jtp_partner.lenderapproval.is_auto,
            start_date=timezone.localtime(timezone.now()),
            end_date=None,
            delay=jtp_partner.lenderapproval.delay,
            expired_in=jtp_partner.lenderapproval.expired_in,
            is_endless=jtp_partner.lenderapproval.is_endless,
        )


def create_feature_settings_bjb_channeling(apps, _schema_editor):
    FeatureSetting.objects.create(
        feature_name=FeatureNameConst.BJB_CHANNELING,
        parameters={},
        is_active=False,
        category="disbursement",
        description="Channeling Loan"
    )

    FeatureSetting.objects.create(
        feature_name=FeatureNameConst.BJB_CHANNELING_WHITELIST,
        parameters={"applications": []},
        is_active=False,
        category="disbursement",
        description="Channeling Loan"
    )

    FeatureSetting.objects.create(
        feature_name=FeatureNameConst.BJB_CHANNELING_RISK_ACCEPTANCE_CRITERIA,
        parameters={
            "start_at": {"hour": 2, "minute": 0, "second": 0},
            "end_at": {"hour": 9, "minute": 0, "second": 0},
            "frequency": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
            "limit": 50,
        },
        is_active=False,
        category="disbursement",
        description="Channeling Loan"
    )

    FeatureSetting.objects.create(
        feature_name=ChannelingFeatureNameConst.CHANNELING_PRIORITY,
        parameters=["BJB", "BSS"],
        is_active=False,
        category="disbursement",
        description="Channeling Loan"
    )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_bjb_lender, migrations.RunPython.noop),
        migrations.RunPython(create_feature_settings_bjb_channeling, migrations.RunPython.noop),
    ]
