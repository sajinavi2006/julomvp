# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-07-02 09:45
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations

from juloserver.application_flow.models import DigitalSignatureThreshold, VoiceRecordingThreshold
from juloserver.julo.models import MobileFeatureSetting, FeatureSetting
from juloserver.loan.constants import LoanJuloOneConstant, LoanFeatureNameConst
from juloserver.otp.constants import (
    SessionTokenAction,
    SessionTokenType,
    FeatureSettingName as OTPFeatureNameConst,
)
from juloserver.payment_point.constants import (
    FeatureNameConst as PaymentPointFeatureNameConst,
    TransactionMethodCode,
)
from juloserver.payment_point.models import TransactionMethod


METHOD_ID = TransactionMethodCode.JFINANCING.code
TOKEN_ACTION = SessionTokenAction.TRANSACTION_JFINANCING


def add_new_transaction_method(app, schema_editor):
    bucket_url = settings.STATIC_ALICLOUD_BUCKET_URL + "jfinancing/"
    TransactionMethod.objects.get_or_create(
        id=METHOD_ID,
        defaults=dict(
            method=TransactionMethodCode.JFINANCING.name,
            fe_display_name="Beli HP",
            background_icon_url=bucket_url + "julo_financing.gif",
            foreground_icon_url=bucket_url + "julo_financing.png",
            foreground_locked_icon_url=bucket_url + "julo_financing_locked.png",
        ),
    )


def update_mobile_fs_trx_method_highlight(apps, schema_editor):
    mobile_fs_trx_method_highlight = MobileFeatureSetting.objects.filter(
        feature_name=PaymentPointFeatureNameConst.TRANSACTION_METHOD_HIGHLIGHT,
    ).last()
    if mobile_fs_trx_method_highlight:
        mobile_fs_trx_method_highlight.parameters[METHOD_ID] = {
            "is_active": False,
            "limit_threshold": 0,
        }
        mobile_fs_trx_method_highlight.save()


def update_mobile_fs_product_lock(apps, schema_editor):
    mobile_fs_product_lock = MobileFeatureSetting.objects.filter(
        feature_name=LoanJuloOneConstant.PRODUCT_LOCK_FEATURE_SETTING
    ).last()
    if mobile_fs_product_lock:
        mobile_fs_product_lock.parameters[LoanJuloOneConstant.JFINANCING] = {
            "locked": True,
            "app_version": "99.0.0",
        }
        mobile_fs_product_lock.save()


def update_fs_trx_method_limit(apps, schema_editor):
    fs_trx_method_limit = FeatureSetting.objects.filter(
        feature_name=LoanFeatureNameConst.TRANSACTION_METHOD_LIMIT
    ).last()
    if fs_trx_method_limit:
        fs_trx_method_limit.parameters[TransactionMethodCode.JFINANCING.name] = {
            "24 hr": 10,
            "1 hr": 5,
            "5 min": 1,
            "is_active": False,
        }
        fs_trx_method_limit.save()


def add_voice_record_and_signature_threshold(apps, schema_editor):
    VoiceRecordingThreshold.objects.create(
        transaction_method_id=METHOD_ID,
        parameters={"voice_recording_loan_amount_threshold": "1000000"},
    )
    DigitalSignatureThreshold.objects.create(
        transaction_method_id=METHOD_ID,
        parameters={"digital_signature_loan_amount_threshold": "50000"},
    )


def update_fs_otp_action_type(apps, schema_editor):
    fs_otp_action_type, _ = FeatureSetting.objects.get_or_create(feature_name="otp_action_type")

    parameters = fs_otp_action_type.parameters or {}
    if TOKEN_ACTION not in parameters:
        parameters[TOKEN_ACTION] = SessionTokenType.LONG_LIVED

    fs_otp_action_type.parameters = parameters
    fs_otp_action_type.save()


def update_mobile_fs_otp_setting(apps, schema_editor):
    mobile_fs_otp_setting, _ = MobileFeatureSetting.objects.get_or_create(
        feature_name=OTPFeatureNameConst.NORMAL
    )

    parameters = mobile_fs_otp_setting.parameters or {}

    transaction_settings = parameters.get("transaction_settings", {})
    transaction_settings[TOKEN_ACTION] = {
        "is_active": True,
        "minimum_transaction": 0,
        "is_hardtoreach": True,
        "experiment": {"is_active": True, "last_digit_customer_id": ["0", "2", "4", "6", "8"]},
    }

    parameters["transaction_document"] = ""
    parameters["transaction_settings"] = transaction_settings

    mobile_fs_otp_setting.parameters = parameters
    mobile_fs_otp_setting.save()


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(
            code=add_new_transaction_method,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_fs_trx_method_limit,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_fs_otp_action_type,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_mobile_fs_otp_setting,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_mobile_fs_product_lock,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_mobile_fs_trx_method_highlight,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=add_voice_record_and_signature_threshold,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
