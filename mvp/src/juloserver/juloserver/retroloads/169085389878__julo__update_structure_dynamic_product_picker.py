# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-08-01 01:38
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.models import MobileFeatureSetting
from django.conf import settings
from juloserver.julo.utils import upload_file_to_oss
from juloserver.julo.utils import (
    get_oss_public_url
)

BADGE_NAME_J1 = 'productpicker_iconbadge_j1.png'
BADGE_NAME_JTURBO = 'productpicker_iconbadge_jturbo.png'
REMOTE_PATH_OSS = 'product-picker'


def update_structure_parameters(_apps, _schema_editor):

    image_badge = 'image_badge'
    dynamic_content = MobileFeatureSetting.objects.filter(
        feature_name='dynamic_product_picker'
    ).last()

    if dynamic_content:
        # add structure parameters
        products_param = dynamic_content.parameters

        # upload image assets
        upload_image_assets()

        # overwrite parameters
        for product in products_param:
            if product['action']['target'] == 'julo://j1':
                remote_path = '{}/{}'.format(REMOTE_PATH_OSS, BADGE_NAME_J1)
                product[image_badge] = get_oss_public_url(
                    settings.OSS_PUBLIC_ASSETS_BUCKET,
                    remote_path,
                )
            elif product['action']['target'] == 'julo://turbo':
                remote_path = '{}/{}'.format(REMOTE_PATH_OSS, BADGE_NAME_JTURBO)
                product[image_badge] = get_oss_public_url(
                    settings.OSS_PUBLIC_ASSETS_BUCKET,
                    remote_path,
                )

        # update the parameters
        dynamic_content.update_safely(
            parameters=products_param
        )


def upload_image_assets():

    images_list = (BADGE_NAME_J1, BADGE_NAME_JTURBO)
    for image_name in images_list:
        remote_path = '{}/{}'.format(REMOTE_PATH_OSS, image_name)
        upload_file_to_oss(
            settings.OSS_PUBLIC_ASSETS_BUCKET,
            settings.STATICFILES_DIRS[0] + '/images/product_picker/{}'.format(image_name),
            remote_path
        )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(update_structure_parameters, migrations.RunPython.noop),
    ]
