# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-10-22 03:36
from __future__ import unicode_literals

from django.db import migrations
import copy
from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.constants import (
    FeatureNameConst,
    NewPDSExperiment,
)


def run_poc_c_icare_pds_configuration(apps, schema_editor):
    bucket_name = NewPDSExperiment.B2_EXPERIMENT
    # create new airudder configuration for bucket related
    feature_group_mapping_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_TASKS_STRATEGY_CONFIG
    ).last()
    if not feature_group_mapping_config:
        return
    params = feature_group_mapping_config.parameters
    param_dict = {
        "autoQA": "N",
        "acwTime": "30",
        "ringLimit": "0",
        "slotFactor": "",
        "dialingMode": "0",
        "maxLostRate": "5",
        "qaLimitRate": "100",
        "repeatTimes": "3",
        "callInterval": "0",
        "dialingOrder": [
            'mobile_phone_2',
            'no_telp_pasangan',
            'no_telp_kerabat',
            'telp_perusahaan',
        ],
        "qaLimitLength": "0",
        "autoSlotFactor": "1",
        "bulkCallInterval": "300",
        "resultStrategies": "on",
        "contactNumberInterval": "300",
        "resultStrategiesConfig": [],
        "start_time": "08:00",
        "end_time": "20:00",
        "rest_times": [["12:00", "13:00"]],
    }
    params.update({bucket_name: param_dict})
    feature_group_mapping_config.parameters = params
    feature_group_mapping_config.save()

    feature_agent_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_GROUP_NAME_CONFIG
    ).last()
    if not feature_agent_group_config:
        return

    agent_params = feature_agent_group_config.parameters
    agent_params[bucket_name] = bucket_name
    feature_agent_group_config.parameters = agent_params
    feature_agent_group_config.save()

    # set batch threshold upload to AiRudder
    feature_batching_threshold_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_SEND_BATCHING_THRESHOLD
    ).last()
    if not feature_batching_threshold_group_config:
        return

    params_threshold = feature_batching_threshold_group_config.parameters
    params_threshold[bucket_name] = 5000
    feature_batching_threshold_group_config.parameters = params_threshold
    feature_batching_threshold_group_config.save()


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(run_poc_c_icare_pds_configuration, migrations.RunPython.noop),
    ]
