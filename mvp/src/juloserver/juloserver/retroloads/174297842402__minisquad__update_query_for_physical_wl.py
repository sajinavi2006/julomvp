# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2025-03-26 08:40
from __future__ import unicode_literals

from django.db import migrations

from juloserver.julo.models import FeatureSetting
from juloserver.minisquad.constants import FeatureNameConst


def update_query_on_fs_physical_wl(apps, schema_editor):
    raw_query = """
        WITH base_payment AS (
            SELECT DISTINCT 
                a.account_id,
                l.customer_id,
                l.loan_id,
                p.account_payment_id,
                p.payment_id,
                p.due_date,
                p.due_amount,
                p.paid_date,
                p.paid_amount,
                (current_date AT TIME zone 'Asia/Jakarta') :: DATE - p.due_date AS dpd,
                p.payment_status_code,
                a.application_xid
            FROM 
                ops.payment p
            JOIN 
                ops.account_payment ap 
                ON p.account_payment_id = ap.account_payment_id
            JOIN 
                ops.loan l 
                ON p.loan_id = l.loan_id
            JOIN 
                ops.application a 
                ON l.application_id2 = a.application_id
            JOIN 
                ops.product_line pl 
                ON a.product_line_code = pl.product_line_code
            JOIN 
                ops.account ac 
                ON a.account_id = ac.account_id
            WHERE 
                p.payment_status_code NOT IN (330, 331, 332)
                AND a.product_line_code IN (1, 2)
                AND Coalesce(a.partner_id, 0) NOT IN (9, 93)
                AND ap.status_code NOT IN (330, 331, 332)
                AND p.is_restructured = FALSE
                AND p.account_payment_id IS NOT NULL
                AND ac.status_code NOT IN (433, 432)
        ),
        base_account_payment AS (
            SELECT DISTINCT
                account_id,
                customer_id,
                account_payment_id,
                due_date,
                dpd,
                Row_number() over(PARTITION BY account_id, customer_id ORDER BY due_date, account_payment_id) AS due_date_number,
                MAX(application_xid) AS application_xid,
                SUM(due_amount) AS due_amount,
                SUM(paid_amount) AS total_paid,
                MAX(paid_date) AS last_paid,
                MIN(loan_id) AS earliest_loan_id
            FROM 
                base_payment
            GROUP BY 
                account_id, customer_id, account_payment_id, due_date, dpd
        ),
        earliest_account_payment AS (
            SELECT 
                account_id, 
                customer_id, 
                account_payment_id
            FROM (
                SELECT 
                account_id, 
                customer_id, 
                account_payment_id,
                ROW_NUMBER() OVER(PARTITION BY account_id, customer_id ORDER BY due_date ASC) AS rn
                FROM 
                base_account_payment
            ) sub
            WHERE rn = 1
        ),
        dab_summary AS (
            SELECT DISTINCT
                bap.account_id,
                bap.customer_id,
                eap.account_payment_id,
                MAX(bap.application_xid) AS application_xid,
                MIN(bap.due_date) AS earliest_due_date,
                MAX(bap.dpd) AS highest_dpd,
                CASE
                WHEN MAX(bap.dpd) < 1 THEN 'Current'
                WHEN MAX(bap.dpd) BETWEEN 1 AND 10 THEN 'Bucket 1'
                WHEN MAX(bap.dpd) BETWEEN 11 AND 40 THEN 'Bucket 2'
                WHEN MAX(bap.dpd) BETWEEN 41 AND 70 THEN 'Bucket 3'
                WHEN MAX(bap.dpd) BETWEEN 71 AND 90 THEN 'Bucket 4'
                WHEN MAX(bap.dpd) >= 91 THEN 'Bucket 5'
                ELSE NULL
                END AS bucket,
                Coalesce(
                SUM(CASE WHEN bap.due_date <= (current_date AT TIME zone 'Asia/Jakarta') :: DATE 
                THEN bap.due_amount ELSE NULL END),
                SUM(CASE WHEN bap.due_date_number = 1 THEN bap.due_amount ELSE NULL END)
                ) AS due_amount,
                SUM(bap.due_amount) AS all_outstanding_amount,
                MAX(bap.last_paid) AS last_paid,
                MIN(bap.earliest_loan_id) AS earliest_loan_id
            FROM 
                base_account_payment bap
            LEFT JOIN 
                earliest_account_payment eap 
                USING (account_id, customer_id)
            GROUP BY 
                bap.account_id, bap.customer_id, eap.account_payment_id
        )
        SELECT DISTINCT
            dab.account_id
        FROM 
            dab_summary dab
        JOIN 
            ops.application a 
            ON dab.application_xid = a.application_xid
        WHERE 
            dab.highest_dpd = 15
            AND LOWER(a.address_kabupaten) ~ 'jakarta|bogor|depok|bekasi|tangerang|bandung|surabaya|sidoarjo|gresik|cimahi'
            AND dab.due_amount >= 100000;
    """
    fs = FeatureSetting.objects.filter(feature_name=FeatureNameConst.PHYSICAL_WARNING_LETTER).last()
    params = fs.parameters
    physical_existing_params = params.get('physical_warning_letter')
    physical_existing_params.update(
        raw_query=raw_query
    )
    fs.update_safely(parameters=params)


class Migration(migrations.Migration):

    dependencies = []

    operations = [migrations.RunPython(update_query_on_fs_physical_wl, migrations.RunPython.noop)]
