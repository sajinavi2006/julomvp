# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-06-16 14:42
from __future__ import unicode_literals

from django.db import migrations
from juloserver.julo.constants import WorkflowConst
from juloserver.julo.product_lines import ProductLineCodes
from juloserver.julo.models import (
    ProductProfile,
    ProductLine,
    ProductLookup,
    Workflow,
    WorkflowStatusPath,
    WorkflowStatusNode,
)
from juloserver.portal.object.product_profile.services import generate_product_lookup


def add_partnership_merchant_financing_standard_product(apps, _schema_editor):
    product_name = 'MF STANDARD PRODUCT'

    product_profile = ProductProfile.objects.create(
        name=product_name,
        min_amount=50_000,
        max_amount=30_000_000,
        min_duration=1,
        max_duration=2,
        min_interest_rate=0.48,
        max_interest_rate=0.48,
        interest_rate_increment=0,
        payment_frequency="Weekly",
        min_origination_fee=0,
        max_origination_fee=0,
        origination_fee_increment=0,
        late_fee=0.06,
        cashback_initial=0,
        cashback_payment=0,
        is_active=True,
        debt_income_ratio=0,
        is_product_exclusive=True,
        is_initial=True,
        code=ProductLineCodes.MERCHANT_FINANCING_STANDARD_PRODUCT,
    )

    product_line = ProductLine.objects.create(
        product_line_code=ProductLineCodes.MERCHANT_FINANCING_STANDARD_PRODUCT,
        product_line_type=product_name,
        min_amount=1_000,
        max_amount=30_000_000,
        min_duration=1,
        max_duration=2,
        min_interest_rate=0.04,
        max_interest_rate=0.04,
        payment_frequency='Monthly',
        product_profile=product_profile,
    )

    # product lookup
    product_lookup_list = generate_product_lookup(product_profile, product_line)
    for product_lookup_data in product_lookup_list:
        product_lookup = ProductLookup(**product_lookup_data)
        product_lookup.save()

    workflow = Workflow.objects.filter(name=WorkflowConst.MF_STANDARD_PRODUCT_WORKFLOW).last()

    if workflow:
        # Workflow status node
        WorkflowStatusNode.objects.get_or_create(
            status_node=131, handler='PartnershipMF131Handler', workflow=workflow
        )

        WorkflowStatusNode.objects.get_or_create(
            status_node=132, handler='PartnershipMF132Handler', workflow=workflow
        )

        WorkflowStatusNode.objects.get_or_create(
            status_node=141, handler='PartnershipMF141Handler', workflow=workflow
        )

        WorkflowStatusNode.objects.get_or_create(
            status_node=133, handler='PartnershipMF133Handler', workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=121, status_next=131, type="detour", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=131, status_next=132, type="happy", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=132, status_next=130, type="happy", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=132, status_next=131, type="detour", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=132, status_next=131, type="detour", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=132, status_next=135, type="graveyard", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=130, status_next=141, type="happy", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=141, status_next=190, type="happy", workflow=workflow
        )

        WorkflowStatusPath.objects.get_or_create(
            status_previous=141, status_next=133, type="graveyard", workflow=workflow
        )


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunPython(
            add_partnership_merchant_financing_standard_product, migrations.RunPython.noop
        ),
    ]
