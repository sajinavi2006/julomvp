# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2023-02-10 07:12
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.auth.models import Group, User
from django.conf import settings

from juloserver.portal.object.bulk_upload.constants import MerchantFinancingCSVUploadPartner
from juloserver.julo.models import Partner
from juloserver.julo.models import (
    ProductLine, ProductProfile, ProductLookup, ProductLineLoanPurpose,
)
from juloserver.julo.product_lines import ProductLineCodes
from juloserver.julo.models import Partner, Customer, Bank
from juloserver.disbursement.constants import NameBankValidationStatus
from juloserver.portal.object.bulk_upload.constants import (MerchantFinancingCSVUploadPartner,
                                                            MerchantFinancingCSVUploadPartnerDueDateType)
from juloserver.disbursement.models import NameBankValidation
from juloserver.customer_module.models import BankAccountCategory, BankAccountDestination
from juloserver.customer_module.constants import BankAccountCategoryConst

def create_rabando_partners(apps, schema_editor):
    group = Group.objects.get(name="julo_partners")

    user = User.objects.create(
        username=MerchantFinancingCSVUploadPartner.RABANDO, email='rabando@gmail.com'
    )
    user.groups.add(group)

    Partner.objects.create(
        user=user,
        poc_email='rabando@gmail.com',
        poc_phone='',
        poc_name='RABANDO',
        name=MerchantFinancingCSVUploadPartner.RABANDO,
        email='rabando@gmail.com',
        phone='',
        type='',
        company_name='RABANDO',
        company_address='',
        business_type='',
        partner_bank_account_number='',
        partner_bank_account_name='',
        partner_bank_name='',
        is_active=True,
        is_csv_upload_applicable=True,
        is_disbursement_to_partner_bank_account=False

    )

    rabando_product_profile, _ = ProductProfile.objects.get_or_create(
        name='RABANDO',
        code=ProductLineCodes.RABANDO,
        min_amount=1000000,
        max_amount=50000000,
        min_duration=30,
        max_duration=90,
        min_interest_rate=0.028,
        max_interest_rate=0.04,
        interest_rate_increment=0.01,
        payment_frequency='Monthly',
        min_origination_fee=0,
        max_origination_fee=0,
        late_fee=0.03,
        cashback_initial=0,
        cashback_payment=0,
        debt_income_ratio=0.3,
    )
    rabando_product_line, _ = ProductLine.objects.get_or_create(
        product_line_code=ProductLineCodes.RABANDO,
        product_line_type='RABANDO',
        min_amount=1000000,
        max_amount=50000000,
        min_duration=30,
        max_duration=90,
        min_interest_rate=0.028,
        max_interest_rate=0.04,
        payment_frequency='Monthly',
        product_profile=rabando_product_profile
    )
    ProductLookup.objects.get_or_create(
        product_name="I.0028-O.0000-L.050-C1.000-C2.000-M",
        interest_rate=0.336,
        origination_fee_pct=0,
        late_fee_pct=0.05,
        product_line=rabando_product_line,
        product_profile=rabando_product_profile,
        cashback_initial_pct=0,
        cashback_payment_pct=0
    )
    ProductLookup.objects.get_or_create(
        product_name="I.0028-O.0000-L.050-C1.000-C2.000-M",
        interest_rate=0.48,
        origination_fee_pct=0,
        late_fee_pct=0.05,
        product_line=rabando_product_line,
        product_profile=rabando_product_profile,
        cashback_initial_pct=0,
        cashback_payment_pct=0
    )
    ProductLineLoanPurpose.objects.get_or_create(
        product_line=rabando_product_line,
        loan_purpose_id=1,
    )

def add_partners_bank_account_and_other_details(apps, schema_editor):

    email_bulk_disbursement = 'tkchang@rabandogroup.com'
    email_190_application = 'tkchang@rabandogroup.com'
    email = 'tkchang@rabandogroup.com'
    if settings.ENVIRONMENT != 'prod':
        email_bulk_disbursement = 'jaka.cakrawala001@julofinance.com'
        email_190_application = 'jaka.cakrawala001@julofinance.com'
        email = 'jaka.cakrawala001@julofinance.com'

    user = User.objects.get(username=MerchantFinancingCSVUploadPartner.RABANDO)
    customer = Customer.objects.create(user=user, email=email, phone='081111111132')

    NameBankValidation.objects.create(
        bank_code='BCA',
        account_number='1234567899',
        name_in_bank='DUMMY_RABANDO_PARTNER',
        mobile_phone='087790909090',
        method='xfers',
        validation_status=NameBankValidationStatus.SUCCESS
    )

    validation = NameBankValidation.objects.filter(account_number='1234567899').last()
    if validation:
        bank_account_category = BankAccountCategory.objects.get(
            category= BankAccountCategoryConst.PARTNER
        )
        bank = Bank.objects.filter(xfers_bank_code='BCA').last()

        BankAccountDestination.objects.create(
            bank_account_category=bank_account_category,
            customer=customer,
            bank=bank,
            account_number=validation.account_number,
            name_bank_validation=validation,
            description='Rabando bank account',
        )

        Partner.objects.filter(
            name=MerchantFinancingCSVUploadPartner.RABANDO
        ).update(partner_bank_account_number=validation.account_number, 
                 partner_bank_name='BANK CENTRAL ASIA, Tbk (BCA)',
                 partner_bank_account_name=validation.name_in_bank,
                 due_date_type=MerchantFinancingCSVUploadPartnerDueDateType.END_OF_TENOR,
                 name_bank_validation=validation,
                 recipients_email_address_for_190_application=email_190_application,
                 recipients_email_address_for_bulk_disbursement=email_bulk_disbursement,
                 is_disbursement_to_distributor_bank_account=True,
                 )

class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_rabando_partners, migrations.RunPython.noop),
        migrations.RunPython(add_partners_bank_account_and_other_details, migrations.RunPython.noop),
    ]
