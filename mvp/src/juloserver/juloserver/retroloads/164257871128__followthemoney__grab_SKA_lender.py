# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2021-04-12 03:19
from __future__ import unicode_literals
from builtins import range
import random
import string

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.models import User
from django.forms.models import model_to_dict
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.followthemoney.constants import BankAccountType
from juloserver.julo.models import (
    ProductProfile,
    LenderDisburseCounter,
    LenderCustomerCriteria,
    LenderProductCriteria,
    Partner,
)
from juloserver.julo.constants import ProductLineCodes


def create_ska_lender(apps, schema_editor):
    jtp = LenderCurrent.objects.filter(lender_name="jtp").last()
    if not jtp:
        return
    jtp_partner = jtp.user.partner

    gfin_lender = LenderCurrent.objects.filter(lender_name="gfin").last()
    if not gfin_lender:
        return
    gfin_partner = gfin_lender.user.partner

    user = User.objects.filter(username='ska').first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(random.choice(alphabet) for i in range(8))
        user = User.objects.create_user("ska", "amrita.vir@grab.com", password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner_dict = model_to_dict(gfin_partner)
        del partner_dict["id"]
        partner_dict["name"] = "ska"
        partner_dict["user"] = user
        partner = Partner.objects.create(**partner_dict)

        lender_dict = model_to_dict(gfin_lender)
        del lender_dict["id"]
        lender_dict["lender_name"] = "ska"
        lender_dict["user"] = user
        lender = LenderCurrent.objects.create(**lender_dict)

        LenderDisburseCounter.objects.create(lender=lender, partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderCustomerCriteria.objects.create(lender=lender, partner=partner)
        product_profiles = ProductProfile.objects.filter(
            code__in=ProductLineCodes.grab()).values_list('id', flat=True)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=list(product_profiles),
        )

        jtp_bank_accounts = jtp.lenderbankaccount_set.filter(bank_account_status="active")
        banks = []
        for bank_account in jtp_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_template in jtp.loanagreementtemplate_set.all():
            is_agreement_exists = LoanAgreementTemplate.objects.filter(
                lender=lender, agreement_type=agreement_template.agreement_type
            ).exists()
            if not is_agreement_exists:
                agreement_template.pk = None
                agreement_template.lender = lender
                agreement_templates.append(agreement_template)
        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        if not LenderApproval.objects.filter(partner=partner).exists():
            LenderApproval.objects.create(
                partner=partner,
                is_auto=jtp_partner.lenderapproval.is_auto,
                start_date=timezone.localtime(timezone.now()),
                end_date=None,
                delay=jtp_partner.lenderapproval.delay,
                expired_in=jtp_partner.lenderapproval.expired_in,
                is_endless=jtp_partner.lenderapproval.is_endless,
            )


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_ska_lender, migrations.RunPython.noop),
    ]
