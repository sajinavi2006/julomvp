# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2024-12-27 06:04
from __future__ import unicode_literals

from django.utils import timezone

from django.db import migrations
import random
import string
from django.contrib.auth.models import User

from juloserver.followthemoney.constants import BankAccountType, LoanAgreementType
from juloserver.followthemoney.services import generate_lender_signature
from juloserver.julo.models import (
    ProductProfile,
    LenderDisburseCounter,
    LenderCustomerCriteria,
    LenderProductCriteria,
    Partner,
    FeatureSetting
)
from juloserver.followthemoney.models import (
    LenderCurrent,
    LenderBalanceCurrent,
    LenderBankAccount,
    LoanAgreementTemplate,
    LenderApproval,
)
from juloserver.julo.constants import (
    FeatureNameConst,
    ProductLineCodes,
)
lender_name = "Finsso"
company_name = "PT Finsso Nusantara Finance"
company_address = "Menara Citicon 9th Floor,Jl. Letjen S. Parman Kav 72, West Jakarta, Indonesia"
business_type = "Perusahaan Terbatas"
poc_name = "Thomas Mathai"
poc_email = "thomasmathai@cardekho.com"
poc_phone = "919818010429"
poc_position = "Direktur"
source_of_funds = "Investasi"
lisence_number = "0310240146479"
type = "lender"
minimum_balance = 500000000
signature_key = 'lender'

def create_cerdekho_lender(apps, schema_editor):


    jtp = LenderCurrent.objects.filter(lender_name="jtp", lender_status="active").last()
    if not jtp:
        return
    jtp_partner = jtp.user.partner

    user = User.objects.filter(username=lender_name).first()
    if not user:
        alphabet = string.ascii_letters + string.digits
        password = ''.join(random.choice(alphabet) for i in range(8))
        user = User.objects.create_user(lender_name, poc_email, password)

    partner = Partner.objects.get_or_none(user=user)
    if not partner:
        partner = Partner.objects.create(
            user=user,
            name=lender_name,
            type=type,
            email=user.email,
            is_active=False,
            poc_name=poc_name,
            poc_email=user.email,
            poc_phone=poc_phone,
            source_of_fund=source_of_funds,
            company_name=company_name,
            company_address=company_address,
            business_type=business_type,
            agreement_letter_number=jtp_partner.agreement_letter_number,
        )

        lender = LenderCurrent.objects.create(
            user=user,
            lender_name=lender_name,
            lender_address=company_address,
            business_type=business_type,
            poc_email=user.email,
            poc_name=poc_name,
            poc_phone=poc_phone,
            poc_position=poc_position,
            source_of_fund=source_of_funds,
            lender_display_name=lender_name,
            service_fee=0,
            lender_status="inactive",
            addendum_number=jtp.addendum_number,
            insurance=jtp.insurance,
            pks_number=jtp.pks_number,
            xfers_token=jtp.xfers_token,
            is_low_balance_notification=True,
            minimum_balance=minimum_balance,
            license_number=lisence_number,
            company_name=company_name,
        )

        LenderDisburseCounter.objects.create(lender=lender, partner=partner)
        LenderBalanceCurrent.objects.create(lender=lender)
        LenderCustomerCriteria.objects.create(
            lender=lender, partner=partner, credit_score=["A-", "B+", "B-"])
        product_profiles = ProductProfile.objects.filter(
            code=ProductLineCodes.MERCHANT_FINANCING_STANDARD_PRODUCT).values_list('id', flat=True)
        LenderProductCriteria.objects.create(
            lender=lender,
            partner=partner,
            type='Product List',
            product_profile_list=list(product_profiles),
        )

        jtp_bank_accounts = jtp.lenderbankaccount_set.filter(bank_account_status="active")
        banks = []
        for bank_account in jtp_bank_accounts:
            bank_account.pk = None
            bank_account.lender = lender
            bank_account.name_bank_validation = None
            banks.append(bank_account)
        LenderBankAccount.objects.bulk_create(banks)

        agreement_templates = []
        for agreement_type in LoanAgreementType.LIST:
            base_agreement_template = LoanAgreementTemplate.objects.filter(
                agreement_type=agreement_type,
                lender=jtp,
            ).last()
            if base_agreement_template:
                body = base_agreement_template.body
                if agreement_type == LoanAgreementType.SKRTP:
                    body = body.replace('<div>Direktur</div>', '<div>{{ poc_position }}</div>')

                agreement_templates.append(
                    LoanAgreementTemplate(
                        lender=lender,
                        body=body,
                        is_active=True,
                        agreement_type=agreement_type,
                    )
                )
        LoanAgreementTemplate.objects.bulk_create(agreement_templates)

        if jtp_partner.lenderapproval:
            LenderApproval.objects.create(
                partner=partner,
                is_auto=jtp_partner.lenderapproval.is_auto,
                start_date=timezone.localtime(timezone.now()),
                end_date=None,
                delay=jtp_partner.lenderapproval.delay,
                expired_in=jtp_partner.lenderapproval.expired_in,
                is_endless=jtp_partner.lenderapproval.is_endless,
            )

def update_list_lender_info_fs_for_cardheko_lender(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.LIST_LENDER_INFO
    ).last()
    feature_setting.parameters['lenders'][lender_name] = {
        'address': company_address,
        'license_no': lisence_number,
        'poc_name': poc_name,
        'poc_position': poc_position,
        'signature': '',
    }
    feature_setting.save()

def create_new_certificate_for_cardekho_channeling_lender(apps, schema_editor):
    lender = LenderCurrent.objects.get_or_none(lender_name=lender_name)
    if lender:
        generate_lender_signature(lender=lender, signature_key=signature_key)

def update_signature_key_configuration_for_cardekho_channeling_lender(apps, schema_editor):
    feature_setting = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.SIGNATURE_KEY_CONFIGURATION
    ).last()
    if not feature_setting:
        return

    lender = LenderCurrent.objects.get_or_none(lender_name=lender_name)
    if lender:
        feature_setting.parameters['users'][str(lender.user.id)] = signature_key
        feature_setting.save()

class Migration(migrations.Migration):
    dependencies = [
    ]

    operations = [
        migrations.RunPython(create_cerdekho_lender, migrations.RunPython.noop),
        migrations.RunPython(update_list_lender_info_fs_for_cardheko_lender, migrations.RunPython.noop),
        migrations.RunPython(create_new_certificate_for_cardekho_channeling_lender, migrations.RunPython.noop),
        migrations.RunPython(update_signature_key_configuration_for_cardekho_channeling_lender, migrations.RunPython.noop),
    ]
