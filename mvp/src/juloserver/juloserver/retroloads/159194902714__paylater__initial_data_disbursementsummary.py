# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2018-02-02 08:47
from __future__ import unicode_literals

from builtins import str
from builtins import range
import random
import string


from django.db import migrations, models
from juloserver.paylater.constants import PaylaterConst
from django.utils import timezone
from dateutil.relativedelta import relativedelta

from juloserver.paylater.models import DisbursementSummary


from juloserver.paylater.models import TransactionOne


from juloserver.julo.models import Partner


def insert_data_disbursementsummary(apps, schema_editor):
    
    
    
    partner = Partner.objects.filter(name=PaylaterConst.PARTNER_NAME).last()
    today = timezone.localtime(timezone.now()).date()

    for i in range(1, 30):
        yesterday = today - relativedelta(days=1)

        transactions = TransactionOne.objects.filter(cdate__gte=yesterday,
                                                     cdate__lt=today,
                                                     transaction_type="debit",
                                                     account_credit_limit__partner=partner)
        if transactions:
            transactions_ids = transactions.values_list('id', flat=True)
            transactions_amount = transactions.aggregate(models.Sum('disbursement_amount'))
            transactions_debt = 0 if not transactions_amount['disbursement_amount__sum'] else transactions_amount[
                'disbursement_amount__sum']

            summary = DisbursementSummary.objects.filter(transaction_date=yesterday, partner=partner).first()

            disburse_xid = "{}{}{}".format(yesterday, partner.id, str(int(transactions_debt))[-3:])
            disburse_xid = disburse_xid.replace("-", "")

            if not summary:
                DisbursementSummary.objects.create(
                    transaction_date=yesterday,
                    transaction_count=len(transactions_ids),
                    transaction_ids=list(transactions_ids),
                    transaction_amount=transactions_debt,
                    disburse_xid=int(disburse_xid),
                    partner=partner
                )
            else:
                summary.transaction_date = yesterday,
                summary.transaction_count = len(transactions_ids),
                summary.transaction_ids = transactions_ids,
                summary.transaction_amount = transactions_debt,
                summary.partner = partner

                summary.save()

        today = yesterday


class Migration(migrations.Migration):
    dependencies = [
    ]

    operations = [
        migrations.RunPython(insert_data_disbursementsummary, migrations.RunPython.noop)
    ]
