# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2025-02-25 03:56
from __future__ import unicode_literals

from django.db import migrations

from django.utils import timezone
from dateutil.relativedelta import relativedelta
from juloserver.julo.models import ExperimentSetting, FeatureSetting
from juloserver.minisquad.constants import ExperimentConst, DialerSystemConst, FeatureNameConst


def add_sorting_da_experiment(apps, schema_editor):
    # Experiment configuration
    experiment_bucket_name = '{}_{}'.format(DialerSystemConst.DIALER_BUCKET_2, 'experiment')
    now = timezone.localtime(timezone.now())
    ExperimentSetting.objects.create(
        is_active=False,
        code=ExperimentConst.COLLECTION_SORT_RISKIER_CUSTOMER,
        name="collection sort riskier customer",
        start_date=now,
        end_date=now + relativedelta(days=13),
        schedule="",
        action="",
        type="collection",
        criteria={
            DialerSystemConst.DIALER_BUCKET_2: {
                'experiment_bucket_name': experiment_bucket_name,
                'experiment_customer_id_tail': ['1', '3', '5', '7', '9'],
            },
        },
    )
    # strategy configuration
    feature_ai_rudder_tasks_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_TASKS_STRATEGY_CONFIG
    ).last()
    if not feature_ai_rudder_tasks_config:
        return

    feature_ai_rudder_tasks_config_params = feature_ai_rudder_tasks_config.parameters
    if not feature_ai_rudder_tasks_config_params:
        return

    bau_settings = feature_ai_rudder_tasks_config_params[DialerSystemConst.DIALER_BUCKET_2]
    feature_ai_rudder_tasks_config_params[experiment_bucket_name] = bau_settings
    feature_ai_rudder_tasks_config.parameters = feature_ai_rudder_tasks_config_params
    feature_ai_rudder_tasks_config.save()

    # add groupname
    feature_agent_group_config = FeatureSetting.objects.filter(
        feature_name=FeatureNameConst.AI_RUDDER_GROUP_NAME_CONFIG
    ).last()
    if not feature_agent_group_config:
        return

    agent_params = feature_agent_group_config.parameters
    agent_group = 'Group_Bucket2_experiment'
    agent_params[experiment_bucket_name] = agent_group
    feature_agent_group_config.parameters = agent_params
    feature_agent_group_config.save()


class Migration(migrations.Migration):

    dependencies = []

    operations = [migrations.RunPython(add_sorting_da_experiment, migrations.RunPython.noop)]
